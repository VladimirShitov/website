[
  {
    "objectID": "modules/process_10xh5/filter_10xh5.html",
    "href": "modules/process_10xh5/filter_10xh5.html",
    "title": "Filter 10xh5",
    "section": "",
    "text": "ID: filter_10xh5\nNamespace: process_10xh5\n\n\n\nSource"
  },
  {
    "objectID": "modules/process_10xh5/filter_10xh5.html#example-commands",
    "href": "modules/process_10xh5/filter_10xh5.html#example-commands",
    "title": "Filter 10xh5",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/process_10xh5/filter_10xh5/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/process_10xh5/filter_10xh5/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/process_10xh5/filter_10xh5.html#argument-group",
    "href": "modules/process_10xh5/filter_10xh5.html#argument-group",
    "title": "Filter 10xh5",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nAn h5 file from the 10x genomics website.\nfile, required, example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n\n\n--output\nOutput h5 file.\nfile, required, example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix_filtered.h5\"\n\n\n--min_library_size\nMinimum library size.\ninteger, default: 0\n\n\n--min_cells_per_gene\nMinimum number of cells per gene.\ninteger, default: 0\n\n\n--keep_feature_types\nSpecify which feature types will never be filtered out\nstring, example: \"Antibody Capture\"\n\n\n--verbose\nIncrease verbosity\nboolean_true"
  },
  {
    "objectID": "modules/process_10xh5/filter_10xh5.html#authors",
    "href": "modules/process_10xh5/filter_10xh5.html#authors",
    "title": "Filter 10xh5",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/velocity/scvelo.html",
    "href": "modules/velocity/scvelo.html",
    "title": "Scvelo",
    "section": "",
    "text": "ID: scvelo\nNamespace: velocity\n\n\n\nSource"
  },
  {
    "objectID": "modules/velocity/scvelo.html#example-commands",
    "href": "modules/velocity/scvelo.html#example-commands",
    "title": "Scvelo",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/velocity/scvelo/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/velocity/scvelo/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/velocity/scvelo.html#argument-groups",
    "href": "modules/velocity/scvelo.html#argument-groups",
    "title": "Scvelo",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nVelocyto loom file.\nfile, required\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput directory. If it does not exist, will be created.\nfile, required\n\n\n\n\n\nFiltering and normalization\nArguments for filtering, normalization an log transform (see scvelo.pp.filter_and_normalize function)\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_counts\nMinimum number of counts required for a gene to pass filtering (spliced).\ninteger\n\n\n--min_counts_u\nMinimum number of counts required for a gene to pass filtering (unspliced).\ninteger\n\n\n--min_cells\nMinimum number of cells expressed required to pass filtering (spliced).\ninteger\n\n\n--min_cells_u\nMinimum number of cells expressed required to pass filtering (unspliced).\ninteger\n\n\n--min_shared_counts\nMinimum number of counts (both unspliced and spliced) required for a gene.\ninteger\n\n\n--min_shared_cells\nMinimum number of cells required to be expressed (both unspliced and spliced).\ninteger\n\n\n--n_top_genes\nNumber of genes to keep.\ninteger\n\n\n--log_transform\nDo not log transform counts.\nboolean, default: TRUE\n\n\n\n\n\nFitting parameters\nArguments for fitting the data\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--n_principal_components\nNumber of principal components to use for calculating moments.\ninteger\n\n\n--n_neighbors\nNumber of neighbors to use. First/second-order moments are computed for each cell across its nearest neighbors, where the neighbor graph is obtained from euclidean distances in PCA space.\ninteger, default: 30"
  },
  {
    "objectID": "modules/velocity/scvelo.html#authors",
    "href": "modules/velocity/scvelo.html#authors",
    "title": "Scvelo",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/velocity/velocyto.html",
    "href": "modules/velocity/velocyto.html",
    "title": "Velocyto",
    "section": "",
    "text": "ID: velocyto\nNamespace: velocity\n\n\n\nSource"
  },
  {
    "objectID": "modules/velocity/velocyto.html#example-commands",
    "href": "modules/velocity/velocyto.html#example-commands",
    "title": "Velocyto",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/velocity/velocyto/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/velocity/velocyto/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/velocity/velocyto.html#argument-group",
    "href": "modules/velocity/velocyto.html#argument-group",
    "title": "Velocyto",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to BAM file\nfile, required\n\n\n--transcriptome\nPath to GTF file\nfile, required\n\n\n--barcode\nValid barcodes file, to filter the bam. If –bcfile is not specified all the cell barcodes will be included. Cell barcodes should be specified in the bcfile as the ‘CB’ tag for each read\nfile\n\n\n--without_umi\nfoo\nboolean_true\n\n\n--output\nVelocyto loom file\nfile, required\n\n\n--logic\nThe logic to use for the filtering.\nstring, default: \"Default\""
  },
  {
    "objectID": "modules/velocity/velocyto.html#authors",
    "href": "modules/velocity/velocyto.html#authors",
    "title": "Velocyto",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/transform/scale.html",
    "href": "modules/transform/scale.html",
    "title": "Scale",
    "section": "",
    "text": "ID: scale\nNamespace: transform\n\n\n\nSource"
  },
  {
    "objectID": "modules/transform/scale.html#example-commands",
    "href": "modules/transform/scale.html#example-commands",
    "title": "Scale",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/transform/scale/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/scale/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/transform/scale.html#argument-group",
    "href": "modules/transform/scale.html#argument-group",
    "title": "Scale",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file.\nfile, required, example: \"input.h5mu\"\n\n\n--modality\nList of modalities to process.\nstring, default: \"rna\"\n\n\n--max_value\nClip (truncate) to this value after scaling. Does not clip by default.\ndouble\n\n\n--zero_center\nIf False, omit zero-centering variables, which allows to handle sparse input efficiently.\nboolean, default: TRUE\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\""
  },
  {
    "objectID": "modules/transform/scale.html#authors",
    "href": "modules/transform/scale.html#authors",
    "title": "Scale",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/transform/regress_out.html",
    "href": "modules/transform/regress_out.html",
    "title": "Regress out",
    "section": "",
    "text": "ID: regress_out\nNamespace: transform\n\n\n\nSource\nUses simple linear regression. This is inspired by Seurat’s regressOut function in R [Satija15]. Note that this function tends to overcorrect in certain circumstances as described in issue theislab/scanpy#526. See https://github.com/theislab/scanpy/issues/526"
  },
  {
    "objectID": "modules/transform/regress_out.html#example-commands",
    "href": "modules/transform/regress_out.html#example-commands",
    "title": "Regress out",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/transform/regress_out/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/regress_out/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/transform/regress_out.html#argument-group",
    "href": "modules/transform/regress_out.html#argument-group",
    "title": "Regress out",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--modality\nWhich modality (one or more) to run this component on.\nstring, default: \"rna\"\n\n\n--obs_keys\nWhich .obs keys to regress on.\nstring"
  },
  {
    "objectID": "modules/transform/regress_out.html#authors",
    "href": "modules/transform/regress_out.html#authors",
    "title": "Regress out",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "modules/transform/clr.html",
    "href": "modules/transform/clr.html",
    "title": "Clr",
    "section": "",
    "text": "ID: clr\nNamespace: transform\n\n\n\nSource"
  },
  {
    "objectID": "modules/transform/clr.html#example-commands",
    "href": "modules/transform/clr.html#example-commands",
    "title": "Clr",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/transform/clr/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/clr/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/transform/clr.html#argument-group",
    "href": "modules/transform/clr.html#argument-group",
    "title": "Clr",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"prot\"\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\""
  },
  {
    "objectID": "modules/transform/clr.html#authors",
    "href": "modules/transform/clr.html#authors",
    "title": "Clr",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/transform/normalize_total.html",
    "href": "modules/transform/normalize_total.html",
    "title": "Normalize total",
    "section": "",
    "text": "ID: normalize_total\nNamespace: transform\n\n\n\nSource\nNormalize each cell by total counts over all genes, so that every cell has the same total count after normalization. If choosing target_sum=1e6, this is CPM normalization.\nIf exclude_highly_expressed=True, very highly expressed genes are excluded from the computation of the normalization factor (size factor) for each cell. This is meaningful as these can strongly influence the resulting normalized values for all other genes [Weinreb17]."
  },
  {
    "objectID": "modules/transform/normalize_total.html#example-commands",
    "href": "modules/transform/normalize_total.html#example-commands",
    "title": "Normalize total",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/transform/normalize_total/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/normalize_total/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/transform/normalize_total.html#argument-group",
    "href": "modules/transform/normalize_total.html#argument-group",
    "title": "Normalize total",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--input_layer\nInput layer to use. By default, X is normalized\nstring\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--output_layer\nOutput layer to use. By default, use X.\nstring\n\n\n--target_sum\nIf None, after normalization, each observation (cell) has a total count equal to the median of total counts for observations (cells) before normalization.\ninteger, default: 10000\n\n\n--exclude_highly_expressed\nExclude (very) highly expressed genes for the computation of the normalization factor (size factor) for each cell. A gene is considered highly expressed, if it has more than max_fraction of the total counts in at least one cell. The not-excluded genes will sum up to target_sum.\nboolean_true"
  },
  {
    "objectID": "modules/transform/normalize_total.html#authors",
    "href": "modules/transform/normalize_total.html#authors",
    "title": "Normalize total",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/transform/delete_layer.html",
    "href": "modules/transform/delete_layer.html",
    "title": "Delete layer",
    "section": "",
    "text": "ID: delete_layer\nNamespace: transform\n\n\n\nSource"
  },
  {
    "objectID": "modules/transform/delete_layer.html#example-commands",
    "href": "modules/transform/delete_layer.html#example-commands",
    "title": "Delete layer",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/transform/delete_layer/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/delete_layer/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/transform/delete_layer.html#argument-group",
    "href": "modules/transform/delete_layer.html#argument-group",
    "title": "Delete layer",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--layer\nInput layer to remove\nstring, required\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--missing_ok\nDo not raise an error if the layer does not exist for all modalities.\nboolean_true"
  },
  {
    "objectID": "modules/transform/delete_layer.html#authors",
    "href": "modules/transform/delete_layer.html#authors",
    "title": "Delete layer",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/transform/log1p.html",
    "href": "modules/transform/log1p.html",
    "title": "Log1p",
    "section": "",
    "text": "ID: log1p\nNamespace: transform\n\n\n\nSource\nComputes X = log(X + 1), where log denotes the natural logarithm unless a different base is given"
  },
  {
    "objectID": "modules/transform/log1p.html#example-commands",
    "href": "modules/transform/log1p.html#example-commands",
    "title": "Log1p",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/transform/log1p/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/log1p/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/transform/log1p.html#argument-group",
    "href": "modules/transform/log1p.html#argument-group",
    "title": "Log1p",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--input_layer\nInput layer to use. If None, X is normalized\nstring\n\n\n--output_layer\nOutput layer to use. By default, use X.\nstring\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--base\n\ndouble, example: 2"
  },
  {
    "objectID": "modules/transform/log1p.html#authors",
    "href": "modules/transform/log1p.html#authors",
    "title": "Log1p",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/qc/multiqc.html",
    "href": "modules/qc/multiqc.html",
    "title": "Multiqc",
    "section": "",
    "text": "ID: multiqc\nNamespace: qc\n\n\n\nSource"
  },
  {
    "objectID": "modules/qc/multiqc.html#example-commands",
    "href": "modules/qc/multiqc.html#example-commands",
    "title": "Multiqc",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/qc/multiqc/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/qc/multiqc/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/qc/multiqc.html#argument-group",
    "href": "modules/qc/multiqc.html#argument-group",
    "title": "Multiqc",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nDescribe the input file.\nfile, required, example: \"input.txt\"\n\n\n--output\nDescribe the output file.\nfile, required, example: \"report\""
  },
  {
    "objectID": "modules/qc/multiqc.html#authors",
    "href": "modules/qc/multiqc.html#authors",
    "title": "Multiqc",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/qc/fastqc.html",
    "href": "modules/qc/fastqc.html",
    "title": "Fastqc",
    "section": "",
    "text": "ID: fastqc\nNamespace: qc\n\n\n\nSource\nThis component can take one or more files (by means of shell globbing) or a complete directory"
  },
  {
    "objectID": "modules/qc/fastqc.html#example-commands",
    "href": "modules/qc/fastqc.html#example-commands",
    "title": "Fastqc",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/qc/fastqc/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/qc/fastqc/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/qc/fastqc.html#argument-group",
    "href": "modules/qc/fastqc.html#argument-group",
    "title": "Fastqc",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--mode\nThe mode in which the component works. Can be either files or dir.\nstring, default: \"files\"\n\n\n--input\nDirectory containing input fastq files.\nfile, required, example: \"fastq_dir\"\n\n\n--output\nOutput directory to write reports to.\nfile, required, example: \"qc\""
  },
  {
    "objectID": "modules/qc/fastqc.html#authors",
    "href": "modules/qc/fastqc.html#authors",
    "title": "Fastqc",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/qc/calculate_qc_metrics.html",
    "href": "modules/qc/calculate_qc_metrics.html",
    "title": "Calculate qc metrics",
    "section": "",
    "text": "ID: calculate_qc_metrics\nNamespace: qc\n\n\n\nSource\nThe metrics are comparable to what scanpy.pp.calculate_qc_metrics output, although they have slightly different names:\nVar metrics (name in this component -> name in scanpy): - pct_dropout -> pct_dropout_by_{expr_type} - num_nonzero_obs -> n_cells_by_{expr_type} - obs_mean -> mean_{expr_type} - total_counts -> total_{expr_type}\nObs metrics: - num_nonzero_vars -> n_genes_by_{expr_type} - pct_{var_qc_metrics]} -> pct_{expr_type}{qc_var} - total_counts{var_qc_metrics} -> total_{expr_type}{qc_var} - pct_of_counts_in_top{top_n_vars}vars -> pct{expr_type}in_top{n}{var_type} - total_counts -> total{expr_type}"
  },
  {
    "objectID": "modules/qc/calculate_qc_metrics.html#example-commands",
    "href": "modules/qc/calculate_qc_metrics.html#example-commands",
    "title": "Calculate qc metrics",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/qc/calculate_qc_metrics/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/qc/calculate_qc_metrics/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/qc/calculate_qc_metrics.html#argument-groups",
    "href": "modules/qc/calculate_qc_metrics.html#argument-groups",
    "title": "Calculate qc metrics",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--layer\n\nstring, example: \"raw_counts\"\n\n\n--var_qc_metrics\nKeys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled ‘True’, compared to the total sum of the values for all genes.\nstring, example: \"ercc,highly_variable\"\n\n\n--top_n_vars\nNumber of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. --top_n_vars 20,50 finds cumulative proportion to the 20th and 50th most expressed vars.\ninteger\n\n\n\n\n\nOutputs\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/qc/calculate_qc_metrics.html#authors",
    "href": "modules/qc/calculate_qc_metrics.html#authors",
    "title": "Calculate qc metrics",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author)"
  },
  {
    "objectID": "modules/nextflow/process_dot.html",
    "href": "modules/nextflow/process_dot.html",
    "title": "Process dot",
    "section": "",
    "text": "ID: process_dot\nNamespace: nextflow\n\n\n\nSource"
  },
  {
    "objectID": "modules/nextflow/process_dot.html#example-commands",
    "href": "modules/nextflow/process_dot.html#example-commands",
    "title": "Process dot",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/nextflow/process_dot/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/nextflow/process_dot/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/nextflow/process_dot.html#argument-group",
    "href": "modules/nextflow/process_dot.html#argument-group",
    "title": "Process dot",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput .dot file as created by running nextflow run ... -with-dag graph.dot\nfile, required, example: \"graph.dot\"\n\n\n--output\nA processed .dot file.\nfile, example: \"output.dot\"\n\n\n--format\nThe format of the output graph\nstring, default: \"mermaid\""
  },
  {
    "objectID": "modules/nextflow/process_dot.html#authors",
    "href": "modules/nextflow/process_dot.html#authors",
    "title": "Process dot",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/dimred/pca.html",
    "href": "modules/dimred/pca.html",
    "title": "Pca",
    "section": "",
    "text": "ID: pca\nNamespace: dimred\n\n\n\nSource\nUses the implementation of scikit-learn [Pedregosa11]"
  },
  {
    "objectID": "modules/dimred/pca.html#example-commands",
    "href": "modules/dimred/pca.html#example-commands",
    "title": "Pca",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/dimred/pca/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dimred/pca/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/dimred/pca.html#argument-group",
    "href": "modules/dimred/pca.html#argument-group",
    "title": "Pca",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--layer\nUse specified layer for expression values instead of the .X object from the modality.\nstring\n\n\n--var_input\nColumn name in .var matrix that will be used to select which genes to run the PCA on.\nstring, example: \"filter_with_hvg\"\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_output\nIn which .obsm slot to store the resulting embedding.\nstring, default: \"X_pca\"\n\n\n--varm_output\nIn which .varm slot to store the resulting loadings matrix.\nstring, default: \"pca_loadings\"\n\n\n--uns_output\nIn which .uns slot to store the resulting variance objects.\nstring, default: \"pca_variance\"\n\n\n--num_components\nNumber of principal components to compute. Defaults to 50, or 1 - minimum dimension size of selected representation.\ninteger, example: 25\n\n\n--overwrite\nAllow overwriting .obsm, .varm and .uns slots.\nboolean_true"
  },
  {
    "objectID": "modules/dimred/pca.html#authors",
    "href": "modules/dimred/pca.html#authors",
    "title": "Pca",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/dimred/umap.html",
    "href": "modules/dimred/umap.html",
    "title": "Umap",
    "section": "",
    "text": "ID: umap\nNamespace: dimred\n\n\n\nSource\nBesides tending to be faster than tSNE, it optimizes the embedding such that it best reflects the topology of the data, which we represent throughout Scanpy using a neighborhood graph. tSNE, by contrast, optimizes the distribution of nearest-neighbor distances in the embedding such that these best match the distribution of distances in the high-dimensional space. We use the implementation of umap-learn [McInnes18]. For a few comparisons of UMAP with tSNE, see this preprint"
  },
  {
    "objectID": "modules/dimred/umap.html#example-commands",
    "href": "modules/dimred/umap.html#example-commands",
    "title": "Umap",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/dimred/umap/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dimred/umap/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/dimred/umap.html#argument-groups",
    "href": "modules/dimred/umap.html#argument-groups",
    "title": "Umap",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--uns_neighbors\nThe .uns neighbors slot as output by the find_neighbors component.\nstring, default: \"neighbors\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_output\nThe pre/postfix under which to store the UMAP results.\nstring, default: \"umap\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_dist\nThe effective minimum distance between embedded points. Smaller values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points. The value should be set relative to the spread value, which determines the scale at which embedded points will be spread out.\ndouble, default: 0.5\n\n\n--spread\nThe effective scale of embedded points. In combination with min_dist this determines how clustered/clumped the embedded points are.\ndouble, default: 1\n\n\n--num_components\nThe number of dimensions of the embedding.\ninteger, default: 2\n\n\n--max_iter\nThe number of iterations (epochs) of the optimization. Called n_epochs in the original UMAP. Default is set to 500 if neighbors[‘connectivities’].shape[0] <= 10000, else 200.\ninteger\n\n\n--alpha\nThe initial learning rate for the embedding optimization.\ndouble, default: 1\n\n\n--gamma\nWeighting applied to negative samples in low dimensional embedding optimization. Values higher than one will result in greater weight being given to negative samples.\ndouble, default: 1\n\n\n--negative_sample_rate\nThe number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding.\ninteger, default: 5\n\n\n--init_pos\nHow to initialize the low dimensional embedding. Called init in the original UMAP. Options are: * Any key from .obsm * 'paga': positions from paga() * 'spectral': use a spectral embedding of the graph * 'random': assign initial embedding positions at random.\nstring, default: \"spectral\""
  },
  {
    "objectID": "modules/dimred/umap.html#authors",
    "href": "modules/dimred/umap.html#authors",
    "title": "Umap",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/integrate/scvi.html",
    "href": "modules/integrate/scvi.html",
    "title": "Scvi",
    "section": "",
    "text": "ID: scvi\nNamespace: integrate\n\n\n\nSource"
  },
  {
    "objectID": "modules/integrate/scvi.html#example-commands",
    "href": "modules/integrate/scvi.html#example-commands",
    "title": "Scvi",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/integrate/scvi/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/scvi/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/integrate/scvi.html#argument-groups",
    "href": "modules/integrate/scvi.html#argument-groups",
    "title": "Scvi",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--input_layer\nInput layer to use. If None, X is used\nstring\n\n\n--obs_batch\nColumn name discriminating between your batches.\nstring, default: \"sample_id\"\n\n\n--var_input\n.var column containing highly variable genes. By default, do not subset genes.\nstring\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required\n\n\n--obsm_output\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_scvi_integrated\"\n\n\n\n\n\nEarly stopping arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--early_stopping\nWhether to perform early stopping with respect to the validation set.\nboolean\n\n\n--early_stopping_monitor\nMetric logged during validation set epoch.\nstring, default: \"elbo_validation\"\n\n\n--early_stopping_patience\nNumber of validation epochs with no improvement after which training will be stopped.\ninteger, default: 45\n\n\n--early_stopping_min_delta\nMinimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.\ndouble, default: 0\n\n\n\n\n\nLearning parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--max_epochs\nNumber of passes through the dataset, defaults to (20000 / number of cells) * 400 or 400; whichever is smallest.\ninteger, required\n\n\n--reduce_lr_on_plateau\nWhether to monitor validation loss and reduce learning rate when validation set lr_scheduler_metric plateaus.\nboolean, default: TRUE\n\n\n--lr_factor\nFactor to reduce learning rate.\ndouble, default: 0.6\n\n\n--lr_patience\nNumber of epochs with no improvement after which learning rate will be reduced.\ndouble, default: 30"
  },
  {
    "objectID": "modules/integrate/scvi.html#authors",
    "href": "modules/integrate/scvi.html#authors",
    "title": "Scvi",
    "section": "Authors",
    "text": "Authors\n\nMalte D. Luecken   (author)\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/integrate/scanorama.html",
    "href": "modules/integrate/scanorama.html",
    "title": "Scanorama",
    "section": "",
    "text": "ID: scanorama\nNamespace: integrate\n\n\n\nSource"
  },
  {
    "objectID": "modules/integrate/scanorama.html#example-commands",
    "href": "modules/integrate/scanorama.html#example-commands",
    "title": "Scanorama",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/integrate/scanorama/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/scanorama/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/integrate/scanorama.html#argument-group",
    "href": "modules/integrate/scanorama.html#argument-group",
    "title": "Scanorama",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput .h5mu file\nfile, required, default: \"output.h5ad\"\n\n\n--obs_batch\nColumn name discriminating between your batches.\nstring, default: \"batch\"\n\n\n--obsm_input\nBasis obsm slot to run scanorama on.\nstring, default: \"X_pca\"\n\n\n--obsm_output\nThe name of the field in adata.obsm where the integrated embeddings will be stored after running this function. Defaults to X_scanorama.\nstring, default: \"X_scanorama\"\n\n\n--knn\nNumber of nearest neighbors to use for matching.\ninteger, default: 20\n\n\n--batch_size\nThe batch size used in the alignment vector computation. Useful when integrating very large (>100k samples) datasets. Set to large value that runs within available memory.\ninteger, default: 5000\n\n\n--sigma\nCorrection smoothing parameter on Gaussian kernel.\ndouble, default: 15\n\n\n--approx\nUse approximate nearest neighbors with Python annoy; greatly speeds up matching runtime.\nboolean, default: TRUE\n\n\n--alpha\nAlignment score minimum cutoff\ndouble, default: 0.1"
  },
  {
    "objectID": "modules/integrate/scanorama.html#authors",
    "href": "modules/integrate/scanorama.html#authors",
    "title": "Scanorama",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/integrate/scarches.html",
    "href": "modules/integrate/scarches.html",
    "title": "Scarches",
    "section": "",
    "text": "ID: scarches\nNamespace: integrate\n\n\n\nSource"
  },
  {
    "objectID": "modules/integrate/scarches.html#example-commands",
    "href": "modules/integrate/scarches.html#example-commands",
    "title": "Scarches",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/integrate/scarches/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/scarches/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/integrate/scarches.html#argument-groups",
    "href": "modules/integrate/scarches.html#argument-groups",
    "title": "Scarches",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file to use as a query\nfile, required\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--reference\nPath to the directory with reference model or a web link. For HLCA use https://zenodo.org/record/6337966/files/HLCA_reference_model.zip\nfile, required\n\n\n--dataset_name\nName of query dataset to use as a batch name. If not set, name of the input file is used\nstring, default: \"test_dataset\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required\n\n\n--model_output\nOutput directory for model\nfile, default: \"model\"\n\n\n--obsm_output\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_integrated_scanvi\"\n\n\n\n\n\nEarly stopping arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--early_stopping\nWhether to perform early stopping with respect to the validation set.\nboolean\n\n\n--early_stopping_monitor\nMetric logged during validation set epoch.\nstring, default: \"elbo_validation\"\n\n\n--early_stopping_patience\nNumber of validation epochs with no improvement after which training will be stopped.\ninteger, default: 45\n\n\n--early_stopping_min_delta\nMinimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.\ndouble, default: 0\n\n\n\n\n\nLearning parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--max_epochs\nNumber of passes through the dataset, defaults to (20000 / number of cells) * 400 or 400; whichever is smallest.\ninteger, required\n\n\n--reduce_lr_on_plateau\nWhether to monitor validation loss and reduce learning rate when validation set lr_scheduler_metric plateaus.\nboolean, default: TRUE\n\n\n--lr_factor\nFactor to reduce learning rate.\ndouble, default: 0.6\n\n\n--lr_patience\nNumber of epochs with no improvement after which learning rate will be reduced.\ndouble, default: 30"
  },
  {
    "objectID": "modules/integrate/scarches.html#authors",
    "href": "modules/integrate/scarches.html#authors",
    "title": "Scarches",
    "section": "Authors",
    "text": "Authors\n\nVladimir Shitov   ()"
  },
  {
    "objectID": "modules/integrate/harmonypy.html",
    "href": "modules/integrate/harmonypy.html",
    "title": "Harmonypy",
    "section": "",
    "text": "ID: harmonypy\nNamespace: integrate\n\n\n\nSource\nBased on an implementation in python from https://github.com/slowkow/harmonypy"
  },
  {
    "objectID": "modules/integrate/harmonypy.html#example-commands",
    "href": "modules/integrate/harmonypy.html#example-commands",
    "title": "Harmonypy",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/integrate/harmonypy/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/harmonypy/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/integrate/harmonypy.html#argument-group",
    "href": "modules/integrate/harmonypy.html#argument-group",
    "title": "Harmonypy",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required\n\n\n--output\nOutput h5mu file.\nfile, required\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obsm_input\nWhich .obsm slot to use as a starting PCA embedding.\nstring, default: \"X_pca\"\n\n\n--obsm_output\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_pca_integrated\"\n\n\n--theta\nDiversity clustering penalty parameter. Specify for each variable in group.by.vars. theta=0 does not encourage any diversity. Larger values of theta result in more diverse clusters.\ndouble, default: 2\n\n\n--obs_covariates\nThe .obs field(s) that define the covariate(s) to regress out.\nstring, required, example: \"batch\", example: \"sample\""
  },
  {
    "objectID": "modules/integrate/harmonypy.html#authors",
    "href": "modules/integrate/harmonypy.html#authors",
    "title": "Harmonypy",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/reference/build_bdrhap_reference.html",
    "href": "modules/reference/build_bdrhap_reference.html",
    "title": "Build bdrhap reference",
    "section": "",
    "text": "ID: build_bdrhap_reference\nNamespace: reference\n\n\n\nSource"
  },
  {
    "objectID": "modules/reference/build_bdrhap_reference.html#example-commands",
    "href": "modules/reference/build_bdrhap_reference.html#example-commands",
    "title": "Build bdrhap reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/reference/build_bdrhap_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/reference/build_bdrhap_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/reference/build_bdrhap_reference.html#argument-group",
    "href": "modules/reference/build_bdrhap_reference.html#argument-group",
    "title": "Build bdrhap reference",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nReference genome fasta.\nfile, required, example: \"genome_sequence.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"transcriptome_annotation.gtf.gz\"\n\n\n--output\nStar index\nfile, required, example: \"star_index.tar.gz\""
  },
  {
    "objectID": "modules/reference/build_bdrhap_reference.html#authors",
    "href": "modules/reference/build_bdrhap_reference.html#authors",
    "title": "Build bdrhap reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/reference/build_cellranger_reference.html",
    "href": "modules/reference/build_cellranger_reference.html",
    "title": "Build cellranger reference",
    "section": "",
    "text": "ID: build_cellranger_reference\nNamespace: reference\n\n\n\nSource\nCreates a new folder named after the genome."
  },
  {
    "objectID": "modules/reference/build_cellranger_reference.html#example-commands",
    "href": "modules/reference/build_cellranger_reference.html#example-commands",
    "title": "Build cellranger reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/reference/build_cellranger_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/reference/build_cellranger_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/reference/build_cellranger_reference.html#argument-group",
    "href": "modules/reference/build_cellranger_reference.html#argument-group",
    "title": "Build cellranger reference",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nReference genome fasta.\nfile, required, example: \"genome_sequence.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"transcriptome_annotation.gtf.gz\"\n\n\n--output\nOutput folder\nfile, required, example: \"cellranger_reference\""
  },
  {
    "objectID": "modules/reference/build_cellranger_reference.html#authors",
    "href": "modules/reference/build_cellranger_reference.html#authors",
    "title": "Build cellranger reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/reference/make_reference.html",
    "href": "modules/reference/make_reference.html",
    "title": "Make reference",
    "section": "",
    "text": "ID: make_reference\nNamespace: reference\n\n\n\nSource\nExample input files are: - genome_fasta: https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz - transcriptome_gtf: https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz - ercc: https://assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip"
  },
  {
    "objectID": "modules/reference/make_reference.html#example-commands",
    "href": "modules/reference/make_reference.html#example-commands",
    "title": "Make reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/reference/make_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/reference/make_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/reference/make_reference.html#argument-group",
    "href": "modules/reference/make_reference.html#argument-group",
    "title": "Make reference",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nReference genome fasta. Example:\nfile, required, example: \"genome_fasta.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"transcriptome.gtf.gz\"\n\n\n--ercc\nERCC sequence and annotation file.\nfile, example: \"ercc.zip\"\n\n\n--subset_regex\nWill subset the reference chromosomes using the given regex.\nstring, example: \"(ERCC-00002&#124;chr1)\"\n\n\n--output_fasta\nOutput genome sequence fasta.\nfile, required, example: \"genome_sequence.fa.gz\"\n\n\n--output_gtf\nOutput transcriptome annotation gtf.\nfile, required, example: \"transcriptome_annotation.gtf.gz\""
  },
  {
    "objectID": "modules/reference/make_reference.html#authors",
    "href": "modules/reference/make_reference.html#authors",
    "title": "Make reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/download/download_file.html",
    "href": "modules/download/download_file.html",
    "title": "Download file",
    "section": "",
    "text": "ID: download_file\nNamespace: download\n\n\n\nSource"
  },
  {
    "objectID": "modules/download/download_file.html#example-commands",
    "href": "modules/download/download_file.html#example-commands",
    "title": "Download file",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/download/download_file/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/download/download_file/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/download/download_file.html#argument-group",
    "href": "modules/download/download_file.html#argument-group",
    "title": "Download file",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nURL to a file to download.\nstring, required, example: \"https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n\n\n--output\nPath where to store output.\nfile, required, example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n\n\n--verbose\nIncrease verbosity\nboolean_true"
  },
  {
    "objectID": "modules/download/download_file.html#authors",
    "href": "modules/download/download_file.html#authors",
    "title": "Download file",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/download/sync_test_resources.html",
    "href": "modules/download/sync_test_resources.html",
    "title": "Sync test resources",
    "section": "",
    "text": "ID: sync_test_resources\nNamespace: download\n\n\n\nSource"
  },
  {
    "objectID": "modules/download/sync_test_resources.html#example-commands",
    "href": "modules/download/sync_test_resources.html#example-commands",
    "title": "Sync test resources",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/download/sync_test_resources/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/download/sync_test_resources/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/download/sync_test_resources.html#argument-group",
    "href": "modules/download/sync_test_resources.html#argument-group",
    "title": "Sync test resources",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the S3 bucket to sync from.\nstring, default: \"s3://openpipelines-data\"\n\n\n--output\nPath to the test resource directory.\nfile, default: \"resources_test\"\n\n\n--quiet\nDisplays the operations that would be performed using the specified command without actually running them.\nboolean_true\n\n\n--dryrun\nDoes not display the operations performed from the specified command.\nboolean_true\n\n\n--delete\nFiles that exist in the destination but not in the source are deleted during sync.\nboolean_true\n\n\n--exclude\nExclude all files or objects from the command that matches the specified pattern.\nstring"
  },
  {
    "objectID": "modules/download/sync_test_resources.html#authors",
    "href": "modules/download/sync_test_resources.html#authors",
    "title": "Sync test resources",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/neighbors/bbknn.html",
    "href": "modules/neighbors/bbknn.html",
    "title": "Bbknn",
    "section": "",
    "text": "ID: bbknn\nNamespace: neighbors\n\n\n\nSource"
  },
  {
    "objectID": "modules/neighbors/bbknn.html#example-commands",
    "href": "modules/neighbors/bbknn.html#example-commands",
    "title": "Bbknn",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/neighbors/bbknn/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/neighbors/bbknn/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/neighbors/bbknn.html#argument-group",
    "href": "modules/neighbors/bbknn.html#argument-group",
    "title": "Bbknn",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obsm_input\nThe dimensionality reduction in .obsm to use for neighbour detection. Defaults to X_pca.\nstring, default: \"X_pca\"\n\n\n--obs_batch\n.obs column name discriminating between your batches.\nstring, default: \"batch\"\n\n\n--output\nOutput .h5mu file.\nfile, required\n\n\n--uns_output\nMandatory .uns slot to store various neighbor output objects.\nstring, default: \"neighbors\"\n\n\n--obsp_distances\nIn which .obsp slot to store the distance matrix between the resulting neighbors.\nstring, default: \"distances\"\n\n\n--obsp_connectivities\nIn which .obsp slot to store the connectivities matrix between the resulting neighbors.\nstring, default: \"connectivities\"\n\n\n--n_neighbors_within_batch\nHow many top neighbours to report for each batch; total number of neighbours in the initial k-nearest-neighbours computation will be this number times the number of batches.\ninteger, default: 3\n\n\n--n_pcs\nHow many dimensions (in case of PCA, principal components) to use in the analysis.\ninteger, default: 50\n\n\n--n_trim\nTrim the neighbours of each cell to these many top connectivities. May help with population independence and improve the tidiness of clustering. The lower the value the more independent the individual populations, at the cost of more conserved batch effect. If None (default), sets the parameter value automatically to 10 times neighbors_within_batch times the number of batches. Set to 0 to skip.\ninteger"
  },
  {
    "objectID": "modules/neighbors/bbknn.html#authors",
    "href": "modules/neighbors/bbknn.html#authors",
    "title": "Bbknn",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/neighbors/find_neighbors.html",
    "href": "modules/neighbors/find_neighbors.html",
    "title": "Find neighbors",
    "section": "",
    "text": "ID: find_neighbors\nNamespace: neighbors\n\n\n\nSource\nThe neighbor search efficiency of this heavily relies on UMAP [McInnes18], which also provides a method for estimating connectivities of data points - the connectivity of the manifold (method==‘umap’). If method==‘gauss’, connectivities are computed according to [Coifman05], in the adaption of [Haghverdi16]."
  },
  {
    "objectID": "modules/neighbors/find_neighbors.html#example-commands",
    "href": "modules/neighbors/find_neighbors.html#example-commands",
    "title": "Find neighbors",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/neighbors/find_neighbors/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/neighbors/find_neighbors/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/neighbors/find_neighbors.html#argument-group",
    "href": "modules/neighbors/find_neighbors.html#argument-group",
    "title": "Find neighbors",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obsm_input\nWhich .obsm slot to use as a starting PCA embedding.\nstring, default: \"X_pca\"\n\n\n--output\nOutput h5mu file containing the found neighbors.\nfile, example: \"output.h5mu\"\n\n\n--uns_output\nMandatory .uns slot to store various neighbor output objects.\nstring, default: \"neighbors\"\n\n\n--obsp_distances\nIn which .obsp slot to store the distance matrix between the resulting neighbors.\nstring, default: \"distances\"\n\n\n--obsp_connectivities\nIn which .obsp slot to store the connectivities matrix between the resulting neighbors.\nstring, default: \"connectivities\"\n\n\n--metric\nThe distance metric to be used in the generation of the nearest neighborhood network.\nstring, default: \"euclidean\"\n\n\n--num_neighbors\nThe size of local neighborhood (in terms of number of neighboring data points) used for manifold approximation. Larger values result in more global views of the manifold, while smaller values result in more local data being preserved. In general values should be in the range 2 to 100. If knn is True, number of nearest neighbors to be searched. If knn is False, a Gaussian kernel width is set to the distance of the n_neighbors neighbor.\ninteger, default: 15\n\n\n--seed\nA random seed.\ninteger, default: 0"
  },
  {
    "objectID": "modules/neighbors/find_neighbors.html#authors",
    "href": "modules/neighbors/find_neighbors.html#authors",
    "title": "Find neighbors",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/filter/filter_with_scrublet.html",
    "href": "modules/filter/filter_with_scrublet.html",
    "title": "Filter with scrublet",
    "section": "",
    "text": "ID: filter_with_scrublet\nNamespace: filter\n\n\n\nSource\nThe method tests for potential doublets by using the expression profiles of cells to generate synthetic potential doubles which are tested against cells. The method returns a “doublet score” on which it calls for potential doublets.\nFor the source code please visit https://github.com/AllonKleinLab/scrublet.\nFor 10x we expect the doublet rates to be: Multiplet Rate (%) - # of Cells Loaded - # of Cells Recovered ~0.4% ~800 ~500 ~0.8% ~1,600 ~1,000 ~1.6% ~3,200 ~2,000 ~2.3% ~4,800 ~3,000 ~3.1% ~6,400 ~4,000 ~3.9% ~8,000 ~5,000 ~4.6% ~9,600 ~6,000 ~5.4% ~11,200 ~7,000 ~6.1% ~12,800 ~8,000 ~6.9% ~14,400 ~9,000 ~7.6% ~16,000 ~10,000"
  },
  {
    "objectID": "modules/filter/filter_with_scrublet.html#example-commands",
    "href": "modules/filter/filter_with_scrublet.html#example-commands",
    "title": "Filter with scrublet",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/filter/filter_with_scrublet/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/filter_with_scrublet/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/filter/filter_with_scrublet.html#argument-group",
    "href": "modules/filter/filter_with_scrublet.html#argument-group",
    "title": "Filter with scrublet",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--obs_name_filter\nIn which .obs slot to store a boolean array corresponding to which observations should be filtered out.\nstring, default: \"filter_with_scrublet\"\n\n\n--do_subset\nWhether to subset before storing the output.\nboolean_true\n\n\n--obs_name_doublet_score\nName of the doublet scores column in the obs slot of the returned object.\nstring, default: \"scrublet_doublet_score\"\n\n\n--min_counts\nThe number of minimal UMI counts per cell that have to be present for initial cell detection.\ninteger, default: 2\n\n\n--min_cells\nThe number of cells in which UMIs for a gene were detected.\ninteger, default: 3\n\n\n--min_gene_variablity_percent\nUsed for gene filtering prior to PCA. Keep the most highly variable genes (in the top min_gene_variability_pctl percentile), as measured by the v-statistic [Klein et al., Cell 2015].\ndouble, default: 85\n\n\n--num_pca_components\nNumber of principal components to use during PCA dimensionality reduction.\ninteger, default: 30\n\n\n--distance_metric\nThe distance metric used for computing similarities.\nstring, default: \"euclidean\""
  },
  {
    "objectID": "modules/filter/filter_with_scrublet.html#authors",
    "href": "modules/filter/filter_with_scrublet.html#authors",
    "title": "Filter with scrublet",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (contributor)\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "modules/filter/remove_modality.html",
    "href": "modules/filter/remove_modality.html",
    "title": "Remove modality",
    "section": "",
    "text": "ID: remove_modality\nNamespace: filter\n\n\n\nSource"
  },
  {
    "objectID": "modules/filter/remove_modality.html#example-commands",
    "href": "modules/filter/remove_modality.html#example-commands",
    "title": "Remove modality",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/filter/remove_modality/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/remove_modality/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/filter/remove_modality.html#argument-group",
    "href": "modules/filter/remove_modality.html#argument-group",
    "title": "Remove modality",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, required\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/filter/remove_modality.html#authors",
    "href": "modules/filter/remove_modality.html#authors",
    "title": "Remove modality",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/filter/filter_with_counts.html",
    "href": "modules/filter/filter_with_counts.html",
    "title": "Filter with counts",
    "section": "",
    "text": "ID: filter_with_counts\nNamespace: filter\n\n\n\nSource\nThis is based on both the UMI counts, the gene counts and the mitochondrial genes (genes starting with mt/MT)"
  },
  {
    "objectID": "modules/filter/filter_with_counts.html#example-commands",
    "href": "modules/filter/filter_with_counts.html#example-commands",
    "title": "Filter with counts",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/filter/filter_with_counts/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/filter_with_counts/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/filter/filter_with_counts.html#argument-groups",
    "href": "modules/filter/filter_with_counts.html#argument-groups",
    "title": "Filter with counts",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--layer\n\nstring, example: \"raw_counts\"\n\n\n--var_gene_names\n.var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). Gene names matching with the regex value from –mitochondrial_gene_regex will be identified as a mitochondrial gene.\nstring, example: \"gene_symbol\"\n\n\n--mitochondrial_gene_regex\nRegex string that identifies mitochondrial genes from –var_gene_names. By default will detect human and mouse mitochondrial genes from a gene symbol.\nstring, default: \"^[mM][tT]-\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--do_subset\nWhether to subset before storing the output.\nboolean_true\n\n\n--obs_name_filter\nIn which .obs slot to store a boolean array corresponding to which observations should be removed.\nstring, default: \"filter_with_counts\"\n\n\n--var_name_filter\nIn which .var slot to store a boolean array corresponding to which variables should be removed.\nstring, default: \"filter_with_counts\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_counts\nMinimum number of counts captured per cell.\ninteger, example: 200\n\n\n--max_counts\nMaximum number of counts captured per cell.\ninteger, example: 5000000\n\n\n--min_genes_per_cell\nMinimum of non-zero values per cell.\ninteger, example: 200\n\n\n--max_genes_per_cell\nMaximum of non-zero values per cell.\ninteger, example: 1500000\n\n\n--min_cells_per_gene\nMinimum of non-zero values per gene.\ninteger, example: 3\n\n\n--min_fraction_mito\nMinimum fraction of UMIs that are mitochondrial.\ndouble, example: 0\n\n\n--max_fraction_mito\nMaximum fraction of UMIs that are mitochondrial.\ndouble, example: 0.2"
  },
  {
    "objectID": "modules/filter/filter_with_counts.html#authors",
    "href": "modules/filter/filter_with_counts.html#authors",
    "title": "Filter with counts",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (maintainer, author)"
  },
  {
    "objectID": "modules/filter/do_filter.html",
    "href": "modules/filter/do_filter.html",
    "title": "Do filter",
    "section": "",
    "text": "ID: do_filter\nNamespace: filter\n\n\n\nSource"
  },
  {
    "objectID": "modules/filter/do_filter.html#example-commands",
    "href": "modules/filter/do_filter.html#example-commands",
    "title": "Do filter",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/filter/do_filter/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/do_filter/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/filter/do_filter.html#argument-group",
    "href": "modules/filter/do_filter.html#argument-group",
    "title": "Do filter",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obs_filter\nWhich .obs columns to use to filter the observations by.\nstring, example: \"filter_with_x\"\n\n\n--var_filter\nWhich .var columns to use to filter the observations by.\nstring, example: \"filter_with_x\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/filter/do_filter.html#authors",
    "href": "modules/filter/do_filter.html#authors",
    "title": "Do filter",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "modules/filter/filter_with_hvg.html",
    "href": "modules/filter/filter_with_hvg.html",
    "title": "Filter with hvg",
    "section": "",
    "text": "ID: filter_with_hvg\nNamespace: filter\n\n\n\nSource\nExpects logarithmized data, except when flavor=‘seurat_v3’ in which count data is expected.\nDepending on flavor, this reproduces the R-implementations of Seurat [Satija15], Cell Ranger [Zheng17], and Seurat v3 [Stuart19].\nFor the dispersion-based methods ([Satija15] and [Zheng17]), the normalized dispersion is obtained by scaling with the mean and standard deviation of the dispersions for genes falling into a given bin for mean expression of genes. This means that for each bin of mean expression, highly variable genes are selected.\nFor [Stuart19], a normalized variance for each gene is computed. First, the data are standardized (i.e., z-score normalization per feature) with a regularized standard deviation. Next, the normalized variance is computed as the variance of each gene after the transformation. Genes are ranked by the normalized variance."
  },
  {
    "objectID": "modules/filter/filter_with_hvg.html#example-commands",
    "href": "modules/filter/filter_with_hvg.html#example-commands",
    "title": "Filter with hvg",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/filter/filter_with_hvg/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/filter_with_hvg/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/filter/filter_with_hvg.html#argument-group",
    "href": "modules/filter/filter_with_hvg.html#argument-group",
    "title": "Filter with hvg",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--layer\nuse adata.layers[layer] for expression values instead of adata.X.\nstring\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--var_name_filter\nIn which .var slot to store a boolean array corresponding to which observations should be filtered out.\nstring, default: \"filter_with_hvg\"\n\n\n--varm_name\nIn which .varm slot to store additional metadata.\nstring, default: \"hvg\"\n\n\n--do_subset\nWhether to subset before storing the output.\nboolean_true\n\n\n--flavor\nChoose the flavor for identifying highly variable genes. For the dispersion based methods in their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_genes.\nstring, default: \"seurat\"\n\n\n--n_top_genes\nNumber of highly-variable genes to keep. Mandatory if flavor=‘seurat_v3’.\ninteger\n\n\n--min_mean\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’.\ndouble, default: 0.0125\n\n\n--max_mean\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’.\ndouble, default: 3\n\n\n--min_disp\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’.\ndouble, default: 0.5\n\n\n--max_disp\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’. Default is +inf.\ndouble\n\n\n--span\nThe fraction of the data (cells) used when estimating the variance in the loess model fit if flavor=‘seurat_v3’.\ndouble, default: 0.3\n\n\n--n_bins\nNumber of bins for binning the mean gene expression. Normalization is done with respect to each bin. If just a single gene falls into a bin, the normalized dispersion is artificially set to 1.\ninteger, default: 20\n\n\n--obs_batch_key\nIf specified, highly-variable genes are selected within each batch separately and merged. This simple process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. For all flavors, genes are first sorted by how many batches they are a HVG. For dispersion-based flavors ties are broken by normalized dispersion. If flavor = ‘seurat_v3’, ties are broken by the median (across batches) rank based on within-batch normalized variance.\nstring"
  },
  {
    "objectID": "modules/filter/filter_with_hvg.html#authors",
    "href": "modules/filter/filter_with_hvg.html#authors",
    "title": "Filter with hvg",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (contributor)\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "modules/filter/subset_h5mu.html",
    "href": "modules/filter/subset_h5mu.html",
    "title": "Subset h5mu",
    "section": "",
    "text": "ID: subset_h5mu\nNamespace: filter\n\n\n\nSource"
  },
  {
    "objectID": "modules/filter/subset_h5mu.html#example-commands",
    "href": "modules/filter/subset_h5mu.html#example-commands",
    "title": "Subset h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/filter/subset_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/subset_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/filter/subset_h5mu.html#argument-group",
    "href": "modules/filter/subset_h5mu.html#argument-group",
    "title": "Subset h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--number_of_observations\nNumber of observations to be selected from the h5mu file.\ninteger, example: 5"
  },
  {
    "objectID": "modules/filter/subset_h5mu.html#authors",
    "href": "modules/filter/subset_h5mu.html#authors",
    "title": "Subset h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/demux/bcl_convert.html",
    "href": "modules/demux/bcl_convert.html",
    "title": "Bcl convert",
    "section": "",
    "text": "ID: bcl_convert\nNamespace: demux\n\n\n\nSource\nInformation about upgrading from bcl2fastq via https://emea.support.illumina.com/bulletins/2020/10/upgrading-from-bcl2fastq-to-bcl-convert.html and https://support.illumina.com/sequencing/sequencing_software/bcl-convert/compatibility.html"
  },
  {
    "objectID": "modules/demux/bcl_convert.html#example-commands",
    "href": "modules/demux/bcl_convert.html#example-commands",
    "title": "Bcl convert",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/demux/bcl_convert/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/bcl_convert/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/demux/bcl_convert.html#argument-group",
    "href": "modules/demux/bcl_convert.html#argument-group",
    "title": "Bcl convert",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput run directory\nfile, required, example: \"bcl_dir\"\n\n\n--sample_sheet\nPointer to the sample sheet\nfile, required, example: \"bcl_dir\"\n\n\n--output\nOutput directory containig fastq files\nfile, required, example: \"fastq_dir\"\n\n\n--reports\nReports directory\nfile, example: \"reports_dir\"\n\n\n--test_mode\nShould bcl-convert be run in test mode (using –first-tile-only)?\nboolean, default: FALSE"
  },
  {
    "objectID": "modules/demux/bcl_convert.html#authors",
    "href": "modules/demux/bcl_convert.html#authors",
    "title": "Bcl convert",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (author, maintainer)\nMarijke Van Moerbeke  (author)"
  },
  {
    "objectID": "modules/demux/cellranger_mkfastq.html",
    "href": "modules/demux/cellranger_mkfastq.html",
    "title": "Cellranger mkfastq",
    "section": "",
    "text": "ID: cellranger_mkfastq\nNamespace: demux\n\n\n\nSource"
  },
  {
    "objectID": "modules/demux/cellranger_mkfastq.html#example-commands",
    "href": "modules/demux/cellranger_mkfastq.html#example-commands",
    "title": "Cellranger mkfastq",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/demux/cellranger_mkfastq/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/cellranger_mkfastq/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/demux/cellranger_mkfastq.html#argument-group",
    "href": "modules/demux/cellranger_mkfastq.html#argument-group",
    "title": "Cellranger mkfastq",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the (untarred) BCL files. Expects ‘RunParameters.xml’ at ‘./’.\nfile, required, example: \"/path/to/bcl\"\n\n\n--sample_sheet\nThe path to the sample sheet.\nfile, required, example: \"SampleSheet.csv\"\n\n\n--output\nThe folder to store the demux results\nfile, required, default: \"fastqs\", example: \"/path/to/output\"\n\n\n--reports\nReports directory\nfile, example: \"reports_dir\""
  },
  {
    "objectID": "modules/demux/cellranger_mkfastq.html#authors",
    "href": "modules/demux/cellranger_mkfastq.html#authors",
    "title": "Cellranger mkfastq",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/demux/bcl2fastq.html",
    "href": "modules/demux/bcl2fastq.html",
    "title": "Bcl2fastq",
    "section": "",
    "text": "ID: bcl2fastq\nNamespace: demux\n\n\n\nSource"
  },
  {
    "objectID": "modules/demux/bcl2fastq.html#example-commands",
    "href": "modules/demux/bcl2fastq.html#example-commands",
    "title": "Bcl2fastq",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/demux/bcl2fastq/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/bcl2fastq/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/demux/bcl2fastq.html#argument-group",
    "href": "modules/demux/bcl2fastq.html#argument-group",
    "title": "Bcl2fastq",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput run directory\nfile, required, example: \"bcl_dir\"\n\n\n--sample_sheet\nPointer to the sample sheet\nfile, required, example: \"SampleSheet.csv\"\n\n\n--output\nOutput directory containig fastq files\nfile, required, example: \"fastq_dir\"\n\n\n--reports\nReports directory\nfile, example: \"reports_dir\"\n\n\n--ignore_missing\n\nboolean_true"
  },
  {
    "objectID": "modules/demux/bcl2fastq.html#authors",
    "href": "modules/demux/bcl2fastq.html#authors",
    "title": "Bcl2fastq",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (author, maintainer)"
  },
  {
    "objectID": "modules/mapping/star_align.html",
    "href": "modules/mapping/star_align.html",
    "title": "Star align",
    "section": "",
    "text": "ID: star_align\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/mapping/star_align.html#example-commands",
    "href": "modules/mapping/star_align.html#example-commands",
    "title": "Star align",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/star_align/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/star_align/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/star_align.html#argument-groups",
    "href": "modules/mapping/star_align.html#argument-groups",
    "title": "Star align",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput/Output\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe FASTQ files to be analyzed. Corresponds to the –readFilesIn argument in the STAR command.\nfile, required, example: \"mysample_S1_L001_R1_001.fastq.gz\", example: \"mysample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nPath to the reference built by star_build_reference. Corresponds to the –genomeDir argument in the STAR command.\nfile, required, example: \"/path/to/reference\"\n\n\n--output\nPath to output directory. Corresponds to the –outFileNamePrefix argument in the STAR command.\nfile, required, example: \"/path/to/foo\"\n\n\n\n\n\nRun Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--runRNGseed\nrandom number generator seed.\ninteger, example: 777\n\n\n\n\n\nGenome Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genomeLoad\nmode of shared memory usage for the genome files. Only used with –runMode alignReads. - LoadAndKeep … load genome into shared and keep it in memory after run - LoadAndRemove … load genome into shared but remove it after run - LoadAndExit … load genome into shared memory and exit, keeping the genome in memory for future runs - Remove … do not map anything, just remove loaded genome from memory - NoSharedMemory … do not use shared memory, each job will have its own private copy of the genome\nstring, example: \"NoSharedMemory\"\n\n\n--genomeFastaFiles\npath(s) to the fasta files with the genome sequences, separated by spaces. These files should be plain text FASTA files, they cannot be zipped. Required for the genome generation (–runMode genomeGenerate). Can also be used in the mapping (–runMode alignReads) to add extra (new) sequences to the genome (e.g. spike-ins).\nfile\n\n\n--genomeFileSizes\ngenome files exact sizes in bytes. Typically, this should not be defined by the user.\ninteger, example: 0\n\n\n--genomeTransformOutput\nwhich output to transform back to original genome - SAM … SAM/BAM alignments - SJ … splice junctions (SJ.out.tab) - None … no transformation of the output\nstring\n\n\n--genomeChrSetMitochondrial\nnames of the mitochondrial chromosomes. Presently only used for STARsolo statistics output/\nstring, example: \"chrM\", example: \"M\", example: \"MT\"\n\n\n\n\n\nSplice Junctions Database\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sjdbFileChrStartEnd\npath to the files with genomic coordinates (chr  start  end  strand) for the splice junction introns. Multiple files can be supplied and will be concatenated.\nstring\n\n\n--sjdbGTFfile\npath to the GTF file with annotations\nfile\n\n\n--sjdbGTFchrPrefix\nprefix for chromosome names in a GTF file (e.g. ‘chr’ for using ENSMEBL annotations with UCSC genomes)\nstring\n\n\n--sjdbGTFfeatureExon\nfeature type in GTF file to be used as exons for building transcripts\nstring, example: \"exon\"\n\n\n--sjdbGTFtagExonParentTranscript\nGTF attribute name for parent transcript ID (default “transcript_id” works for GTF files)\nstring, example: \"transcript_id\"\n\n\n--sjdbGTFtagExonParentGene\nGTF attribute name for parent gene ID (default “gene_id” works for GTF files)\nstring, example: \"gene_id\"\n\n\n--sjdbGTFtagExonParentGeneName\nGTF attribute name for parent gene name\nstring, example: \"gene_name\"\n\n\n--sjdbGTFtagExonParentGeneType\nGTF attribute name for parent gene type\nstring, example: \"gene_type\", example: \"gene_biotype\"\n\n\n--sjdbOverhang\nlength of the donor/acceptor sequence on each side of the junctions, ideally = (mate_length - 1)\ninteger, example: 100\n\n\n--sjdbScore\nextra alignment score for alignments that cross database junctions\ninteger, example: 2\n\n\n--sjdbInsertSave\nwhich files to save when sjdb junctions are inserted on the fly at the mapping step - Basic … only small junction / transcript files - All … all files including big Genome, SA and SAindex - this will create a complete genome directory\nstring, example: \"Basic\"\n\n\n\n\n\nVariation parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--varVCFfile\npath to the VCF file that contains variation data. The 10th column should contain the genotype information, e.g. 0/1\nstring\n\n\n\n\n\nRead Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--readFilesType\nformat of input read files - Fastx … FASTA or FASTQ - SAM SE … SAM or BAM single-end reads; for BAM use –readFilesCommand samtools view - SAM PE … SAM or BAM paired-end reads; for BAM use –readFilesCommand samtools view\nstring, example: \"Fastx\"\n\n\n--readFilesSAMattrKeep\nfor –readFilesType SAM SE/PE, which SAM tags to keep in the output BAM, e.g.: –readFilesSAMtagsKeep RG PL - All … keep all tags - None … do not keep any tags\nstring, example: \"All\"\n\n\n--readFilesManifest\npath to the “manifest” file with the names of read files. The manifest file should contain 3 tab-separated columns: paired-end reads: read1_file_name \\(tab\\) read2_file_name \\(tab\\) read_group_line. single-end reads: read1_file_name \\(tab\\) - \\(tab\\) read_group_line. Spaces, but not tabs are allowed in file names. If read_group_line does not start with ID:, it can only contain one ID field, and ID: will be added to it. If read_group_line starts with ID:, it can contain several fields separated by \\(tab\\), and all fields will be be copied verbatim into SAM @RG header line.\nfile\n\n\n--readFilesPrefix\nprefix for the read files names, i.e. it will be added in front of the strings in –readFilesIn\nstring\n\n\n--readFilesCommand\ncommand line to execute for each of the input file. This command should generate FASTA or FASTQ text and send it to stdout For example: zcat - to uncompress .gz files, bzcat - to uncompress .bz2 files, etc.\nstring\n\n\n--readMapNumber\nnumber of reads to map from the beginning of the file -1: map all reads\ninteger, example: -1\n\n\n--readMatesLengthsIn\nEqual/NotEqual - lengths of names,sequences,qualities for both mates are the same / not the same. NotEqual is safe in all situations.\nstring, example: \"NotEqual\"\n\n\n--readNameSeparator\ncharacter(s) separating the part of the read names that will be trimmed in output (read name after space is always trimmed)\nstring, example: \"/\"\n\n\n--readQualityScoreBase\nnumber to be subtracted from the ASCII code to get Phred quality score\ninteger, example: 33\n\n\n\n\n\nRead Clipping\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--clipAdapterType\nadapter clipping type - Hamming … adapter clipping based on Hamming distance, with the number of mismatches controlled by –clip5pAdapterMMp - CellRanger4 … 5p and 3p adapter clipping similar to CellRanger4. Utilizes Opal package by Martin Šošić: https://github.com/Martinsos/opal - None … no adapter clipping, all other clip* parameters are disregarded\nstring, example: \"Hamming\"\n\n\n--clip3pNbases\nnumber(s) of bases to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n--clip3pAdapterSeq\nadapter sequences to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates. - polyA … polyA sequence with the length equal to read length\nstring\n\n\n--clip3pAdapterMMp\nmax proportion of mismatches for 3p adapter clipping for each mate. If one value is given, it will be assumed the same for both mates.\ndouble, example: 0.1\n\n\n--clip3pAfterAdapterNbases\nnumber of bases to clip from 3p of each mate after the adapter clipping. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n--clip5pNbases\nnumber(s) of bases to clip from 5p of each mate. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n\n\n\nLimits\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--limitGenomeGenerateRAM\nmaximum available RAM (bytes) for genome generation\nlong, example: NA\n\n\n--limitIObufferSize\nmax available buffers size (bytes) for input/output, per thread\nlong, example: 30000000, example: 50000000\n\n\n--limitOutSAMoneReadBytes\nmax size of the SAM record (bytes) for one read. Recommended value: >(2(LengthMate1+LengthMate2+100)outFilterMultimapNmax\nlong, example: 100000\n\n\n--limitOutSJoneRead\nmax number of junctions for one read (including all multi-mappers)\ninteger, example: 1000\n\n\n--limitOutSJcollapsed\nmax number of collapsed junctions\ninteger, example: 1000000\n\n\n--limitBAMsortRAM\nmaximum available RAM (bytes) for sorting BAM. If =0, it will be set to the genome index size. 0 value can only be used with –genomeLoad NoSharedMemory option.\nlong, example: 0\n\n\n--limitSjdbInsertNsj\nmaximum number of junctions to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run\ninteger, example: 1000000\n\n\n--limitNreadsSoft\nsoft limit on the number of reads\ninteger, example: -1\n\n\n\n\n\nOutput: general\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outTmpKeep\nwhether to keep the temporary files after STAR runs is finished - None … remove all temporary files - All … keep all files\nstring\n\n\n--outStd\nwhich output will be directed to stdout (standard out) - Log … log messages - SAM … alignments in SAM format (which normally are output to Aligned.out.sam file), normal standard output will go into Log.std.out - BAM_Unsorted … alignments in BAM format, unsorted. Requires –outSAMtype BAM Unsorted - BAM_SortedByCoordinate … alignments in BAM format, sorted by coordinate. Requires –outSAMtype BAM SortedByCoordinate - BAM_Quant … alignments to transcriptome in BAM format, unsorted. Requires –quantMode TranscriptomeSAM\nstring, example: \"Log\"\n\n\n--outReadsUnmapped\noutput of unmapped and partially mapped (i.e. mapped only one mate of a paired end read) reads in separate file(s). - None … no output - Fastx … output in separate fasta/fastq files, Unmapped.out.mate1/2\nstring\n\n\n--outQSconversionAdd\nadd this number to the quality score (e.g. to convert from Illumina to Sanger, use -31)\ninteger, example: 0\n\n\n--outMultimapperOrder\norder of multimapping alignments in the output files - Old_2.4 … quasi-random order used before 2.5.0 - Random … random order of alignments for each multi-mapper. Read mates (pairs) are always adjacent, all alignment for each read stay together. This option will become default in the future releases.\nstring, example: \"Old_2.4\"\n\n\n\n\n\nOutput: SAM and BAM\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSAMtype\ntype of SAM/BAM output 1st word: - BAM … output BAM without sorting - SAM … output SAM without sorting - None … no SAM/BAM output 2nd, 3rd: - Unsorted … standard unsorted - SortedByCoordinate … sorted by coordinate. This option will allocate extra memory for sorting which can be specified by –limitBAMsortRAM.\nstring, example: \"SAM\"\n\n\n--outSAMmode\nmode of SAM output - None … no SAM output - Full … full SAM output - NoQS … full SAM but without quality scores\nstring, example: \"Full\"\n\n\n--outSAMstrandField\nCufflinks-like strand field flag - None … not used - intronMotif … strand derived from the intron motif. This option changes the output alignments: reads with inconsistent and/or non-canonical introns are filtered out.\nstring\n\n\n--outSAMattributes\na string of desired SAM attributes, in the order desired for the output SAM. Tags can be listed in any combination/order. Presets: - None … no attributes - Standard … NH HI AS nM - All … NH HI AS nM NM MD jM jI MC ch Alignment: - NH … number of loci the reads maps to: =1 for unique mappers, >1 for multimappers. Standard SAM tag. - HI … multiple alignment index, starts with –outSAMattrIHstart (=1 by default). Standard SAM tag. - AS … local alignment score, +1/-1 for matches/mismateches, score* penalties for indels and gaps. For PE reads, total score for two mates. Stadnard SAM tag. - nM … number of mismatches. For PE reads, sum over two mates. - NM … edit distance to the reference (number of mismatched + inserted + deleted bases) for each mate. Standard SAM tag. - MD … string encoding mismatched and deleted reference bases (see standard SAM specifications). Standard SAM tag. - jM … intron motifs for all junctions (i.e. N in CIGAR): 0: non-canonical; 1: GT/AG, 2: CT/AC, 3: GC/AG, 4: CT/GC, 5: AT/AC, 6: GT/AT. If splice junctions database is used, and a junction is annotated, 20 is added to its motif value. - jI … start and end of introns for all junctions (1-based). - XS … alignment strand according to –outSAMstrandField. - MC … mate’s CIGAR string. Standard SAM tag. - ch … marks all segment of all chimeric alingments for –chimOutType WithinBAM output. - cN … number of bases clipped from the read ends: 5’ and 3’ Variation: - vA … variant allele - vG … genomic coordinate of the variant overlapped by the read. - vW … 1 - alignment passes WASP filtering; 2,3,4,5,6,7 - alignment does not pass WASP filtering. Requires –waspOutputMode SAMtag. STARsolo: - CR CY UR UY … sequences and quality scores of cell barcodes and UMIs for the solo* demultiplexing. - GX GN … gene ID and gene name for unique-gene reads. - gx gn … gene IDs and gene names for unique- and multi-gene reads. - CB UB … error-corrected cell barcodes and UMIs for solo* demultiplexing. Requires –outSAMtype BAM SortedByCoordinate. - sM … assessment of CB and UMI. - sS … sequence of the entire barcode (CB,UMI,adapter). - sQ … quality of the entire barcode. ***Unsupported/undocumented: - ha … haplotype (1/2) when mapping to the diploid genome. Requires genome generated with –genomeTransformType Diploid . - rB … alignment block read/genomic coordinates. - vR … read coordinate of the variant.\nstring, example: \"Standard\"\n\n\n--outSAMattrIHstart\nstart value for the IH attribute. 0 may be required by some downstream software, such as Cufflinks or StringTie.\ninteger, example: 1\n\n\n--outSAMunmapped\noutput of unmapped reads in the SAM format 1st word: - None … no output - Within … output unmapped reads within the main SAM file (i.e. Aligned.out.sam) 2nd word: - KeepPairs … record unmapped mate for each alignment, and, in case of unsorted output, keep it adjacent to its mapped mate. Only affects multi-mapping reads.\nstring\n\n\n--outSAMorder\ntype of sorting for the SAM output Paired: one mate after the other for all paired alignments PairedKeepInputOrder: one mate after the other for all paired alignments, the order is kept the same as in the input FASTQ files\nstring, example: \"Paired\"\n\n\n--outSAMprimaryFlag\nwhich alignments are considered primary - all others will be marked with 0x100 bit in the FLAG - OneBestScore … only one alignment with the best score is primary - AllBestScore … all alignments with the best score are primary\nstring, example: \"OneBestScore\"\n\n\n--outSAMreadID\nread ID record type - Standard … first word (until space) from the FASTx read ID line, removing /1,/2 from the end - Number … read number (index) in the FASTx file\nstring, example: \"Standard\"\n\n\n--outSAMmapqUnique\n0 to 255: the MAPQ value for unique mappers\ninteger, example: 255\n\n\n--outSAMflagOR\n0 to 65535: sam FLAG will be bitwise OR’d with this value, i.e. FLAG=FLAG | outSAMflagOR. This is applied after all flags have been set by STAR, and after outSAMflagAND. Can be used to set specific bits that are not set otherwise.\ninteger, example: 0\n\n\n--outSAMflagAND\n0 to 65535: sam FLAG will be bitwise AND’d with this value, i.e. FLAG=FLAG & outSAMflagOR. This is applied after all flags have been set by STAR, but before outSAMflagOR. Can be used to unset specific bits that are not set otherwise.\ninteger, example: 65535\n\n\n--outSAMattrRGline\nSAM/BAM read group line. The first word contains the read group identifier and must start with “ID:”, e.g. –outSAMattrRGline ID:xxx CN:yy “DS:z z z”. xxx will be added as RG tag to each output alignment. Any spaces in the tag values have to be double quoted. Comma separated RG lines correspons to different (comma separated) input files in –readFilesIn. Commas have to be surrounded by spaces, e.g. –outSAMattrRGline ID:xxx , ID:zzz “DS:z z” , ID:yyy DS:yyyy\nstring\n\n\n--outSAMheaderHD\n@HD (header) line of the SAM header\nstring\n\n\n--outSAMheaderPG\nextra @PG (software) line of the SAM header (in addition to STAR)\nstring\n\n\n--outSAMheaderCommentFile\npath to the file with @CO (comment) lines of the SAM header\nstring\n\n\n--outSAMfilter\nfilter the output into main SAM/BAM files - KeepOnlyAddedReferences … only keep the reads for which all alignments are to the extra reference sequences added with –genomeFastaFiles at the mapping stage. - KeepAllAddedReferences … keep all alignments to the extra reference sequences added with –genomeFastaFiles at the mapping stage.\nstring\n\n\n--outSAMmultNmax\nmax number of multiple alignments for a read that will be output to the SAM/BAM files. Note that if this value is not equal to -1, the top scoring alignment will be output first - -1 … all alignments (up to –outFilterMultimapNmax) will be output\ninteger, example: -1\n\n\n--outSAMtlen\ncalculation method for the TLEN field in the SAM/BAM files - 1 … leftmost base of the (+)strand mate to rightmost base of the (-)mate. (+)sign for the (+)strand mate - 2 … leftmost base of any mate to rightmost base of any mate. (+)sign for the mate with the leftmost base. This is different from 1 for overlapping mates with protruding ends\ninteger, example: 1\n\n\n--outBAMcompression\n-1 to 10 BAM compression level, -1=default compression (6?), 0=no compression, 10=maximum compression\ninteger, example: 1\n\n\n--outBAMsortingThreadN\n>=0: number of threads for BAM sorting. 0 will default to min(6,–runThreadN).\ninteger, example: 0\n\n\n--outBAMsortingBinsN\n>0: number of genome bins for coordinate-sorting\ninteger, example: 50\n\n\n\n\n\nBAM processing\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--bamRemoveDuplicatesType\nmark duplicates in the BAM file, for now only works with (i) sorted BAM fed with inputBAMfile, and (ii) for paired-end alignments only - - … no duplicate removal/marking - UniqueIdentical … mark all multimappers, and duplicate unique mappers. The coordinates, FLAG, CIGAR must be identical - UniqueIdenticalNotMulti … mark duplicate unique mappers but not multimappers.\nstring\n\n\n--bamRemoveDuplicatesMate2basesN\nnumber of bases from the 5’ of mate 2 to use in collapsing (e.g. for RAMPAGE)\ninteger, example: 0\n\n\n\n\n\nOutput Wiggle\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outWigType\ntype of signal output, e.g. “bedGraph” OR “bedGraph read1_5p”. Requires sorted BAM: –outSAMtype BAM SortedByCoordinate . 1st word: - None … no signal output - bedGraph … bedGraph format - wiggle … wiggle format 2nd word: - read1_5p … signal from only 5’ of the 1st read, useful for CAGE/RAMPAGE etc - read2 … signal from only 2nd read\nstring\n\n\n--outWigStrand\nstrandedness of wiggle/bedGraph output - Stranded … separate strands, str1 and str2 - Unstranded … collapsed strands\nstring, example: \"Stranded\"\n\n\n--outWigReferencesPrefix\nprefix matching reference names to include in the output wiggle file, e.g. “chr”, default “-” - include all references\nstring\n\n\n--outWigNorm\ntype of normalization for the signal - RPM … reads per million of mapped reads - None … no normalization, “raw” counts\nstring, example: \"RPM\"\n\n\n\n\n\nOutput Filtering\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outFilterType\ntype of filtering - Normal … standard filtering using only current alignment - BySJout … keep only those reads that contain junctions that passed filtering into SJ.out.tab\nstring, example: \"Normal\"\n\n\n--outFilterMultimapScoreRange\nthe score range below the maximum score for multimapping alignments\ninteger, example: 1\n\n\n--outFilterMultimapNmax\nmaximum number of loci the read is allowed to map to. Alignments (all of them) will be output only if the read maps to no more loci than this value. Otherwise no alignments will be output, and the read will be counted as “mapped to too many loci” in the Log.final.out .\ninteger, example: 10\n\n\n--outFilterMismatchNmax\nalignment will be output only if it has no more mismatches than this value.\ninteger, example: 10\n\n\n--outFilterMismatchNoverLmax\nalignment will be output only if its ratio of mismatches to mapped length is less than or equal to this value.\ndouble, example: 0.3\n\n\n--outFilterMismatchNoverReadLmax\nalignment will be output only if its ratio of mismatches to read length is less than or equal to this value.\ndouble, example: 1\n\n\n--outFilterScoreMin\nalignment will be output only if its score is higher than or equal to this value.\ninteger, example: 0\n\n\n--outFilterScoreMinOverLread\nsame as outFilterScoreMin, but normalized to read length (sum of mates’ lengths for paired-end reads)\ndouble, example: 0.66\n\n\n--outFilterMatchNmin\nalignment will be output only if the number of matched bases is higher than or equal to this value.\ninteger, example: 0\n\n\n--outFilterMatchNminOverLread\nsam as outFilterMatchNmin, but normalized to the read length (sum of mates’ lengths for paired-end reads).\ndouble, example: 0.66\n\n\n--outFilterIntronMotifs\nfilter alignment using their motifs - None … no filtering - RemoveNoncanonical … filter out alignments that contain non-canonical junctions - RemoveNoncanonicalUnannotated … filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.\nstring\n\n\n--outFilterIntronStrands\nfilter alignments - RemoveInconsistentStrands … remove alignments that have junctions with inconsistent strands - None … no filtering\nstring, example: \"RemoveInconsistentStrands\"\n\n\n\n\n\nOutput splice junctions (SJ.out.tab)\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSJtype\ntype of splice junction output - Standard … standard SJ.out.tab output - None … no splice junction output\nstring, example: \"Standard\"\n\n\n\n\n\nOutput Filtering: Splice Junctions\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSJfilterReads\nwhich reads to consider for collapsed splice junctions output - All … all reads, unique- and multi-mappers - Unique … uniquely mapping reads only\nstring, example: \"All\"\n\n\n--outSJfilterOverhangMin\nminimum overhang length for splice junctions on both sides for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif does not apply to annotated junctions\ninteger, example: 30, example: 12, example: 12, example: 12\n\n\n--outSJfilterCountUniqueMin\nminimum uniquely mapping read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions\ninteger, example: 3, example: 1, example: 1, example: 1\n\n\n--outSJfilterCountTotalMin\nminimum total (multi-mapping+unique) read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions\ninteger, example: 3, example: 1, example: 1, example: 1\n\n\n--outSJfilterDistToOtherSJmin\nminimum allowed distance to other junctions’ donor/acceptor does not apply to annotated junctions\ninteger, example: 10, example: 0, example: 5, example: 10\n\n\n--outSJfilterIntronMaxVsReadN\nmaximum gap allowed for junctions supported by 1,2,3,,,N reads i.e. by default junctions supported by 1 read can have gaps <=50000b, by 2 reads: <=100000b, by 3 reads: <=200000. by >=4 reads any gap <=alignIntronMax does not apply to annotated junctions\ninteger, example: 50000, example: 100000, example: 200000\n\n\n\n\n\nScoring\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--scoreGap\nsplice junction penalty (independent on intron motif)\ninteger, example: 0\n\n\n--scoreGapNoncan\nnon-canonical junction penalty (in addition to scoreGap)\ninteger, example: -8\n\n\n--scoreGapGCAG\nGC/AG and CT/GC junction penalty (in addition to scoreGap)\ninteger, example: -4\n\n\n--scoreGapATAC\nAT/AC and GT/AT junction penalty (in addition to scoreGap)\ninteger, example: -8\n\n\n--scoreGenomicLengthLog2scale\nextra score logarithmically scaled with genomic length of the alignment: scoreGenomicLengthLog2scale*log2(genomicLength)\ninteger, example: 0\n\n\n--scoreDelOpen\ndeletion open penalty\ninteger, example: -2\n\n\n--scoreDelBase\ndeletion extension penalty per base (in addition to scoreDelOpen)\ninteger, example: -2\n\n\n--scoreInsOpen\ninsertion open penalty\ninteger, example: -2\n\n\n--scoreInsBase\ninsertion extension penalty per base (in addition to scoreInsOpen)\ninteger, example: -2\n\n\n--scoreStitchSJshift\nmaximum score reduction while searching for SJ boundaries in the stitching step\ninteger, example: 1\n\n\n\n\n\nAlignments and Seeding\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--seedSearchStartLmax\ndefines the search start point through the read - the read is split into pieces no longer than this value\ninteger, example: 50\n\n\n--seedSearchStartLmaxOverLread\nseedSearchStartLmax normalized to read length (sum of mates’ lengths for paired-end reads)\ndouble, example: 1\n\n\n--seedSearchLmax\ndefines the maximum length of the seeds, if =0 seed length is not limited\ninteger, example: 0\n\n\n--seedMultimapNmax\nonly pieces that map fewer than this value are utilized in the stitching procedure\ninteger, example: 10000\n\n\n--seedPerReadNmax\nmax number of seeds per read\ninteger, example: 1000\n\n\n--seedPerWindowNmax\nmax number of seeds per window\ninteger, example: 50\n\n\n--seedNoneLociPerWindow\nmax number of one seed loci per window\ninteger, example: 10\n\n\n--seedSplitMin\nmin length of the seed sequences split by Ns or mate gap\ninteger, example: 12\n\n\n--seedMapMin\nmin length of seeds to be mapped\ninteger, example: 5\n\n\n--alignIntronMin\nminimum intron size, genomic gap is considered intron if its length>=alignIntronMin, otherwise it is considered Deletion\ninteger, example: 21\n\n\n--alignIntronMax\nmaximum intron size, if 0, max intron size will be determined by (2^winBinNbits)*winAnchorDistNbins\ninteger, example: 0\n\n\n--alignMatesGapMax\nmaximum gap between two mates, if 0, max intron gap will be determined by (2^winBinNbits)*winAnchorDistNbins\ninteger, example: 0\n\n\n--alignSJoverhangMin\nminimum overhang (i.e. block size) for spliced alignments\ninteger, example: 5\n\n\n--alignSJstitchMismatchNmax\nmaximum number of mismatches for stitching of the splice junctions (-1: no limit). (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif.\ninteger, example: 0, example: -1, example: 0, example: 0\n\n\n--alignSJDBoverhangMin\nminimum overhang (i.e. block size) for annotated (sjdb) spliced alignments\ninteger, example: 3\n\n\n--alignSplicedMateMapLmin\nminimum mapped length for a read mate that is spliced\ninteger, example: 0\n\n\n--alignSplicedMateMapLminOverLmate\nalignSplicedMateMapLmin normalized to mate length\ndouble, example: 0.66\n\n\n--alignWindowsPerReadNmax\nmax number of windows per read\ninteger, example: 10000\n\n\n--alignTranscriptsPerWindowNmax\nmax number of transcripts per window\ninteger, example: 100\n\n\n--alignTranscriptsPerReadNmax\nmax number of different alignments per read to consider\ninteger, example: 10000\n\n\n--alignEndsType\ntype of read ends alignment - Local … standard local alignment with soft-clipping allowed - EndToEnd … force end-to-end read alignment, do not soft-clip - Extend5pOfRead1 … fully extend only the 5p of the read1, all other ends: local alignment - Extend5pOfReads12 … fully extend only the 5p of the both read1 and read2, all other ends: local alignment\nstring, example: \"Local\"\n\n\n--alignEndsProtrude\nallow protrusion of alignment ends, i.e. start (end) of the +strand mate downstream of the start (end) of the -strand mate 1st word: int: maximum number of protrusion bases allowed 2nd word: string: - ConcordantPair … report alignments with non-zero protrusion as concordant pairs - DiscordantPair … report alignments with non-zero protrusion as discordant pairs\nstring, example: \"0    ConcordantPair\"\n\n\n--alignSoftClipAtReferenceEnds\nallow the soft-clipping of the alignments past the end of the chromosomes - Yes … allow - No … prohibit, useful for compatibility with Cufflinks\nstring, example: \"Yes\"\n\n\n--alignInsertionFlush\nhow to flush ambiguous insertion positions - None … insertions are not flushed - Right … insertions are flushed to the right\nstring\n\n\n\n\n\nPaired-End reads\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--peOverlapNbasesMin\nminimum number of overlapping bases to trigger mates merging and realignment. Specify >0 value to switch on the “merginf of overlapping mates” algorithm.\ninteger, example: 0\n\n\n--peOverlapMMp\nmaximum proportion of mismatched bases in the overlap area\ndouble, example: 0.01\n\n\n\n\n\nWindows, Anchors, Binning\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--winAnchorMultimapNmax\nmax number of loci anchors are allowed to map to\ninteger, example: 50\n\n\n--winBinNbits\n=log2(winBin), where winBin is the size of the bin for the windows/clustering, each window will occupy an integer number of bins.\ninteger, example: 16\n\n\n--winAnchorDistNbins\nmax number of bins between two anchors that allows aggregation of anchors into one window\ninteger, example: 9\n\n\n--winFlankNbins\nlog2(winFlank), where win Flank is the size of the left and right flanking regions for each window\ninteger, example: 4\n\n\n--winReadCoverageRelativeMin\nminimum relative coverage of the read sequence by the seeds in a window, for STARlong algorithm only.\ndouble, example: 0.5\n\n\n--winReadCoverageBasesMin\nminimum number of bases covered by the seeds in a window , for STARlong algorithm only.\ninteger, example: 0\n\n\n\n\n\nChimeric Alignments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--chimOutType\ntype of chimeric output - Junctions … Chimeric.out.junction - SeparateSAMold … output old SAM into separate Chimeric.out.sam file - WithinBAM … output into main aligned BAM files (Aligned.*.bam) - WithinBAM HardClip … (default) hard-clipping in the CIGAR for supplemental chimeric alignments (default if no 2nd word is present) - WithinBAM SoftClip … soft-clipping in the CIGAR for supplemental chimeric alignments\nstring, example: \"Junctions\"\n\n\n--chimSegmentMin\nminimum length of chimeric segment length, if ==0, no chimeric output\ninteger, example: 0\n\n\n--chimScoreMin\nminimum total (summed) score of the chimeric segments\ninteger, example: 0\n\n\n--chimScoreDropMax\nmax drop (difference) of chimeric score (the sum of scores of all chimeric segments) from the read length\ninteger, example: 20\n\n\n--chimScoreSeparation\nminimum difference (separation) between the best chimeric score and the next one\ninteger, example: 10\n\n\n--chimScoreJunctionNonGTAG\npenalty for a non-GT/AG chimeric junction\ninteger, example: -1\n\n\n--chimJunctionOverhangMin\nminimum overhang for a chimeric junction\ninteger, example: 20\n\n\n--chimSegmentReadGapMax\nmaximum gap in the read sequence between chimeric segments\ninteger, example: 0\n\n\n--chimFilter\ndifferent filters for chimeric alignments - None … no filtering - banGenomicN … Ns are not allowed in the genome sequence around the chimeric junction\nstring, example: \"banGenomicN\"\n\n\n--chimMainSegmentMultNmax\nmaximum number of multi-alignments for the main chimeric segment. =1 will prohibit multimapping main segments.\ninteger, example: 10\n\n\n--chimMultimapNmax\nmaximum number of chimeric multi-alignments - 0 … use the old scheme for chimeric detection which only considered unique alignments\ninteger, example: 0\n\n\n--chimMultimapScoreRange\nthe score range for multi-mapping chimeras below the best chimeric score. Only works with –chimMultimapNmax > 1\ninteger, example: 1\n\n\n--chimNonchimScoreDropMin\nto trigger chimeric detection, the drop in the best non-chimeric alignment score with respect to the read length has to be greater than this value\ninteger, example: 20\n\n\n--chimOutJunctionFormat\nformatting type for the Chimeric.out.junction file - 0 … no comment lines/headers - 1 … comment lines at the end of the file: command line and Nreads: total, unique/multi-mapping\ninteger, example: 0\n\n\n\n\n\nQuantification of Annotations\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--quantMode\ntypes of quantification requested - - … none - TranscriptomeSAM … output SAM/BAM alignments to transcriptome into a separate file - GeneCounts … count reads per gene\nstring\n\n\n--quantTranscriptomeBAMcompression\n-2 to 10 transcriptome BAM compression level - -2 … no BAM output - -1 … default compression (6?) - 0 … no compression - 10 … maximum compression\ninteger, example: 1\n\n\n--quantTranscriptomeBan\nprohibit various alignment type - IndelSoftclipSingleend … prohibit indels, soft clipping and single-end alignments - compatible with RSEM - Singleend … prohibit single-end alignments\nstring, example: \"IndelSoftclipSingleend\"\n\n\n\n\n\n2-pass Mapping\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--twopassMode\n2-pass mapping mode. - None … 1-pass mapping - Basic … basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly\nstring\n\n\n--twopass1readsN\nnumber of reads to process for the 1st step. Use very large number (or default -1) to map all reads in the first step.\ninteger, example: -1\n\n\n\n\n\nWASP parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--waspOutputMode\nWASP allele-specific output type. This is re-implementation of the original WASP mappability filtering by Bryce van de Geijn, Graham McVicker, Yoav Gilad & Jonathan K Pritchard. Please cite the original WASP paper: Nature Methods 12, 1061–1063 (2015), https://www.nature.com/articles/nmeth.3582 . - SAMtag … add WASP tags to the alignments that pass WASP filtering\nstring\n\n\n\n\n\nSTARsolo (single cell RNA-seq) parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--soloType\ntype of single-cell RNA-seq - CB_UMI_Simple … (a.k.a. Droplet) one UMI and one Cell Barcode of fixed length in read2, e.g. Drop-seq and 10X Chromium. - CB_UMI_Complex … multiple Cell Barcodes of varying length, one UMI of fixed length and one adapter sequence of fixed length are allowed in read2 only (e.g. inDrop, ddSeq). - CB_samTagOut … output Cell Barcode as CR and/or CB SAm tag. No UMI counting. –readFilesIn cDNA_read1 [cDNA_read2 if paired-end] CellBarcode_read . Requires –outSAMtype BAM Unsorted [and/or SortedByCoordinate] - SmartSeq … Smart-seq: each cell in a separate FASTQ (paired- or single-end), barcodes are corresponding read-groups, no UMI sequences, alignments deduplicated according to alignment start and end (after extending soft-clipped bases)\nstring\n\n\n--soloCBwhitelist\nfile(s) with whitelist(s) of cell barcodes. Only –soloType CB_UMI_Complex allows more than one whitelist file. - None … no whitelist: all cell barcodes are allowed\nstring\n\n\n--soloCBstart\ncell barcode start base\ninteger, example: 1\n\n\n--soloCBlen\ncell barcode length\ninteger, example: 16\n\n\n--soloUMIstart\nUMI start base\ninteger, example: 17\n\n\n--soloUMIlen\nUMI length\ninteger, example: 10\n\n\n--soloBarcodeReadLength\nlength of the barcode read - 1 … equal to sum of soloCBlen+soloUMIlen - 0 … not defined, do not check\ninteger, example: 1\n\n\n--soloBarcodeMate\nidentifies which read mate contains the barcode (CB+UMI) sequence - 0 … barcode sequence is on separate read, which should always be the last file in the –readFilesIn listed - 1 … barcode sequence is a part of mate 1 - 2 … barcode sequence is a part of mate 2\ninteger, example: 0\n\n\n--soloCBposition\nposition of Cell Barcode(s) on the barcode read. Presently only works with –soloType CB_UMI_Complex, and barcodes are assumed to be on Read2. Format for each barcode: startAnchor_startPosition_endAnchor_endPosition start(end)Anchor defines the Anchor Base for the CB: 0: read start; 1: read end; 2: adapter start; 3: adapter end start(end)Position is the 0-based position with of the CB start(end) with respect to the Anchor Base String for different barcodes are separated by space. Example: inDrop (Zilionis et al, Nat. Protocols, 2017): –soloCBposition 0_0_2_-1 3_1_3_8\nstring\n\n\n--soloUMIposition\nposition of the UMI on the barcode read, same as soloCBposition Example: inDrop (Zilionis et al, Nat. Protocols, 2017): –soloCBposition 3_9_3_14\nstring\n\n\n--soloAdapterSequence\nadapter sequence to anchor barcodes. Only one adapter sequence is allowed.\nstring\n\n\n--soloAdapterMismatchesNmax\nmaximum number of mismatches allowed in adapter sequence.\ninteger, example: 1\n\n\n--soloCBmatchWLtype\nmatching the Cell Barcodes to the WhiteList - Exact … only exact matches allowed - 1MM … only one match in whitelist with 1 mismatched base allowed. Allowed CBs have to have at least one read with exact match. - 1MM_multi … multiple matches in whitelist with 1 mismatched base allowed, posterior probability calculation is used choose one of the matches. Allowed CBs have to have at least one read with exact match. This option matches best with CellRanger 2.2.0 - 1MM_multi_pseudocounts … same as 1MM_Multi, but pseudocounts of 1 are added to all whitelist barcodes. - 1MM_multi_Nbase_pseudocounts … same as 1MM_multi_pseudocounts, multimatching to WL is allowed for CBs with N-bases. This option matches best with CellRanger >= 3.0.0 - EditDist_2 … allow up to edit distance of 3 fpr each of the barcodes. May include one deletion + one insertion. Only works with –soloType CB_UMI_Complex. Matches to multiple passlist barcdoes are not allowed. Similar to ParseBio Split-seq pipeline.\nstring, example: \"1MM_multi\"\n\n\n--soloInputSAMattrBarcodeSeq\nwhen inputting reads from a SAM file (–readsFileType SAM SE/PE), these SAM attributes mark the barcode sequence (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use –soloInputSAMattrBarcodeSeq CR UR . This parameter is required when running STARsolo with input from SAM.\nstring\n\n\n--soloInputSAMattrBarcodeQual\nwhen inputting reads from a SAM file (–readsFileType SAM SE/PE), these SAM attributes mark the barcode qualities (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use –soloInputSAMattrBarcodeQual CY UY . If this parameter is ‘-’ (default), the quality ‘H’ will be assigned to all bases.\nstring\n\n\n--soloStrand\nstrandedness of the solo libraries: - Unstranded … no strand information - Forward … read strand same as the original RNA molecule - Reverse … read strand opposite to the original RNA molecule\nstring, example: \"Forward\"\n\n\n--soloFeatures\ngenomic features for which the UMI counts per Cell Barcode are collected - Gene … genes: reads match the gene transcript - SJ … splice junctions: reported in SJ.out.tab - GeneFull … full gene (pre-mRNA): count all reads overlapping genes’ exons and introns - GeneFull_ExonOverIntron … full gene (pre-mRNA): count all reads overlapping genes’ exons and introns: prioritize 100% overlap with exons - GeneFull_Ex50pAS … full gene (pre-RNA): count all reads overlapping genes’ exons and introns: prioritize >50% overlap with exons. Do not count reads with 100% exonic overlap in the antisense direction.\nstring, example: \"Gene\"\n\n\n--soloMultiMappers\ncounting method for reads mapping to multiple genes - Unique … count only reads that map to unique genes - Uniform … uniformly distribute multi-genic UMIs to all genes - Rescue … distribute UMIs proportionally to unique+uniform counts (~ first iteration of EM) - PropUnique … distribute UMIs proportionally to unique mappers, if present, and uniformly if not. - EM … multi-gene UMIs are distributed using Expectation Maximization algorithm\nstring, example: \"Unique\"\n\n\n--soloUMIdedup\ntype of UMI deduplication (collapsing) algorithm - 1MM_All … all UMIs with 1 mismatch distance to each other are collapsed (i.e. counted once). - 1MM_Directional_UMItools … follows the “directional” method from the UMI-tools by Smith, Heger and Sudbery (Genome Research 2017). - 1MM_Directional … same as 1MM_Directional_UMItools, but with more stringent criteria for duplicate UMIs - Exact … only exactly matching UMIs are collapsed. - NoDedup … no deduplication of UMIs, count all reads. - 1MM_CR … CellRanger2-4 algorithm for 1MM UMI collapsing.\nstring, example: \"1MM_All\"\n\n\n--soloUMIfiltering\ntype of UMI filtering (for reads uniquely mapping to genes) - - … basic filtering: remove UMIs with N and homopolymers (similar to CellRanger 2.2.0). - MultiGeneUMI … basic + remove lower-count UMIs that map to more than one gene. - MultiGeneUMI_All … basic + remove all UMIs that map to more than one gene. - MultiGeneUMI_CR … basic + remove lower-count UMIs that map to more than one gene, matching CellRanger > 3.0.0 . Only works with –soloUMIdedup 1MM_CR\nstring\n\n\n--soloOutFileNames\nfile names for STARsolo output: file_name_prefix gene_names barcode_sequences cell_feature_count_matrix\nstring, example: \"Solo.out/\", example: \"features.tsv\", example: \"barcodes.tsv\", example: \"matrix.mtx\"\n\n\n--soloCellFilter\ncell filtering type and parameters - None … do not output filtered cells - TopCells … only report top cells by UMI count, followed by the exact number of cells - CellRanger2.2 … simple filtering of CellRanger 2.2. Can be followed by numbers: number of expected cells, robust maximum percentile for UMI count, maximum to minimum ratio for UMI count The harcoded values are from CellRanger: nExpectedCells=3000; maxPercentile=0.99; maxMinRatio=10 - EmptyDrops_CR … EmptyDrops filtering in CellRanger flavor. Please cite the original EmptyDrops paper: A.T.L Lun et al, Genome Biology, 20, 63 (2019): https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1662-y Can be followed by 10 numeric parameters: nExpectedCells maxPercentile maxMinRatio indMin indMax umiMin umiMinFracMedian candMaxN FDR simN The harcoded values are from CellRanger: 3000 0.99 10 45000 90000 500 0.01 20000 0.01 10000\nstring, example: \"CellRanger2.2\", example: \"3000\", example: \"0.99\", example: \"10\"\n\n\n--soloOutFormatFeaturesGeneField3\nfield 3 in the Gene features.tsv file. If “-”, then no 3rd field is output.\nstring, example: \"Gene Expression\"\n\n\n--soloCellReadStats\nOutput reads statistics for each CB - Standard … standard output\nstring"
  },
  {
    "objectID": "modules/mapping/star_align.html#authors",
    "href": "modules/mapping/star_align.html#authors",
    "title": "Star align",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/mapping/bd_rhapsody.html",
    "href": "modules/mapping/bd_rhapsody.html",
    "title": "BD Rhapsody",
    "section": "",
    "text": "ID: bd_rhapsody\nNamespace: mapping\n\n\n\nSource\nA wrapper for the BD Rhapsody Analysis CWL v1.10.1 pipeline.\nThe CWL pipeline file is obtained by cloning ‘https://bitbucket.org/CRSwDev/cwl/src/master/’ and removing all objects with class ‘DockerRequirement’ from the YML.\nThis pipeline can be used for a targeted analysis (with --mode targeted) or for a whole transcriptome analysis (with --mode wta).\nThe reference_genome and transcriptome_annotation files can be generated with the make_reference pipeline. Alternatively, BD also provides standard references which can be downloaded from these locations:"
  },
  {
    "objectID": "modules/mapping/bd_rhapsody.html#example-commands",
    "href": "modules/mapping/bd_rhapsody.html#example-commands",
    "title": "BD Rhapsody",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/bd_rhapsody/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/bd_rhapsody/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/bd_rhapsody.html#argument-groups",
    "href": "modules/mapping/bd_rhapsody.html#argument-groups",
    "title": "BD Rhapsody",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--mode\nWhether to run a whole transcriptome analysis (WTA) or a targeted analysis.\nstring, required, example: \"wta\"\n\n\n--input\nPath to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want.\nfile, required, example: \"input.fastq.gz\"\n\n\n--reference\nRefence to map to. For --mode wta, this is the path to STAR index as a tar.gz file. For --mode targeted, this is the path to mRNA reference file for pre-designed, supplemental, or custom panel, in FASTA format\nfile, required, example: \"reference_genome.tar.gz&#124;reference.fasta\"\n\n\n--transcriptome_annotation\nPath to GTF annotation file (only for --mode wta).\nfile, example: \"transcriptome.gtf\"\n\n\n--abseq_reference\nPath to the AbSeq reference file in FASTA format. Only needed if BD AbSeq Ab-Oligos are used.\nfile, example: \"abseq_reference.fasta\"\n\n\n--supplemental_reference\nPath to the supplemental reference file in FASTA format. Only needed if there are additional transgene sequences used in the experiment (only for --mode wta).\nfile, example: \"supplemental_reference.fasta\"\n\n\n--sample_prefix\nSpecify a run name to use as the output file base name. Use only letters, numbers, or hyphens. Do not use special characters or spaces.\nstring, default: \"sample\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput folder. Output still needs to be processed further.\nfile, required, example: \"output_dir\"\n\n\n\n\n\nPutative cell calling settings\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--putative_cell_call\nSpecify the dataset to be used for putative cell calling. For putative cell calling using an AbSeq dataset, please provide an AbSeq_Reference fasta file above.\nstring, example: \"mRNA\"\n\n\n--exact_cell_count\nExact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count\ninteger, example: 10000\n\n\n--disable_putative_calling\nDisable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve). The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types. Does not apply if Exact Cell Count is set.\nboolean_true\n\n\n\n\n\nSubsample arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--subsample\nA number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample.\ndouble, example: 0.01\n\n\n--subsample_seed\nA seed for replicating a previous subsampled run.\ninteger, example: 3445\n\n\n\n\n\nMultiplex arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sample_tags_version\nSpecify if multiplexed run.\nstring, example: \"human\"\n\n\n--tag_names\nTag_Names (optional) - Specify the tag number followed by ‘-’ and the desired sample name to appear in Sample_Tag_Metrics.csv. Do not use the special characters: &, (), [], {}, <>, ?, |\nstring, example: \"4-mySample\", example: \"9-myOtherSample\", example: \"6-alsoThisSample\"\n\n\n\n\n\nVDJ arguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--vdj_version\nSpecify if VDJ run.\nstring, example: \"human\"\n\n\n\n\n\nCWL-runner arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--parallel\nRun jobs in parallel.\nboolean, default: TRUE\n\n\n--timestamps\nAdd timestamps to the errors, warnings, and notifications.\nboolean_true\n\n\n--dryrun\nIf true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.\nboolean_true"
  },
  {
    "objectID": "modules/mapping/bd_rhapsody.html#authors",
    "href": "modules/mapping/bd_rhapsody.html#authors",
    "title": "BD Rhapsody",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/mapping/star_align_v273a.html",
    "href": "modules/mapping/star_align_v273a.html",
    "title": "Star align v273a",
    "section": "",
    "text": "ID: star_align_v273a\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/mapping/star_align_v273a.html#example-commands",
    "href": "modules/mapping/star_align_v273a.html#example-commands",
    "title": "Star align v273a",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/star_align_v273a/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/star_align_v273a/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/star_align_v273a.html#argument-groups",
    "href": "modules/mapping/star_align_v273a.html#argument-groups",
    "title": "Star align v273a",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput/Output\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe FASTQ files to be analyzed. Corresponds to the –readFilesIn in the STAR command.\nfile, required, example: \"mysample_S1_L001_R1_001.fastq.gz\", example: \"mysample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nPath to the reference built by star_build_reference. Corresponds to the –genomeDir in the STAR command.\nfile, required, example: \"/path/to/reference\"\n\n\n--output\nPath to output directory. Corresponds to the –outFileNamePrefix in the STAR command.\nfile, required, example: \"/path/to/foo\"\n\n\n\n\n\nRun Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--runRNGseed\nrandom number generator seed.\ninteger, example: 777\n\n\n\n\n\nGenome Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genomeLoad\nmode of shared memory usage for the genome files. Only used with –runMode alignReads. - LoadAndKeep … load genome into shared and keep it in memory after run - LoadAndRemove … load genome into shared but remove it after run - LoadAndExit … load genome into shared memory and exit, keeping the genome in memory for future runs - Remove … do not map anything, just remove loaded genome from memory - NoSharedMemory … do not use shared memory, each job will have its own private copy of the genome\nstring, example: \"NoSharedMemory\"\n\n\n--genomeFastaFiles\npath(s) to the fasta files with the genome sequences, separated by spaces. These files should be plain text FASTA files, they cannot be zipped. Required for the genome generation (–runMode genomeGenerate). Can also be used in the mapping (–runMode alignReads) to add extra (new) sequences to the genome (e.g. spike-ins).\nfile\n\n\n--genomeFileSizes\ngenome files exact sizes in bytes. Typically, this should not be defined by the user.\ninteger, example: 0\n\n\n--genomeTransformOutput\nwhich output to transform back to original genome - SAM … SAM/BAM alignments - SJ … splice junctions (SJ.out.tab) - None … no transformation of the output\nstring\n\n\n--genomeChrSetMitochondrial\nnames of the mitochondrial chromosomes. Presently only used for STARsolo statistics output/\nstring, example: \"chrM\", example: \"M\", example: \"MT\"\n\n\n\n\n\nSplice Junctions Database\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sjdbFileChrStartEnd\npath to the files with genomic coordinates (chr  start  end  strand) for the splice junction introns. Multiple files can be supplied and will be concatenated.\nstring\n\n\n--sjdbGTFfile\npath to the GTF file with annotations\nfile\n\n\n--sjdbGTFchrPrefix\nprefix for chromosome names in a GTF file (e.g. ‘chr’ for using ENSMEBL annotations with UCSC genomes)\nstring\n\n\n--sjdbGTFfeatureExon\nfeature type in GTF file to be used as exons for building transcripts\nstring, example: \"exon\"\n\n\n--sjdbGTFtagExonParentTranscript\nGTF attribute name for parent transcript ID (default “transcript_id” works for GTF files)\nstring, example: \"transcript_id\"\n\n\n--sjdbGTFtagExonParentGene\nGTF attribute name for parent gene ID (default “gene_id” works for GTF files)\nstring, example: \"gene_id\"\n\n\n--sjdbGTFtagExonParentGeneName\nGTF attribute name for parent gene name\nstring, example: \"gene_name\"\n\n\n--sjdbGTFtagExonParentGeneType\nGTF attribute name for parent gene type\nstring, example: \"gene_type\", example: \"gene_biotype\"\n\n\n--sjdbOverhang\nlength of the donor/acceptor sequence on each side of the junctions, ideally = (mate_length - 1)\ninteger, example: 100\n\n\n--sjdbScore\nextra alignment score for alignments that cross database junctions\ninteger, example: 2\n\n\n--sjdbInsertSave\nwhich files to save when sjdb junctions are inserted on the fly at the mapping step - Basic … only small junction / transcript files - All … all files including big Genome, SA and SAindex - this will create a complete genome directory\nstring, example: \"Basic\"\n\n\n\n\n\nVariation parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--varVCFfile\npath to the VCF file that contains variation data. The 10th column should contain the genotype information, e.g. 0/1\nstring\n\n\n\n\n\nRead Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--readFilesType\nformat of input read files - Fastx … FASTA or FASTQ - SAM SE … SAM or BAM single-end reads; for BAM use –readFilesCommand samtools view - SAM PE … SAM or BAM paired-end reads; for BAM use –readFilesCommand samtools view\nstring, example: \"Fastx\"\n\n\n--readFilesSAMattrKeep\nfor –readFilesType SAM SE/PE, which SAM tags to keep in the output BAM, e.g.: –readFilesSAMtagsKeep RG PL - All … keep all tags - None … do not keep any tags\nstring, example: \"All\"\n\n\n--readFilesManifest\npath to the “manifest” file with the names of read files. The manifest file should contain 3 tab-separated columns: paired-end reads: read1_file_name \\(tab\\) read2_file_name \\(tab\\) read_group_line. single-end reads: read1_file_name \\(tab\\) - \\(tab\\) read_group_line. Spaces, but not tabs are allowed in file names. If read_group_line does not start with ID:, it can only contain one ID field, and ID: will be added to it. If read_group_line starts with ID:, it can contain several fields separated by \\(tab\\), and all fields will be be copied verbatim into SAM @RG header line.\nfile\n\n\n--readFilesPrefix\nprefix for the read files names, i.e. it will be added in front of the strings in –readFilesIn\nstring\n\n\n--readFilesCommand\ncommand line to execute for each of the input file. This command should generate FASTA or FASTQ text and send it to stdout For example: zcat - to uncompress .gz files, bzcat - to uncompress .bz2 files, etc.\nstring\n\n\n--readMapNumber\nnumber of reads to map from the beginning of the file -1: map all reads\ninteger, example: -1\n\n\n--readMatesLengthsIn\nEqual/NotEqual - lengths of names,sequences,qualities for both mates are the same / not the same. NotEqual is safe in all situations.\nstring, example: \"NotEqual\"\n\n\n--readNameSeparator\ncharacter(s) separating the part of the read names that will be trimmed in output (read name after space is always trimmed)\nstring, example: \"/\"\n\n\n--readQualityScoreBase\nnumber to be subtracted from the ASCII code to get Phred quality score\ninteger, example: 33\n\n\n\n\n\nRead Clipping\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--clipAdapterType\nadapter clipping type - Hamming … adapter clipping based on Hamming distance, with the number of mismatches controlled by –clip5pAdapterMMp - CellRanger4 … 5p and 3p adapter clipping similar to CellRanger4. Utilizes Opal package by Martin Šošić: https://github.com/Martinsos/opal - None … no adapter clipping, all other clip* parameters are disregarded\nstring, example: \"Hamming\"\n\n\n--clip3pNbases\nnumber(s) of bases to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n--clip3pAdapterSeq\nadapter sequences to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates. - polyA … polyA sequence with the length equal to read length\nstring\n\n\n--clip3pAdapterMMp\nmax proportion of mismatches for 3p adapter clipping for each mate. If one value is given, it will be assumed the same for both mates.\ndouble, example: 0.1\n\n\n--clip3pAfterAdapterNbases\nnumber of bases to clip from 3p of each mate after the adapter clipping. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n--clip5pNbases\nnumber(s) of bases to clip from 5p of each mate. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n\n\n\nLimits\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--limitGenomeGenerateRAM\nmaximum available RAM (bytes) for genome generation\nlong, example: NA\n\n\n--limitIObufferSize\nmax available buffers size (bytes) for input/output, per thread\nlong, example: 30000000, example: 50000000\n\n\n--limitOutSAMoneReadBytes\nmax size of the SAM record (bytes) for one read. Recommended value: >(2(LengthMate1+LengthMate2+100)outFilterMultimapNmax\nlong, example: 100000\n\n\n--limitOutSJoneRead\nmax number of junctions for one read (including all multi-mappers)\ninteger, example: 1000\n\n\n--limitOutSJcollapsed\nmax number of collapsed junctions\ninteger, example: 1000000\n\n\n--limitBAMsortRAM\nmaximum available RAM (bytes) for sorting BAM. If =0, it will be set to the genome index size. 0 value can only be used with –genomeLoad NoSharedMemory option.\nlong, example: 0\n\n\n--limitSjdbInsertNsj\nmaximum number of junctions to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run\ninteger, example: 1000000\n\n\n--limitNreadsSoft\nsoft limit on the number of reads\ninteger, example: -1\n\n\n\n\n\nOutput: general\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outTmpKeep\nwhether to keep the temporary files after STAR runs is finished - None … remove all temporary files - All … keep all files\nstring\n\n\n--outStd\nwhich output will be directed to stdout (standard out) - Log … log messages - SAM … alignments in SAM format (which normally are output to Aligned.out.sam file), normal standard output will go into Log.std.out - BAM_Unsorted … alignments in BAM format, unsorted. Requires –outSAMtype BAM Unsorted - BAM_SortedByCoordinate … alignments in BAM format, sorted by coordinate. Requires –outSAMtype BAM SortedByCoordinate - BAM_Quant … alignments to transcriptome in BAM format, unsorted. Requires –quantMode TranscriptomeSAM\nstring, example: \"Log\"\n\n\n--outReadsUnmapped\noutput of unmapped and partially mapped (i.e. mapped only one mate of a paired end read) reads in separate file(s). - None … no output - Fastx … output in separate fasta/fastq files, Unmapped.out.mate1/2\nstring\n\n\n--outQSconversionAdd\nadd this number to the quality score (e.g. to convert from Illumina to Sanger, use -31)\ninteger, example: 0\n\n\n--outMultimapperOrder\norder of multimapping alignments in the output files - Old_2.4 … quasi-random order used before 2.5.0 - Random … random order of alignments for each multi-mapper. Read mates (pairs) are always adjacent, all alignment for each read stay together. This option will become default in the future releases.\nstring, example: \"Old_2.4\"\n\n\n\n\n\nOutput: SAM and BAM\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSAMtype\ntype of SAM/BAM output 1st word: - BAM … output BAM without sorting - SAM … output SAM without sorting - None … no SAM/BAM output 2nd, 3rd: - Unsorted … standard unsorted - SortedByCoordinate … sorted by coordinate. This option will allocate extra memory for sorting which can be specified by –limitBAMsortRAM.\nstring, example: \"SAM\"\n\n\n--outSAMmode\nmode of SAM output - None … no SAM output - Full … full SAM output - NoQS … full SAM but without quality scores\nstring, example: \"Full\"\n\n\n--outSAMstrandField\nCufflinks-like strand field flag - None … not used - intronMotif … strand derived from the intron motif. This option changes the output alignments: reads with inconsistent and/or non-canonical introns are filtered out.\nstring\n\n\n--outSAMattributes\na string of desired SAM attributes, in the order desired for the output SAM. Tags can be listed in any combination/order. Presets: - None … no attributes - Standard … NH HI AS nM - All … NH HI AS nM NM MD jM jI MC ch Alignment: - NH … number of loci the reads maps to: =1 for unique mappers, >1 for multimappers. Standard SAM tag. - HI … multiple alignment index, starts with –outSAMattrIHstart (=1 by default). Standard SAM tag. - AS … local alignment score, +1/-1 for matches/mismateches, score* penalties for indels and gaps. For PE reads, total score for two mates. Stadnard SAM tag. - nM … number of mismatches. For PE reads, sum over two mates. - NM … edit distance to the reference (number of mismatched + inserted + deleted bases) for each mate. Standard SAM tag. - MD … string encoding mismatched and deleted reference bases (see standard SAM specifications). Standard SAM tag. - jM … intron motifs for all junctions (i.e. N in CIGAR): 0: non-canonical; 1: GT/AG, 2: CT/AC, 3: GC/AG, 4: CT/GC, 5: AT/AC, 6: GT/AT. If splice junctions database is used, and a junction is annotated, 20 is added to its motif value. - jI … start and end of introns for all junctions (1-based). - XS … alignment strand according to –outSAMstrandField. - MC … mate’s CIGAR string. Standard SAM tag. - ch … marks all segment of all chimeric alingments for –chimOutType WithinBAM output. - cN … number of bases clipped from the read ends: 5’ and 3’ Variation: - vA … variant allele - vG … genomic coordinate of the variant overlapped by the read. - vW … 1 - alignment passes WASP filtering; 2,3,4,5,6,7 - alignment does not pass WASP filtering. Requires –waspOutputMode SAMtag. STARsolo: - CR CY UR UY … sequences and quality scores of cell barcodes and UMIs for the solo* demultiplexing. - GX GN … gene ID and gene name for unique-gene reads. - gx gn … gene IDs and gene names for unique- and multi-gene reads. - CB UB … error-corrected cell barcodes and UMIs for solo* demultiplexing. Requires –outSAMtype BAM SortedByCoordinate. - sM … assessment of CB and UMI. - sS … sequence of the entire barcode (CB,UMI,adapter). - sQ … quality of the entire barcode. ***Unsupported/undocumented: - ha … haplotype (1/2) when mapping to the diploid genome. Requires genome generated with –genomeTransformType Diploid . - rB … alignment block read/genomic coordinates. - vR … read coordinate of the variant.\nstring, example: \"Standard\"\n\n\n--outSAMattrIHstart\nstart value for the IH attribute. 0 may be required by some downstream software, such as Cufflinks or StringTie.\ninteger, example: 1\n\n\n--outSAMunmapped\noutput of unmapped reads in the SAM format 1st word: - None … no output - Within … output unmapped reads within the main SAM file (i.e. Aligned.out.sam) 2nd word: - KeepPairs … record unmapped mate for each alignment, and, in case of unsorted output, keep it adjacent to its mapped mate. Only affects multi-mapping reads.\nstring\n\n\n--outSAMorder\ntype of sorting for the SAM output Paired: one mate after the other for all paired alignments PairedKeepInputOrder: one mate after the other for all paired alignments, the order is kept the same as in the input FASTQ files\nstring, example: \"Paired\"\n\n\n--outSAMprimaryFlag\nwhich alignments are considered primary - all others will be marked with 0x100 bit in the FLAG - OneBestScore … only one alignment with the best score is primary - AllBestScore … all alignments with the best score are primary\nstring, example: \"OneBestScore\"\n\n\n--outSAMreadID\nread ID record type - Standard … first word (until space) from the FASTx read ID line, removing /1,/2 from the end - Number … read number (index) in the FASTx file\nstring, example: \"Standard\"\n\n\n--outSAMmapqUnique\n0 to 255: the MAPQ value for unique mappers\ninteger, example: 255\n\n\n--outSAMflagOR\n0 to 65535: sam FLAG will be bitwise OR’d with this value, i.e. FLAG=FLAG | outSAMflagOR. This is applied after all flags have been set by STAR, and after outSAMflagAND. Can be used to set specific bits that are not set otherwise.\ninteger, example: 0\n\n\n--outSAMflagAND\n0 to 65535: sam FLAG will be bitwise AND’d with this value, i.e. FLAG=FLAG & outSAMflagOR. This is applied after all flags have been set by STAR, but before outSAMflagOR. Can be used to unset specific bits that are not set otherwise.\ninteger, example: 65535\n\n\n--outSAMattrRGline\nSAM/BAM read group line. The first word contains the read group identifier and must start with “ID:”, e.g. –outSAMattrRGline ID:xxx CN:yy “DS:z z z”. xxx will be added as RG tag to each output alignment. Any spaces in the tag values have to be double quoted. Comma separated RG lines correspons to different (comma separated) input files in –readFilesIn. Commas have to be surrounded by spaces, e.g. –outSAMattrRGline ID:xxx , ID:zzz “DS:z z” , ID:yyy DS:yyyy\nstring\n\n\n--outSAMheaderHD\n@HD (header) line of the SAM header\nstring\n\n\n--outSAMheaderPG\nextra @PG (software) line of the SAM header (in addition to STAR)\nstring\n\n\n--outSAMheaderCommentFile\npath to the file with @CO (comment) lines of the SAM header\nstring\n\n\n--outSAMfilter\nfilter the output into main SAM/BAM files - KeepOnlyAddedReferences … only keep the reads for which all alignments are to the extra reference sequences added with –genomeFastaFiles at the mapping stage. - KeepAllAddedReferences … keep all alignments to the extra reference sequences added with –genomeFastaFiles at the mapping stage.\nstring\n\n\n--outSAMmultNmax\nmax number of multiple alignments for a read that will be output to the SAM/BAM files. Note that if this value is not equal to -1, the top scoring alignment will be output first - -1 … all alignments (up to –outFilterMultimapNmax) will be output\ninteger, example: -1\n\n\n--outSAMtlen\ncalculation method for the TLEN field in the SAM/BAM files - 1 … leftmost base of the (+)strand mate to rightmost base of the (-)mate. (+)sign for the (+)strand mate - 2 … leftmost base of any mate to rightmost base of any mate. (+)sign for the mate with the leftmost base. This is different from 1 for overlapping mates with protruding ends\ninteger, example: 1\n\n\n--outBAMcompression\n-1 to 10 BAM compression level, -1=default compression (6?), 0=no compression, 10=maximum compression\ninteger, example: 1\n\n\n--outBAMsortingThreadN\n>=0: number of threads for BAM sorting. 0 will default to min(6,–runThreadN).\ninteger, example: 0\n\n\n--outBAMsortingBinsN\n>0: number of genome bins for coordinate-sorting\ninteger, example: 50\n\n\n\n\n\nBAM processing\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--bamRemoveDuplicatesType\nmark duplicates in the BAM file, for now only works with (i) sorted BAM fed with inputBAMfile, and (ii) for paired-end alignments only - - … no duplicate removal/marking - UniqueIdentical … mark all multimappers, and duplicate unique mappers. The coordinates, FLAG, CIGAR must be identical - UniqueIdenticalNotMulti … mark duplicate unique mappers but not multimappers.\nstring\n\n\n--bamRemoveDuplicatesMate2basesN\nnumber of bases from the 5’ of mate 2 to use in collapsing (e.g. for RAMPAGE)\ninteger, example: 0\n\n\n\n\n\nOutput Wiggle\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outWigType\ntype of signal output, e.g. “bedGraph” OR “bedGraph read1_5p”. Requires sorted BAM: –outSAMtype BAM SortedByCoordinate . 1st word: - None … no signal output - bedGraph … bedGraph format - wiggle … wiggle format 2nd word: - read1_5p … signal from only 5’ of the 1st read, useful for CAGE/RAMPAGE etc - read2 … signal from only 2nd read\nstring\n\n\n--outWigStrand\nstrandedness of wiggle/bedGraph output - Stranded … separate strands, str1 and str2 - Unstranded … collapsed strands\nstring, example: \"Stranded\"\n\n\n--outWigReferencesPrefix\nprefix matching reference names to include in the output wiggle file, e.g. “chr”, default “-” - include all references\nstring\n\n\n--outWigNorm\ntype of normalization for the signal - RPM … reads per million of mapped reads - None … no normalization, “raw” counts\nstring, example: \"RPM\"\n\n\n\n\n\nOutput Filtering\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outFilterType\ntype of filtering - Normal … standard filtering using only current alignment - BySJout … keep only those reads that contain junctions that passed filtering into SJ.out.tab\nstring, example: \"Normal\"\n\n\n--outFilterMultimapScoreRange\nthe score range below the maximum score for multimapping alignments\ninteger, example: 1\n\n\n--outFilterMultimapNmax\nmaximum number of loci the read is allowed to map to. Alignments (all of them) will be output only if the read maps to no more loci than this value. Otherwise no alignments will be output, and the read will be counted as “mapped to too many loci” in the Log.final.out .\ninteger, example: 10\n\n\n--outFilterMismatchNmax\nalignment will be output only if it has no more mismatches than this value.\ninteger, example: 10\n\n\n--outFilterMismatchNoverLmax\nalignment will be output only if its ratio of mismatches to mapped length is less than or equal to this value.\ndouble, example: 0.3\n\n\n--outFilterMismatchNoverReadLmax\nalignment will be output only if its ratio of mismatches to read length is less than or equal to this value.\ndouble, example: 1\n\n\n--outFilterScoreMin\nalignment will be output only if its score is higher than or equal to this value.\ninteger, example: 0\n\n\n--outFilterScoreMinOverLread\nsame as outFilterScoreMin, but normalized to read length (sum of mates’ lengths for paired-end reads)\ndouble, example: 0.66\n\n\n--outFilterMatchNmin\nalignment will be output only if the number of matched bases is higher than or equal to this value.\ninteger, example: 0\n\n\n--outFilterMatchNminOverLread\nsam as outFilterMatchNmin, but normalized to the read length (sum of mates’ lengths for paired-end reads).\ndouble, example: 0.66\n\n\n--outFilterIntronMotifs\nfilter alignment using their motifs - None … no filtering - RemoveNoncanonical … filter out alignments that contain non-canonical junctions - RemoveNoncanonicalUnannotated … filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.\nstring\n\n\n--outFilterIntronStrands\nfilter alignments - RemoveInconsistentStrands … remove alignments that have junctions with inconsistent strands - None … no filtering\nstring, example: \"RemoveInconsistentStrands\"\n\n\n\n\n\nOutput splice junctions (SJ.out.tab)\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSJtype\ntype of splice junction output - Standard … standard SJ.out.tab output - None … no splice junction output\nstring, example: \"Standard\"\n\n\n\n\n\nOutput Filtering: Splice Junctions\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSJfilterReads\nwhich reads to consider for collapsed splice junctions output - All … all reads, unique- and multi-mappers - Unique … uniquely mapping reads only\nstring, example: \"All\"\n\n\n--outSJfilterOverhangMin\nminimum overhang length for splice junctions on both sides for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif does not apply to annotated junctions\ninteger, example: 30, example: 12, example: 12, example: 12\n\n\n--outSJfilterCountUniqueMin\nminimum uniquely mapping read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions\ninteger, example: 3, example: 1, example: 1, example: 1\n\n\n--outSJfilterCountTotalMin\nminimum total (multi-mapping+unique) read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions\ninteger, example: 3, example: 1, example: 1, example: 1\n\n\n--outSJfilterDistToOtherSJmin\nminimum allowed distance to other junctions’ donor/acceptor does not apply to annotated junctions\ninteger, example: 10, example: 0, example: 5, example: 10\n\n\n--outSJfilterIntronMaxVsReadN\nmaximum gap allowed for junctions supported by 1,2,3,,,N reads i.e. by default junctions supported by 1 read can have gaps <=50000b, by 2 reads: <=100000b, by 3 reads: <=200000. by >=4 reads any gap <=alignIntronMax does not apply to annotated junctions\ninteger, example: 50000, example: 100000, example: 200000\n\n\n\n\n\nScoring\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--scoreGap\nsplice junction penalty (independent on intron motif)\ninteger, example: 0\n\n\n--scoreGapNoncan\nnon-canonical junction penalty (in addition to scoreGap)\ninteger, example: -8\n\n\n--scoreGapGCAG\nGC/AG and CT/GC junction penalty (in addition to scoreGap)\ninteger, example: -4\n\n\n--scoreGapATAC\nAT/AC and GT/AT junction penalty (in addition to scoreGap)\ninteger, example: -8\n\n\n--scoreGenomicLengthLog2scale\nextra score logarithmically scaled with genomic length of the alignment: scoreGenomicLengthLog2scale*log2(genomicLength)\ninteger, example: 0\n\n\n--scoreDelOpen\ndeletion open penalty\ninteger, example: -2\n\n\n--scoreDelBase\ndeletion extension penalty per base (in addition to scoreDelOpen)\ninteger, example: -2\n\n\n--scoreInsOpen\ninsertion open penalty\ninteger, example: -2\n\n\n--scoreInsBase\ninsertion extension penalty per base (in addition to scoreInsOpen)\ninteger, example: -2\n\n\n--scoreStitchSJshift\nmaximum score reduction while searching for SJ boundaries in the stitching step\ninteger, example: 1\n\n\n\n\n\nAlignments and Seeding\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--seedSearchStartLmax\ndefines the search start point through the read - the read is split into pieces no longer than this value\ninteger, example: 50\n\n\n--seedSearchStartLmaxOverLread\nseedSearchStartLmax normalized to read length (sum of mates’ lengths for paired-end reads)\ndouble, example: 1\n\n\n--seedSearchLmax\ndefines the maximum length of the seeds, if =0 seed length is not limited\ninteger, example: 0\n\n\n--seedMultimapNmax\nonly pieces that map fewer than this value are utilized in the stitching procedure\ninteger, example: 10000\n\n\n--seedPerReadNmax\nmax number of seeds per read\ninteger, example: 1000\n\n\n--seedPerWindowNmax\nmax number of seeds per window\ninteger, example: 50\n\n\n--seedNoneLociPerWindow\nmax number of one seed loci per window\ninteger, example: 10\n\n\n--seedSplitMin\nmin length of the seed sequences split by Ns or mate gap\ninteger, example: 12\n\n\n--seedMapMin\nmin length of seeds to be mapped\ninteger, example: 5\n\n\n--alignIntronMin\nminimum intron size, genomic gap is considered intron if its length>=alignIntronMin, otherwise it is considered Deletion\ninteger, example: 21\n\n\n--alignIntronMax\nmaximum intron size, if 0, max intron size will be determined by (2^winBinNbits)*winAnchorDistNbins\ninteger, example: 0\n\n\n--alignMatesGapMax\nmaximum gap between two mates, if 0, max intron gap will be determined by (2^winBinNbits)*winAnchorDistNbins\ninteger, example: 0\n\n\n--alignSJoverhangMin\nminimum overhang (i.e. block size) for spliced alignments\ninteger, example: 5\n\n\n--alignSJstitchMismatchNmax\nmaximum number of mismatches for stitching of the splice junctions (-1: no limit). (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif.\ninteger, example: 0, example: -1, example: 0, example: 0\n\n\n--alignSJDBoverhangMin\nminimum overhang (i.e. block size) for annotated (sjdb) spliced alignments\ninteger, example: 3\n\n\n--alignSplicedMateMapLmin\nminimum mapped length for a read mate that is spliced\ninteger, example: 0\n\n\n--alignSplicedMateMapLminOverLmate\nalignSplicedMateMapLmin normalized to mate length\ndouble, example: 0.66\n\n\n--alignWindowsPerReadNmax\nmax number of windows per read\ninteger, example: 10000\n\n\n--alignTranscriptsPerWindowNmax\nmax number of transcripts per window\ninteger, example: 100\n\n\n--alignTranscriptsPerReadNmax\nmax number of different alignments per read to consider\ninteger, example: 10000\n\n\n--alignEndsType\ntype of read ends alignment - Local … standard local alignment with soft-clipping allowed - EndToEnd … force end-to-end read alignment, do not soft-clip - Extend5pOfRead1 … fully extend only the 5p of the read1, all other ends: local alignment - Extend5pOfReads12 … fully extend only the 5p of the both read1 and read2, all other ends: local alignment\nstring, example: \"Local\"\n\n\n--alignEndsProtrude\nallow protrusion of alignment ends, i.e. start (end) of the +strand mate downstream of the start (end) of the -strand mate 1st word: int: maximum number of protrusion bases allowed 2nd word: string: - ConcordantPair … report alignments with non-zero protrusion as concordant pairs - DiscordantPair … report alignments with non-zero protrusion as discordant pairs\nstring, example: \"0    ConcordantPair\"\n\n\n--alignSoftClipAtReferenceEnds\nallow the soft-clipping of the alignments past the end of the chromosomes - Yes … allow - No … prohibit, useful for compatibility with Cufflinks\nstring, example: \"Yes\"\n\n\n--alignInsertionFlush\nhow to flush ambiguous insertion positions - None … insertions are not flushed - Right … insertions are flushed to the right\nstring\n\n\n\n\n\nPaired-End reads\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--peOverlapNbasesMin\nminimum number of overlapping bases to trigger mates merging and realignment. Specify >0 value to switch on the “merginf of overlapping mates” algorithm.\ninteger, example: 0\n\n\n--peOverlapMMp\nmaximum proportion of mismatched bases in the overlap area\ndouble, example: 0.01\n\n\n\n\n\nWindows, Anchors, Binning\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--winAnchorMultimapNmax\nmax number of loci anchors are allowed to map to\ninteger, example: 50\n\n\n--winBinNbits\n=log2(winBin), where winBin is the size of the bin for the windows/clustering, each window will occupy an integer number of bins.\ninteger, example: 16\n\n\n--winAnchorDistNbins\nmax number of bins between two anchors that allows aggregation of anchors into one window\ninteger, example: 9\n\n\n--winFlankNbins\nlog2(winFlank), where win Flank is the size of the left and right flanking regions for each window\ninteger, example: 4\n\n\n--winReadCoverageRelativeMin\nminimum relative coverage of the read sequence by the seeds in a window, for STARlong algorithm only.\ndouble, example: 0.5\n\n\n--winReadCoverageBasesMin\nminimum number of bases covered by the seeds in a window , for STARlong algorithm only.\ninteger, example: 0\n\n\n\n\n\nChimeric Alignments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--chimOutType\ntype of chimeric output - Junctions … Chimeric.out.junction - SeparateSAMold … output old SAM into separate Chimeric.out.sam file - WithinBAM … output into main aligned BAM files (Aligned.*.bam) - WithinBAM HardClip … (default) hard-clipping in the CIGAR for supplemental chimeric alignments (default if no 2nd word is present) - WithinBAM SoftClip … soft-clipping in the CIGAR for supplemental chimeric alignments\nstring, example: \"Junctions\"\n\n\n--chimSegmentMin\nminimum length of chimeric segment length, if ==0, no chimeric output\ninteger, example: 0\n\n\n--chimScoreMin\nminimum total (summed) score of the chimeric segments\ninteger, example: 0\n\n\n--chimScoreDropMax\nmax drop (difference) of chimeric score (the sum of scores of all chimeric segments) from the read length\ninteger, example: 20\n\n\n--chimScoreSeparation\nminimum difference (separation) between the best chimeric score and the next one\ninteger, example: 10\n\n\n--chimScoreJunctionNonGTAG\npenalty for a non-GT/AG chimeric junction\ninteger, example: -1\n\n\n--chimJunctionOverhangMin\nminimum overhang for a chimeric junction\ninteger, example: 20\n\n\n--chimSegmentReadGapMax\nmaximum gap in the read sequence between chimeric segments\ninteger, example: 0\n\n\n--chimFilter\ndifferent filters for chimeric alignments - None … no filtering - banGenomicN … Ns are not allowed in the genome sequence around the chimeric junction\nstring, example: \"banGenomicN\"\n\n\n--chimMainSegmentMultNmax\nmaximum number of multi-alignments for the main chimeric segment. =1 will prohibit multimapping main segments.\ninteger, example: 10\n\n\n--chimMultimapNmax\nmaximum number of chimeric multi-alignments - 0 … use the old scheme for chimeric detection which only considered unique alignments\ninteger, example: 0\n\n\n--chimMultimapScoreRange\nthe score range for multi-mapping chimeras below the best chimeric score. Only works with –chimMultimapNmax > 1\ninteger, example: 1\n\n\n--chimNonchimScoreDropMin\nto trigger chimeric detection, the drop in the best non-chimeric alignment score with respect to the read length has to be greater than this value\ninteger, example: 20\n\n\n--chimOutJunctionFormat\nformatting type for the Chimeric.out.junction file - 0 … no comment lines/headers - 1 … comment lines at the end of the file: command line and Nreads: total, unique/multi-mapping\ninteger, example: 0\n\n\n\n\n\nQuantification of Annotations\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--quantMode\ntypes of quantification requested - - … none - TranscriptomeSAM … output SAM/BAM alignments to transcriptome into a separate file - GeneCounts … count reads per gene\nstring\n\n\n--quantTranscriptomeBAMcompression\n-2 to 10 transcriptome BAM compression level - -2 … no BAM output - -1 … default compression (6?) - 0 … no compression - 10 … maximum compression\ninteger, example: 1\n\n\n--quantTranscriptomeBan\nprohibit various alignment type - IndelSoftclipSingleend … prohibit indels, soft clipping and single-end alignments - compatible with RSEM - Singleend … prohibit single-end alignments\nstring, example: \"IndelSoftclipSingleend\"\n\n\n\n\n\n2-pass Mapping\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--twopassMode\n2-pass mapping mode. - None … 1-pass mapping - Basic … basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly\nstring\n\n\n--twopass1readsN\nnumber of reads to process for the 1st step. Use very large number (or default -1) to map all reads in the first step.\ninteger, example: -1\n\n\n\n\n\nWASP parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--waspOutputMode\nWASP allele-specific output type. This is re-implementation of the original WASP mappability filtering by Bryce van de Geijn, Graham McVicker, Yoav Gilad & Jonathan K Pritchard. Please cite the original WASP paper: Nature Methods 12, 1061–1063 (2015), https://www.nature.com/articles/nmeth.3582 . - SAMtag … add WASP tags to the alignments that pass WASP filtering\nstring\n\n\n\n\n\nSTARsolo (single cell RNA-seq) parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--soloType\ntype of single-cell RNA-seq - CB_UMI_Simple … (a.k.a. Droplet) one UMI and one Cell Barcode of fixed length in read2, e.g. Drop-seq and 10X Chromium. - CB_UMI_Complex … multiple Cell Barcodes of varying length, one UMI of fixed length and one adapter sequence of fixed length are allowed in read2 only (e.g. inDrop, ddSeq). - CB_samTagOut … output Cell Barcode as CR and/or CB SAm tag. No UMI counting. –readFilesIn cDNA_read1 [cDNA_read2 if paired-end] CellBarcode_read . Requires –outSAMtype BAM Unsorted [and/or SortedByCoordinate] - SmartSeq … Smart-seq: each cell in a separate FASTQ (paired- or single-end), barcodes are corresponding read-groups, no UMI sequences, alignments deduplicated according to alignment start and end (after extending soft-clipped bases)\nstring\n\n\n--soloCBwhitelist\nfile(s) with whitelist(s) of cell barcodes. Only –soloType CB_UMI_Complex allows more than one whitelist file. - None … no whitelist: all cell barcodes are allowed\nstring\n\n\n--soloCBstart\ncell barcode start base\ninteger, example: 1\n\n\n--soloCBlen\ncell barcode length\ninteger, example: 16\n\n\n--soloUMIstart\nUMI start base\ninteger, example: 17\n\n\n--soloUMIlen\nUMI length\ninteger, example: 10\n\n\n--soloBarcodeReadLength\nlength of the barcode read - 1 … equal to sum of soloCBlen+soloUMIlen - 0 … not defined, do not check\ninteger, example: 1\n\n\n--soloBarcodeMate\nidentifies which read mate contains the barcode (CB+UMI) sequence - 0 … barcode sequence is on separate read, which should always be the last file in the –readFilesIn listed - 1 … barcode sequence is a part of mate 1 - 2 … barcode sequence is a part of mate 2\ninteger, example: 0\n\n\n--soloCBposition\nposition of Cell Barcode(s) on the barcode read. Presently only works with –soloType CB_UMI_Complex, and barcodes are assumed to be on Read2. Format for each barcode: startAnchor_startPosition_endAnchor_endPosition start(end)Anchor defines the Anchor Base for the CB: 0: read start; 1: read end; 2: adapter start; 3: adapter end start(end)Position is the 0-based position with of the CB start(end) with respect to the Anchor Base String for different barcodes are separated by space. Example: inDrop (Zilionis et al, Nat. Protocols, 2017): –soloCBposition 0_0_2_-1 3_1_3_8\nstring\n\n\n--soloUMIposition\nposition of the UMI on the barcode read, same as soloCBposition Example: inDrop (Zilionis et al, Nat. Protocols, 2017): –soloCBposition 3_9_3_14\nstring\n\n\n--soloAdapterSequence\nadapter sequence to anchor barcodes. Only one adapter sequence is allowed.\nstring\n\n\n--soloAdapterMismatchesNmax\nmaximum number of mismatches allowed in adapter sequence.\ninteger, example: 1\n\n\n--soloCBmatchWLtype\nmatching the Cell Barcodes to the WhiteList - Exact … only exact matches allowed - 1MM … only one match in whitelist with 1 mismatched base allowed. Allowed CBs have to have at least one read with exact match. - 1MM_multi … multiple matches in whitelist with 1 mismatched base allowed, posterior probability calculation is used choose one of the matches. Allowed CBs have to have at least one read with exact match. This option matches best with CellRanger 2.2.0 - 1MM_multi_pseudocounts … same as 1MM_Multi, but pseudocounts of 1 are added to all whitelist barcodes. - 1MM_multi_Nbase_pseudocounts … same as 1MM_multi_pseudocounts, multimatching to WL is allowed for CBs with N-bases. This option matches best with CellRanger >= 3.0.0 - EditDist_2 … allow up to edit distance of 3 fpr each of the barcodes. May include one deletion + one insertion. Only works with –soloType CB_UMI_Complex. Matches to multiple passlist barcdoes are not allowed. Similar to ParseBio Split-seq pipeline.\nstring, example: \"1MM_multi\"\n\n\n--soloInputSAMattrBarcodeSeq\nwhen inputting reads from a SAM file (–readsFileType SAM SE/PE), these SAM attributes mark the barcode sequence (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use –soloInputSAMattrBarcodeSeq CR UR . This parameter is required when running STARsolo with input from SAM.\nstring\n\n\n--soloInputSAMattrBarcodeQual\nwhen inputting reads from a SAM file (–readsFileType SAM SE/PE), these SAM attributes mark the barcode qualities (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use –soloInputSAMattrBarcodeQual CY UY . If this parameter is ‘-’ (default), the quality ‘H’ will be assigned to all bases.\nstring\n\n\n--soloStrand\nstrandedness of the solo libraries: - Unstranded … no strand information - Forward … read strand same as the original RNA molecule - Reverse … read strand opposite to the original RNA molecule\nstring, example: \"Forward\"\n\n\n--soloFeatures\ngenomic features for which the UMI counts per Cell Barcode are collected - Gene … genes: reads match the gene transcript - SJ … splice junctions: reported in SJ.out.tab - GeneFull … full gene (pre-mRNA): count all reads overlapping genes’ exons and introns - GeneFull_ExonOverIntron … full gene (pre-mRNA): count all reads overlapping genes’ exons and introns: prioritize 100% overlap with exons - GeneFull_Ex50pAS … full gene (pre-RNA): count all reads overlapping genes’ exons and introns: prioritize >50% overlap with exons. Do not count reads with 100% exonic overlap in the antisense direction.\nstring, example: \"Gene\"\n\n\n--soloMultiMappers\ncounting method for reads mapping to multiple genes - Unique … count only reads that map to unique genes - Uniform … uniformly distribute multi-genic UMIs to all genes - Rescue … distribute UMIs proportionally to unique+uniform counts (~ first iteration of EM) - PropUnique … distribute UMIs proportionally to unique mappers, if present, and uniformly if not. - EM … multi-gene UMIs are distributed using Expectation Maximization algorithm\nstring, example: \"Unique\"\n\n\n--soloUMIdedup\ntype of UMI deduplication (collapsing) algorithm - 1MM_All … all UMIs with 1 mismatch distance to each other are collapsed (i.e. counted once). - 1MM_Directional_UMItools … follows the “directional” method from the UMI-tools by Smith, Heger and Sudbery (Genome Research 2017). - 1MM_Directional … same as 1MM_Directional_UMItools, but with more stringent criteria for duplicate UMIs - Exact … only exactly matching UMIs are collapsed. - NoDedup … no deduplication of UMIs, count all reads. - 1MM_CR … CellRanger2-4 algorithm for 1MM UMI collapsing.\nstring, example: \"1MM_All\"\n\n\n--soloUMIfiltering\ntype of UMI filtering (for reads uniquely mapping to genes) - - … basic filtering: remove UMIs with N and homopolymers (similar to CellRanger 2.2.0). - MultiGeneUMI … basic + remove lower-count UMIs that map to more than one gene. - MultiGeneUMI_All … basic + remove all UMIs that map to more than one gene. - MultiGeneUMI_CR … basic + remove lower-count UMIs that map to more than one gene, matching CellRanger > 3.0.0 . Only works with –soloUMIdedup 1MM_CR\nstring\n\n\n--soloOutFileNames\nfile names for STARsolo output: file_name_prefix gene_names barcode_sequences cell_feature_count_matrix\nstring, example: \"Solo.out/\", example: \"features.tsv\", example: \"barcodes.tsv\", example: \"matrix.mtx\"\n\n\n--soloCellFilter\ncell filtering type and parameters - None … do not output filtered cells - TopCells … only report top cells by UMI count, followed by the exact number of cells - CellRanger2.2 … simple filtering of CellRanger 2.2. Can be followed by numbers: number of expected cells, robust maximum percentile for UMI count, maximum to minimum ratio for UMI count The harcoded values are from CellRanger: nExpectedCells=3000; maxPercentile=0.99; maxMinRatio=10 - EmptyDrops_CR … EmptyDrops filtering in CellRanger flavor. Please cite the original EmptyDrops paper: A.T.L Lun et al, Genome Biology, 20, 63 (2019): https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1662-y Can be followed by 10 numeric parameters: nExpectedCells maxPercentile maxMinRatio indMin indMax umiMin umiMinFracMedian candMaxN FDR simN The harcoded values are from CellRanger: 3000 0.99 10 45000 90000 500 0.01 20000 0.01 10000\nstring, example: \"CellRanger2.2\", example: \"3000\", example: \"0.99\", example: \"10\"\n\n\n--soloOutFormatFeaturesGeneField3\nfield 3 in the Gene features.tsv file. If “-”, then no 3rd field is output.\nstring, example: \"Gene Expression\"\n\n\n--soloCellReadStats\nOutput reads statistics for each CB - Standard … standard output\nstring"
  },
  {
    "objectID": "modules/mapping/star_align_v273a.html#authors",
    "href": "modules/mapping/star_align_v273a.html#authors",
    "title": "Star align v273a",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/mapping/cellranger_count_split.html",
    "href": "modules/mapping/cellranger_count_split.html",
    "title": "Cellranger count split",
    "section": "",
    "text": "ID: cellranger_count_split\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/mapping/cellranger_count_split.html#example-commands",
    "href": "modules/mapping/cellranger_count_split.html#example-commands",
    "title": "Cellranger count split",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/cellranger_count_split/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/cellranger_count_split/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/cellranger_count_split.html#argument-group",
    "href": "modules/mapping/cellranger_count_split.html#argument-group",
    "title": "Cellranger count split",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nOutput directory from a Cell Ranger count run.\nfile, required, example: \"input_dir\"\n\n\n--filtered_h5\n\nfile, example: \"filtered_feature_bc_matrix.h5\"\n\n\n--metrics_summary\n\nfile, example: \"metrics_summary.csv\"\n\n\n--molecule_info\n\nfile, example: \"molecule_info.h5\"\n\n\n--bam\n\nfile, example: \"possorted_genome_bam.bam\"\n\n\n--bai\n\nfile, example: \"possorted_genome_bam.bam.bai\"\n\n\n--raw_h5\n\nfile, example: \"raw_feature_bc_matrix.h5\""
  },
  {
    "objectID": "modules/mapping/cellranger_count_split.html#authors",
    "href": "modules/mapping/cellranger_count_split.html#authors",
    "title": "Cellranger count split",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/mapping/star_build_reference.html",
    "href": "modules/mapping/star_build_reference.html",
    "title": "Star build reference",
    "section": "",
    "text": "ID: star_build_reference\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/mapping/star_build_reference.html#example-commands",
    "href": "modules/mapping/star_build_reference.html#example-commands",
    "title": "Star build reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/star_build_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/star_build_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/star_build_reference.html#argument-groups",
    "href": "modules/mapping/star_build_reference.html#argument-groups",
    "title": "Star build reference",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput/Output\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nThe fasta files to be included in the reference. Corresponds to the –genomeFastaFiles argument in the STAR command.\nfile, required, example: \"chr1.fasta\", example: \"chr2.fasta\"\n\n\n--transcriptome_gtf\nSpecifies the path to the file with annotated transcripts in the standard GTF format. STAR will extract splice junctions from this file and use them to greatly improve accuracy of the mapping. Corresponds to the –sjdbGTFfile argument in the STAR command.\nfile\n\n\n--output\nPath to output directory. Corresponds to the –genomeDir argument in the STAR command.\nfile, required, example: \"/path/to/foo\"\n\n\n\n\n\nGenome indexing arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genomeSAindexNbases\nLength (bases) of the SA pre-indexing string. Typically between 10 and 15. Longer strings will use much more memory, but allow faster searches. For small genomes, the parameter {genomeSAindexNbases must be scaled down to min(14, log2(GenomeLength)/2 - 1).\ninteger, default: 14"
  },
  {
    "objectID": "modules/mapping/star_build_reference.html#authors",
    "href": "modules/mapping/star_build_reference.html#authors",
    "title": "Star build reference",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author)"
  },
  {
    "objectID": "modules/mapping/multi_star.html",
    "href": "modules/mapping/multi_star.html",
    "title": "Multi star",
    "section": "",
    "text": "ID: multi_star\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/mapping/multi_star.html#example-commands",
    "href": "modules/mapping/multi_star.html#example-commands",
    "title": "Multi star",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/multi_star/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/multi_star/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/multi_star.html#argument-groups",
    "href": "modules/mapping/multi_star.html#argument-groups",
    "title": "Multi star",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput/Output\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input_id\nThe ID of the sample being processed. This vector should have the same length as the --input_r1 argument.\nstring, required, example: \"mysample\", example: \"mysample\"\n\n\n--input_r1\nPaths to the sequences to be mapped. If using Illumina paired-end reads, only the R1 files should be passed.\nfile, required, example: \"mysample_S1_L001_R1_001.fastq.gz\", example: \"mysample_S1_L002_R1_001.fastq.gz\"\n\n\n--input_r2\nPaths to the sequences to be mapped. If using Illumina paired-end reads, only the R2 files should be passed.\nfile, example: \"mysample_S1_L001_R2_001.fastq.gz\", example: \"mysample_S1_L002_R2_001.fastq.gz\"\n\n\n--reference_index\nPath to the reference built by star_build_reference. Corresponds to the –genomeDir argument in the STAR command.\nfile, required, example: \"/path/to/reference\"\n\n\n--reference_gtf\nPath to the gtf reference file.\nfile, required, example: \"genes.gtf\"\n\n\n--output\nPath to output directory. Corresponds to the –outFileNamePrefix argument in the STAR command.\nfile, required, example: \"/path/to/foo\"\n\n\n\n\n\nProcessing arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--run_htseq_count\nWhether or not to also run htseq-count after STAR.\nboolean, default: TRUE\n\n\n--run_multiqc\nWhether or not to also run MultiQC at the end.\nboolean, default: TRUE\n\n\n\n\n\nRun Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--runRNGseed\nrandom number generator seed.\ninteger, example: 777\n\n\n\n\n\nGenome Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genomeFastaFiles\npath(s) to the fasta files with the genome sequences, separated by spaces. These files should be plain text FASTA files, they cannot be zipped. Required for the genome generation (–runMode genomeGenerate). Can also be used in the mapping (–runMode alignReads) to add extra (new) sequences to the genome (e.g. spike-ins).\nfile\n\n\n\n\n\nSplice Junctions Database\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sjdbFileChrStartEnd\npath to the files with genomic coordinates (chr  start  end  strand) for the splice junction introns. Multiple files can be supplied and will be concatenated.\nstring\n\n\n--sjdbGTFfile\npath to the GTF file with annotations\nfile\n\n\n--sjdbGTFchrPrefix\nprefix for chromosome names in a GTF file (e.g. ‘chr’ for using ENSMEBL annotations with UCSC genomes)\nstring\n\n\n--sjdbGTFfeatureExon\nfeature type in GTF file to be used as exons for building transcripts\nstring, example: \"exon\"\n\n\n--sjdbGTFtagExonParentTranscript\nGTF attribute name for parent transcript ID (default “transcript_id” works for GTF files)\nstring, example: \"transcript_id\"\n\n\n--sjdbGTFtagExonParentGene\nGTF attribute name for parent gene ID (default “gene_id” works for GTF files)\nstring, example: \"gene_id\"\n\n\n--sjdbGTFtagExonParentGeneName\nGTF attribute name for parent gene name\nstring, example: \"gene_name\"\n\n\n--sjdbGTFtagExonParentGeneType\nGTF attribute name for parent gene type\nstring, example: \"gene_type\", example: \"gene_biotype\"\n\n\n--sjdbOverhang\nlength of the donor/acceptor sequence on each side of the junctions, ideally = (mate_length - 1)\ninteger, example: 100\n\n\n--sjdbScore\nextra alignment score for alignments that cross database junctions\ninteger, example: 2\n\n\n--sjdbInsertSave\nwhich files to save when sjdb junctions are inserted on the fly at the mapping step - Basic … only small junction / transcript files - All … all files including big Genome, SA and SAindex - this will create a complete genome directory\nstring, example: \"Basic\"\n\n\n\n\n\nVariation parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--varVCFfile\npath to the VCF file that contains variation data. The 10th column should contain the genotype information, e.g. 0/1\nstring\n\n\n\n\n\nRead Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--readFilesType\nformat of input read files - Fastx … FASTA or FASTQ - SAM SE … SAM or BAM single-end reads; for BAM use –readFilesCommand samtools view - SAM PE … SAM or BAM paired-end reads; for BAM use –readFilesCommand samtools view\nstring, example: \"Fastx\"\n\n\n--readFilesSAMattrKeep\nfor –readFilesType SAM SE/PE, which SAM tags to keep in the output BAM, e.g.: –readFilesSAMtagsKeep RG PL - All … keep all tags - None … do not keep any tags\nstring, example: \"All\"\n\n\n--readFilesManifest\npath to the “manifest” file with the names of read files. The manifest file should contain 3 tab-separated columns: paired-end reads: read1_file_name \\(tab\\) read2_file_name \\(tab\\) read_group_line. single-end reads: read1_file_name \\(tab\\) - \\(tab\\) read_group_line. Spaces, but not tabs are allowed in file names. If read_group_line does not start with ID:, it can only contain one ID field, and ID: will be added to it. If read_group_line starts with ID:, it can contain several fields separated by \\(tab\\), and all fields will be be copied verbatim into SAM @RG header line.\nfile\n\n\n--readFilesPrefix\nprefix for the read files names, i.e. it will be added in front of the strings in –readFilesIn\nstring\n\n\n--readFilesCommand\ncommand line to execute for each of the input file. This command should generate FASTA or FASTQ text and send it to stdout For example: zcat - to uncompress .gz files, bzcat - to uncompress .bz2 files, etc.\nstring\n\n\n--readMapNumber\nnumber of reads to map from the beginning of the file -1: map all reads\ninteger, example: -1\n\n\n--readMatesLengthsIn\nEqual/NotEqual - lengths of names,sequences,qualities for both mates are the same / not the same. NotEqual is safe in all situations.\nstring, example: \"NotEqual\"\n\n\n--readNameSeparator\ncharacter(s) separating the part of the read names that will be trimmed in output (read name after space is always trimmed)\nstring, example: \"/\"\n\n\n--readQualityScoreBase\nnumber to be subtracted from the ASCII code to get Phred quality score\ninteger, example: 33\n\n\n\n\n\nRead Clipping\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--clipAdapterType\nadapter clipping type - Hamming … adapter clipping based on Hamming distance, with the number of mismatches controlled by –clip5pAdapterMMp - CellRanger4 … 5p and 3p adapter clipping similar to CellRanger4. Utilizes Opal package by Martin Šošić: https://github.com/Martinsos/opal - None … no adapter clipping, all other clip* parameters are disregarded\nstring, example: \"Hamming\"\n\n\n--clip3pNbases\nnumber(s) of bases to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n--clip3pAdapterSeq\nadapter sequences to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates. - polyA … polyA sequence with the length equal to read length\nstring\n\n\n--clip3pAdapterMMp\nmax proportion of mismatches for 3p adapter clipping for each mate. If one value is given, it will be assumed the same for both mates.\ndouble, example: 0.1\n\n\n--clip3pAfterAdapterNbases\nnumber of bases to clip from 3p of each mate after the adapter clipping. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n--clip5pNbases\nnumber(s) of bases to clip from 5p of each mate. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n\n\n\nLimits\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--limitGenomeGenerateRAM\nmaximum available RAM (bytes) for genome generation\nlong, example: NA\n\n\n--limitIObufferSize\nmax available buffers size (bytes) for input/output, per thread\nlong, example: 30000000, example: 50000000\n\n\n--limitOutSAMoneReadBytes\nmax size of the SAM record (bytes) for one read. Recommended value: >(2(LengthMate1+LengthMate2+100)outFilterMultimapNmax\nlong, example: 100000\n\n\n--limitOutSJoneRead\nmax number of junctions for one read (including all multi-mappers)\ninteger, example: 1000\n\n\n--limitOutSJcollapsed\nmax number of collapsed junctions\ninteger, example: 1000000\n\n\n--limitBAMsortRAM\nmaximum available RAM (bytes) for sorting BAM. If =0, it will be set to the genome index size. 0 value can only be used with –genomeLoad NoSharedMemory option.\nlong, example: 0\n\n\n--limitSjdbInsertNsj\nmaximum number of junctions to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run\ninteger, example: 1000000\n\n\n--limitNreadsSoft\nsoft limit on the number of reads\ninteger, example: -1\n\n\n\n\n\nOutput: general\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outTmpKeep\nwhether to keep the temporary files after STAR runs is finished - None … remove all temporary files - All … keep all files\nstring\n\n\n--outStd\nwhich output will be directed to stdout (standard out) - Log … log messages - SAM … alignments in SAM format (which normally are output to Aligned.out.sam file), normal standard output will go into Log.std.out - BAM_Unsorted … alignments in BAM format, unsorted. Requires –outSAMtype BAM Unsorted - BAM_SortedByCoordinate … alignments in BAM format, sorted by coordinate. Requires –outSAMtype BAM SortedByCoordinate - BAM_Quant … alignments to transcriptome in BAM format, unsorted. Requires –quantMode TranscriptomeSAM\nstring, example: \"Log\"\n\n\n--outReadsUnmapped\noutput of unmapped and partially mapped (i.e. mapped only one mate of a paired end read) reads in separate file(s). - None … no output - Fastx … output in separate fasta/fastq files, Unmapped.out.mate1/2\nstring\n\n\n--outQSconversionAdd\nadd this number to the quality score (e.g. to convert from Illumina to Sanger, use -31)\ninteger, example: 0\n\n\n--outMultimapperOrder\norder of multimapping alignments in the output files - Old_2.4 … quasi-random order used before 2.5.0 - Random … random order of alignments for each multi-mapper. Read mates (pairs) are always adjacent, all alignment for each read stay together. This option will become default in the future releases.\nstring, example: \"Old_2.4\"\n\n\n\n\n\nOutput: SAM and BAM\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSAMmode\nmode of SAM output - None … no SAM output - Full … full SAM output - NoQS … full SAM but without quality scores\nstring, example: \"Full\"\n\n\n--outSAMstrandField\nCufflinks-like strand field flag - None … not used - intronMotif … strand derived from the intron motif. This option changes the output alignments: reads with inconsistent and/or non-canonical introns are filtered out.\nstring\n\n\n--outSAMattributes\na string of desired SAM attributes, in the order desired for the output SAM. Tags can be listed in any combination/order. Presets: - None … no attributes - Standard … NH HI AS nM - All … NH HI AS nM NM MD jM jI MC ch Alignment: - NH … number of loci the reads maps to: =1 for unique mappers, >1 for multimappers. Standard SAM tag. - HI … multiple alignment index, starts with –outSAMattrIHstart (=1 by default). Standard SAM tag. - AS … local alignment score, +1/-1 for matches/mismateches, score* penalties for indels and gaps. For PE reads, total score for two mates. Stadnard SAM tag. - nM … number of mismatches. For PE reads, sum over two mates. - NM … edit distance to the reference (number of mismatched + inserted + deleted bases) for each mate. Standard SAM tag. - MD … string encoding mismatched and deleted reference bases (see standard SAM specifications). Standard SAM tag. - jM … intron motifs for all junctions (i.e. N in CIGAR): 0: non-canonical; 1: GT/AG, 2: CT/AC, 3: GC/AG, 4: CT/GC, 5: AT/AC, 6: GT/AT. If splice junctions database is used, and a junction is annotated, 20 is added to its motif value. - jI … start and end of introns for all junctions (1-based). - XS … alignment strand according to –outSAMstrandField. - MC … mate’s CIGAR string. Standard SAM tag. - ch … marks all segment of all chimeric alingments for –chimOutType WithinBAM output. - cN … number of bases clipped from the read ends: 5’ and 3’ Variation: - vA … variant allele - vG … genomic coordinate of the variant overlapped by the read. - vW … 1 - alignment passes WASP filtering; 2,3,4,5,6,7 - alignment does not pass WASP filtering. Requires –waspOutputMode SAMtag. STARsolo: - CR CY UR UY … sequences and quality scores of cell barcodes and UMIs for the solo* demultiplexing. - GX GN … gene ID and gene name for unique-gene reads. - gx gn … gene IDs and gene names for unique- and multi-gene reads. - CB UB … error-corrected cell barcodes and UMIs for solo* demultiplexing. Requires –outSAMtype BAM SortedByCoordinate. - sM … assessment of CB and UMI. - sS … sequence of the entire barcode (CB,UMI,adapter). - sQ … quality of the entire barcode. ***Unsupported/undocumented: - ha … haplotype (1/2) when mapping to the diploid genome. Requires genome generated with –genomeTransformType Diploid . - rB … alignment block read/genomic coordinates. - vR … read coordinate of the variant.\nstring, example: \"Standard\"\n\n\n--outSAMattrIHstart\nstart value for the IH attribute. 0 may be required by some downstream software, such as Cufflinks or StringTie.\ninteger, example: 1\n\n\n--outSAMunmapped\noutput of unmapped reads in the SAM format 1st word: - None … no output - Within … output unmapped reads within the main SAM file (i.e. Aligned.out.sam) 2nd word: - KeepPairs … record unmapped mate for each alignment, and, in case of unsorted output, keep it adjacent to its mapped mate. Only affects multi-mapping reads.\nstring\n\n\n--outSAMorder\ntype of sorting for the SAM output Paired: one mate after the other for all paired alignments PairedKeepInputOrder: one mate after the other for all paired alignments, the order is kept the same as in the input FASTQ files\nstring, example: \"Paired\"\n\n\n--outSAMprimaryFlag\nwhich alignments are considered primary - all others will be marked with 0x100 bit in the FLAG - OneBestScore … only one alignment with the best score is primary - AllBestScore … all alignments with the best score are primary\nstring, example: \"OneBestScore\"\n\n\n--outSAMreadID\nread ID record type - Standard … first word (until space) from the FASTx read ID line, removing /1,/2 from the end - Number … read number (index) in the FASTx file\nstring, example: \"Standard\"\n\n\n--outSAMmapqUnique\n0 to 255: the MAPQ value for unique mappers\ninteger, example: 255\n\n\n--outSAMflagOR\n0 to 65535: sam FLAG will be bitwise OR’d with this value, i.e. FLAG=FLAG | outSAMflagOR. This is applied after all flags have been set by STAR, and after outSAMflagAND. Can be used to set specific bits that are not set otherwise.\ninteger, example: 0\n\n\n--outSAMflagAND\n0 to 65535: sam FLAG will be bitwise AND’d with this value, i.e. FLAG=FLAG & outSAMflagOR. This is applied after all flags have been set by STAR, but before outSAMflagOR. Can be used to unset specific bits that are not set otherwise.\ninteger, example: 65535\n\n\n--outSAMattrRGline\nSAM/BAM read group line. The first word contains the read group identifier and must start with “ID:”, e.g. –outSAMattrRGline ID:xxx CN:yy “DS:z z z”. xxx will be added as RG tag to each output alignment. Any spaces in the tag values have to be double quoted. Comma separated RG lines correspons to different (comma separated) input files in –readFilesIn. Commas have to be surrounded by spaces, e.g. –outSAMattrRGline ID:xxx , ID:zzz “DS:z z” , ID:yyy DS:yyyy\nstring\n\n\n--outSAMheaderHD\n@HD (header) line of the SAM header\nstring\n\n\n--outSAMheaderPG\nextra @PG (software) line of the SAM header (in addition to STAR)\nstring\n\n\n--outSAMheaderCommentFile\npath to the file with @CO (comment) lines of the SAM header\nstring\n\n\n--outSAMfilter\nfilter the output into main SAM/BAM files - KeepOnlyAddedReferences … only keep the reads for which all alignments are to the extra reference sequences added with –genomeFastaFiles at the mapping stage. - KeepAllAddedReferences … keep all alignments to the extra reference sequences added with –genomeFastaFiles at the mapping stage.\nstring\n\n\n--outSAMmultNmax\nmax number of multiple alignments for a read that will be output to the SAM/BAM files. Note that if this value is not equal to -1, the top scoring alignment will be output first - -1 … all alignments (up to –outFilterMultimapNmax) will be output\ninteger, example: -1\n\n\n--outSAMtlen\ncalculation method for the TLEN field in the SAM/BAM files - 1 … leftmost base of the (+)strand mate to rightmost base of the (-)mate. (+)sign for the (+)strand mate - 2 … leftmost base of any mate to rightmost base of any mate. (+)sign for the mate with the leftmost base. This is different from 1 for overlapping mates with protruding ends\ninteger, example: 1\n\n\n--outBAMcompression\n-1 to 10 BAM compression level, -1=default compression (6?), 0=no compression, 10=maximum compression\ninteger, example: 1\n\n\n--outBAMsortingThreadN\n>=0: number of threads for BAM sorting. 0 will default to min(6,–runThreadN).\ninteger, example: 0\n\n\n--outBAMsortingBinsN\n>0: number of genome bins for coordinate-sorting\ninteger, example: 50\n\n\n\n\n\nBAM processing\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--bamRemoveDuplicatesType\nmark duplicates in the BAM file, for now only works with (i) sorted BAM fed with inputBAMfile, and (ii) for paired-end alignments only - - … no duplicate removal/marking - UniqueIdentical … mark all multimappers, and duplicate unique mappers. The coordinates, FLAG, CIGAR must be identical - UniqueIdenticalNotMulti … mark duplicate unique mappers but not multimappers.\nstring\n\n\n--bamRemoveDuplicatesMate2basesN\nnumber of bases from the 5’ of mate 2 to use in collapsing (e.g. for RAMPAGE)\ninteger, example: 0\n\n\n\n\n\nOutput Wiggle\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outWigType\ntype of signal output, e.g. “bedGraph” OR “bedGraph read1_5p”. Requires sorted BAM: –outSAMtype BAM SortedByCoordinate . 1st word: - None … no signal output - bedGraph … bedGraph format - wiggle … wiggle format 2nd word: - read1_5p … signal from only 5’ of the 1st read, useful for CAGE/RAMPAGE etc - read2 … signal from only 2nd read\nstring\n\n\n--outWigStrand\nstrandedness of wiggle/bedGraph output - Stranded … separate strands, str1 and str2 - Unstranded … collapsed strands\nstring, example: \"Stranded\"\n\n\n--outWigReferencesPrefix\nprefix matching reference names to include in the output wiggle file, e.g. “chr”, default “-” - include all references\nstring\n\n\n--outWigNorm\ntype of normalization for the signal - RPM … reads per million of mapped reads - None … no normalization, “raw” counts\nstring, example: \"RPM\"\n\n\n\n\n\nOutput Filtering\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outFilterType\ntype of filtering - Normal … standard filtering using only current alignment - BySJout … keep only those reads that contain junctions that passed filtering into SJ.out.tab\nstring, example: \"Normal\"\n\n\n--outFilterMultimapScoreRange\nthe score range below the maximum score for multimapping alignments\ninteger, example: 1\n\n\n--outFilterMultimapNmax\nmaximum number of loci the read is allowed to map to. Alignments (all of them) will be output only if the read maps to no more loci than this value. Otherwise no alignments will be output, and the read will be counted as “mapped to too many loci” in the Log.final.out .\ninteger, example: 10\n\n\n--outFilterMismatchNmax\nalignment will be output only if it has no more mismatches than this value.\ninteger, example: 10\n\n\n--outFilterMismatchNoverLmax\nalignment will be output only if its ratio of mismatches to mapped length is less than or equal to this value.\ndouble, example: 0.3\n\n\n--outFilterMismatchNoverReadLmax\nalignment will be output only if its ratio of mismatches to read length is less than or equal to this value.\ndouble, example: 1\n\n\n--outFilterScoreMin\nalignment will be output only if its score is higher than or equal to this value.\ninteger, example: 0\n\n\n--outFilterScoreMinOverLread\nsame as outFilterScoreMin, but normalized to read length (sum of mates’ lengths for paired-end reads)\ndouble, example: 0.66\n\n\n--outFilterMatchNmin\nalignment will be output only if the number of matched bases is higher than or equal to this value.\ninteger, example: 0\n\n\n--outFilterMatchNminOverLread\nsam as outFilterMatchNmin, but normalized to the read length (sum of mates’ lengths for paired-end reads).\ndouble, example: 0.66\n\n\n--outFilterIntronMotifs\nfilter alignment using their motifs - None … no filtering - RemoveNoncanonical … filter out alignments that contain non-canonical junctions - RemoveNoncanonicalUnannotated … filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.\nstring\n\n\n--outFilterIntronStrands\nfilter alignments - RemoveInconsistentStrands … remove alignments that have junctions with inconsistent strands - None … no filtering\nstring, example: \"RemoveInconsistentStrands\"\n\n\n\n\n\nOutput splice junctions (SJ.out.tab)\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSJtype\ntype of splice junction output - Standard … standard SJ.out.tab output - None … no splice junction output\nstring, example: \"Standard\"\n\n\n\n\n\nOutput Filtering: Splice Junctions\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSJfilterReads\nwhich reads to consider for collapsed splice junctions output - All … all reads, unique- and multi-mappers - Unique … uniquely mapping reads only\nstring, example: \"All\"\n\n\n--outSJfilterOverhangMin\nminimum overhang length for splice junctions on both sides for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif does not apply to annotated junctions\ninteger, example: 30, example: 12, example: 12, example: 12\n\n\n--outSJfilterCountUniqueMin\nminimum uniquely mapping read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions\ninteger, example: 3, example: 1, example: 1, example: 1\n\n\n--outSJfilterCountTotalMin\nminimum total (multi-mapping+unique) read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions\ninteger, example: 3, example: 1, example: 1, example: 1\n\n\n--outSJfilterDistToOtherSJmin\nminimum allowed distance to other junctions’ donor/acceptor does not apply to annotated junctions\ninteger, example: 10, example: 0, example: 5, example: 10\n\n\n--outSJfilterIntronMaxVsReadN\nmaximum gap allowed for junctions supported by 1,2,3,,,N reads i.e. by default junctions supported by 1 read can have gaps <=50000b, by 2 reads: <=100000b, by 3 reads: <=200000. by >=4 reads any gap <=alignIntronMax does not apply to annotated junctions\ninteger, example: 50000, example: 100000, example: 200000\n\n\n\n\n\nScoring\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--scoreGap\nsplice junction penalty (independent on intron motif)\ninteger, example: 0\n\n\n--scoreGapNoncan\nnon-canonical junction penalty (in addition to scoreGap)\ninteger, example: -8\n\n\n--scoreGapGCAG\nGC/AG and CT/GC junction penalty (in addition to scoreGap)\ninteger, example: -4\n\n\n--scoreGapATAC\nAT/AC and GT/AT junction penalty (in addition to scoreGap)\ninteger, example: -8\n\n\n--scoreGenomicLengthLog2scale\nextra score logarithmically scaled with genomic length of the alignment: scoreGenomicLengthLog2scale*log2(genomicLength)\ninteger, example: 0\n\n\n--scoreDelOpen\ndeletion open penalty\ninteger, example: -2\n\n\n--scoreDelBase\ndeletion extension penalty per base (in addition to scoreDelOpen)\ninteger, example: -2\n\n\n--scoreInsOpen\ninsertion open penalty\ninteger, example: -2\n\n\n--scoreInsBase\ninsertion extension penalty per base (in addition to scoreInsOpen)\ninteger, example: -2\n\n\n--scoreStitchSJshift\nmaximum score reduction while searching for SJ boundaries in the stitching step\ninteger, example: 1\n\n\n\n\n\nAlignments and Seeding\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--seedSearchStartLmax\ndefines the search start point through the read - the read is split into pieces no longer than this value\ninteger, example: 50\n\n\n--seedSearchStartLmaxOverLread\nseedSearchStartLmax normalized to read length (sum of mates’ lengths for paired-end reads)\ndouble, example: 1\n\n\n--seedSearchLmax\ndefines the maximum length of the seeds, if =0 seed length is not limited\ninteger, example: 0\n\n\n--seedMultimapNmax\nonly pieces that map fewer than this value are utilized in the stitching procedure\ninteger, example: 10000\n\n\n--seedPerReadNmax\nmax number of seeds per read\ninteger, example: 1000\n\n\n--seedPerWindowNmax\nmax number of seeds per window\ninteger, example: 50\n\n\n--seedNoneLociPerWindow\nmax number of one seed loci per window\ninteger, example: 10\n\n\n--seedSplitMin\nmin length of the seed sequences split by Ns or mate gap\ninteger, example: 12\n\n\n--seedMapMin\nmin length of seeds to be mapped\ninteger, example: 5\n\n\n--alignIntronMin\nminimum intron size, genomic gap is considered intron if its length>=alignIntronMin, otherwise it is considered Deletion\ninteger, example: 21\n\n\n--alignIntronMax\nmaximum intron size, if 0, max intron size will be determined by (2^winBinNbits)*winAnchorDistNbins\ninteger, example: 0\n\n\n--alignMatesGapMax\nmaximum gap between two mates, if 0, max intron gap will be determined by (2^winBinNbits)*winAnchorDistNbins\ninteger, example: 0\n\n\n--alignSJoverhangMin\nminimum overhang (i.e. block size) for spliced alignments\ninteger, example: 5\n\n\n--alignSJstitchMismatchNmax\nmaximum number of mismatches for stitching of the splice junctions (-1: no limit). (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif.\ninteger, example: 0, example: -1, example: 0, example: 0\n\n\n--alignSJDBoverhangMin\nminimum overhang (i.e. block size) for annotated (sjdb) spliced alignments\ninteger, example: 3\n\n\n--alignSplicedMateMapLmin\nminimum mapped length for a read mate that is spliced\ninteger, example: 0\n\n\n--alignSplicedMateMapLminOverLmate\nalignSplicedMateMapLmin normalized to mate length\ndouble, example: 0.66\n\n\n--alignWindowsPerReadNmax\nmax number of windows per read\ninteger, example: 10000\n\n\n--alignTranscriptsPerWindowNmax\nmax number of transcripts per window\ninteger, example: 100\n\n\n--alignTranscriptsPerReadNmax\nmax number of different alignments per read to consider\ninteger, example: 10000\n\n\n--alignEndsType\ntype of read ends alignment - Local … standard local alignment with soft-clipping allowed - EndToEnd … force end-to-end read alignment, do not soft-clip - Extend5pOfRead1 … fully extend only the 5p of the read1, all other ends: local alignment - Extend5pOfReads12 … fully extend only the 5p of the both read1 and read2, all other ends: local alignment\nstring, example: \"Local\"\n\n\n--alignEndsProtrude\nallow protrusion of alignment ends, i.e. start (end) of the +strand mate downstream of the start (end) of the -strand mate 1st word: int: maximum number of protrusion bases allowed 2nd word: string: - ConcordantPair … report alignments with non-zero protrusion as concordant pairs - DiscordantPair … report alignments with non-zero protrusion as discordant pairs\nstring, example: \"0    ConcordantPair\"\n\n\n--alignSoftClipAtReferenceEnds\nallow the soft-clipping of the alignments past the end of the chromosomes - Yes … allow - No … prohibit, useful for compatibility with Cufflinks\nstring, example: \"Yes\"\n\n\n--alignInsertionFlush\nhow to flush ambiguous insertion positions - None … insertions are not flushed - Right … insertions are flushed to the right\nstring\n\n\n\n\n\nPaired-End reads\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--peOverlapNbasesMin\nminimum number of overlapping bases to trigger mates merging and realignment. Specify >0 value to switch on the “merginf of overlapping mates” algorithm.\ninteger, example: 0\n\n\n--peOverlapMMp\nmaximum proportion of mismatched bases in the overlap area\ndouble, example: 0.01\n\n\n\n\n\nWindows, Anchors, Binning\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--winAnchorMultimapNmax\nmax number of loci anchors are allowed to map to\ninteger, example: 50\n\n\n--winBinNbits\n=log2(winBin), where winBin is the size of the bin for the windows/clustering, each window will occupy an integer number of bins.\ninteger, example: 16\n\n\n--winAnchorDistNbins\nmax number of bins between two anchors that allows aggregation of anchors into one window\ninteger, example: 9\n\n\n--winFlankNbins\nlog2(winFlank), where win Flank is the size of the left and right flanking regions for each window\ninteger, example: 4\n\n\n--winReadCoverageRelativeMin\nminimum relative coverage of the read sequence by the seeds in a window, for STARlong algorithm only.\ndouble, example: 0.5\n\n\n--winReadCoverageBasesMin\nminimum number of bases covered by the seeds in a window , for STARlong algorithm only.\ninteger, example: 0\n\n\n\n\n\nChimeric Alignments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--chimOutType\ntype of chimeric output - Junctions … Chimeric.out.junction - SeparateSAMold … output old SAM into separate Chimeric.out.sam file - WithinBAM … output into main aligned BAM files (Aligned.*.bam) - WithinBAM HardClip … (default) hard-clipping in the CIGAR for supplemental chimeric alignments (default if no 2nd word is present) - WithinBAM SoftClip … soft-clipping in the CIGAR for supplemental chimeric alignments\nstring, example: \"Junctions\"\n\n\n--chimSegmentMin\nminimum length of chimeric segment length, if ==0, no chimeric output\ninteger, example: 0\n\n\n--chimScoreMin\nminimum total (summed) score of the chimeric segments\ninteger, example: 0\n\n\n--chimScoreDropMax\nmax drop (difference) of chimeric score (the sum of scores of all chimeric segments) from the read length\ninteger, example: 20\n\n\n--chimScoreSeparation\nminimum difference (separation) between the best chimeric score and the next one\ninteger, example: 10\n\n\n--chimScoreJunctionNonGTAG\npenalty for a non-GT/AG chimeric junction\ninteger, example: -1\n\n\n--chimJunctionOverhangMin\nminimum overhang for a chimeric junction\ninteger, example: 20\n\n\n--chimSegmentReadGapMax\nmaximum gap in the read sequence between chimeric segments\ninteger, example: 0\n\n\n--chimFilter\ndifferent filters for chimeric alignments - None … no filtering - banGenomicN … Ns are not allowed in the genome sequence around the chimeric junction\nstring, example: \"banGenomicN\"\n\n\n--chimMainSegmentMultNmax\nmaximum number of multi-alignments for the main chimeric segment. =1 will prohibit multimapping main segments.\ninteger, example: 10\n\n\n--chimMultimapNmax\nmaximum number of chimeric multi-alignments - 0 … use the old scheme for chimeric detection which only considered unique alignments\ninteger, example: 0\n\n\n--chimMultimapScoreRange\nthe score range for multi-mapping chimeras below the best chimeric score. Only works with –chimMultimapNmax > 1\ninteger, example: 1\n\n\n--chimNonchimScoreDropMin\nto trigger chimeric detection, the drop in the best non-chimeric alignment score with respect to the read length has to be greater than this value\ninteger, example: 20\n\n\n--chimOutJunctionFormat\nformatting type for the Chimeric.out.junction file - 0 … no comment lines/headers - 1 … comment lines at the end of the file: command line and Nreads: total, unique/multi-mapping\ninteger, example: 0\n\n\n\n\n\nQuantification of Annotations\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--quantMode\ntypes of quantification requested - - … none - TranscriptomeSAM … output SAM/BAM alignments to transcriptome into a separate file - GeneCounts … count reads per gene\nstring\n\n\n--quantTranscriptomeBAMcompression\n-2 to 10 transcriptome BAM compression level - -2 … no BAM output - -1 … default compression (6?) - 0 … no compression - 10 … maximum compression\ninteger, example: 1\n\n\n--quantTranscriptomeBan\nprohibit various alignment type - IndelSoftclipSingleend … prohibit indels, soft clipping and single-end alignments - compatible with RSEM - Singleend … prohibit single-end alignments\nstring, example: \"IndelSoftclipSingleend\"\n\n\n\n\n\n2-pass Mapping\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--twopassMode\n2-pass mapping mode. - None … 1-pass mapping - Basic … basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly\nstring\n\n\n--twopass1readsN\nnumber of reads to process for the 1st step. Use very large number (or default -1) to map all reads in the first step.\ninteger, example: -1\n\n\n\n\n\nWASP parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--waspOutputMode\nWASP allele-specific output type. This is re-implementation of the original WASP mappability filtering by Bryce van de Geijn, Graham McVicker, Yoav Gilad & Jonathan K Pritchard. Please cite the original WASP paper: Nature Methods 12, 1061–1063 (2015), https://www.nature.com/articles/nmeth.3582 . - SAMtag … add WASP tags to the alignments that pass WASP filtering\nstring\n\n\n\n\n\nSTARsolo (single cell RNA-seq) parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--soloType\ntype of single-cell RNA-seq - CB_UMI_Simple … (a.k.a. Droplet) one UMI and one Cell Barcode of fixed length in read2, e.g. Drop-seq and 10X Chromium. - CB_UMI_Complex … multiple Cell Barcodes of varying length, one UMI of fixed length and one adapter sequence of fixed length are allowed in read2 only (e.g. inDrop, ddSeq). - CB_samTagOut … output Cell Barcode as CR and/or CB SAm tag. No UMI counting. –readFilesIn cDNA_read1 [cDNA_read2 if paired-end] CellBarcode_read . Requires –outSAMtype BAM Unsorted [and/or SortedByCoordinate] - SmartSeq … Smart-seq: each cell in a separate FASTQ (paired- or single-end), barcodes are corresponding read-groups, no UMI sequences, alignments deduplicated according to alignment start and end (after extending soft-clipped bases)\nstring\n\n\n--soloCBwhitelist\nfile(s) with whitelist(s) of cell barcodes. Only –soloType CB_UMI_Complex allows more than one whitelist file. - None … no whitelist: all cell barcodes are allowed\nstring\n\n\n--soloCBstart\ncell barcode start base\ninteger, example: 1\n\n\n--soloCBlen\ncell barcode length\ninteger, example: 16\n\n\n--soloUMIstart\nUMI start base\ninteger, example: 17\n\n\n--soloUMIlen\nUMI length\ninteger, example: 10\n\n\n--soloBarcodeReadLength\nlength of the barcode read - 1 … equal to sum of soloCBlen+soloUMIlen - 0 … not defined, do not check\ninteger, example: 1\n\n\n--soloBarcodeMate\nidentifies which read mate contains the barcode (CB+UMI) sequence - 0 … barcode sequence is on separate read, which should always be the last file in the –readFilesIn listed - 1 … barcode sequence is a part of mate 1 - 2 … barcode sequence is a part of mate 2\ninteger, example: 0\n\n\n--soloCBposition\nposition of Cell Barcode(s) on the barcode read. Presently only works with –soloType CB_UMI_Complex, and barcodes are assumed to be on Read2. Format for each barcode: startAnchor_startPosition_endAnchor_endPosition start(end)Anchor defines the Anchor Base for the CB: 0: read start; 1: read end; 2: adapter start; 3: adapter end start(end)Position is the 0-based position with of the CB start(end) with respect to the Anchor Base String for different barcodes are separated by space. Example: inDrop (Zilionis et al, Nat. Protocols, 2017): –soloCBposition 0_0_2_-1 3_1_3_8\nstring\n\n\n--soloUMIposition\nposition of the UMI on the barcode read, same as soloCBposition Example: inDrop (Zilionis et al, Nat. Protocols, 2017): –soloCBposition 3_9_3_14\nstring\n\n\n--soloAdapterSequence\nadapter sequence to anchor barcodes. Only one adapter sequence is allowed.\nstring\n\n\n--soloAdapterMismatchesNmax\nmaximum number of mismatches allowed in adapter sequence.\ninteger, example: 1\n\n\n--soloCBmatchWLtype\nmatching the Cell Barcodes to the WhiteList - Exact … only exact matches allowed - 1MM … only one match in whitelist with 1 mismatched base allowed. Allowed CBs have to have at least one read with exact match. - 1MM_multi … multiple matches in whitelist with 1 mismatched base allowed, posterior probability calculation is used choose one of the matches. Allowed CBs have to have at least one read with exact match. This option matches best with CellRanger 2.2.0 - 1MM_multi_pseudocounts … same as 1MM_Multi, but pseudocounts of 1 are added to all whitelist barcodes. - 1MM_multi_Nbase_pseudocounts … same as 1MM_multi_pseudocounts, multimatching to WL is allowed for CBs with N-bases. This option matches best with CellRanger >= 3.0.0 - EditDist_2 … allow up to edit distance of 3 fpr each of the barcodes. May include one deletion + one insertion. Only works with –soloType CB_UMI_Complex. Matches to multiple passlist barcdoes are not allowed. Similar to ParseBio Split-seq pipeline.\nstring, example: \"1MM_multi\"\n\n\n--soloInputSAMattrBarcodeSeq\nwhen inputting reads from a SAM file (–readsFileType SAM SE/PE), these SAM attributes mark the barcode sequence (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use –soloInputSAMattrBarcodeSeq CR UR . This parameter is required when running STARsolo with input from SAM.\nstring\n\n\n--soloInputSAMattrBarcodeQual\nwhen inputting reads from a SAM file (–readsFileType SAM SE/PE), these SAM attributes mark the barcode qualities (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use –soloInputSAMattrBarcodeQual CY UY . If this parameter is ‘-’ (default), the quality ‘H’ will be assigned to all bases.\nstring\n\n\n--soloStrand\nstrandedness of the solo libraries: - Unstranded … no strand information - Forward … read strand same as the original RNA molecule - Reverse … read strand opposite to the original RNA molecule\nstring, example: \"Forward\"\n\n\n--soloFeatures\ngenomic features for which the UMI counts per Cell Barcode are collected - Gene … genes: reads match the gene transcript - SJ … splice junctions: reported in SJ.out.tab - GeneFull … full gene (pre-mRNA): count all reads overlapping genes’ exons and introns - GeneFull_ExonOverIntron … full gene (pre-mRNA): count all reads overlapping genes’ exons and introns: prioritize 100% overlap with exons - GeneFull_Ex50pAS … full gene (pre-RNA): count all reads overlapping genes’ exons and introns: prioritize >50% overlap with exons. Do not count reads with 100% exonic overlap in the antisense direction.\nstring, example: \"Gene\"\n\n\n--soloMultiMappers\ncounting method for reads mapping to multiple genes - Unique … count only reads that map to unique genes - Uniform … uniformly distribute multi-genic UMIs to all genes - Rescue … distribute UMIs proportionally to unique+uniform counts (~ first iteration of EM) - PropUnique … distribute UMIs proportionally to unique mappers, if present, and uniformly if not. - EM … multi-gene UMIs are distributed using Expectation Maximization algorithm\nstring, example: \"Unique\"\n\n\n--soloUMIdedup\ntype of UMI deduplication (collapsing) algorithm - 1MM_All … all UMIs with 1 mismatch distance to each other are collapsed (i.e. counted once). - 1MM_Directional_UMItools … follows the “directional” method from the UMI-tools by Smith, Heger and Sudbery (Genome Research 2017). - 1MM_Directional … same as 1MM_Directional_UMItools, but with more stringent criteria for duplicate UMIs - Exact … only exactly matching UMIs are collapsed. - NoDedup … no deduplication of UMIs, count all reads. - 1MM_CR … CellRanger2-4 algorithm for 1MM UMI collapsing.\nstring, example: \"1MM_All\"\n\n\n--soloUMIfiltering\ntype of UMI filtering (for reads uniquely mapping to genes) - - … basic filtering: remove UMIs with N and homopolymers (similar to CellRanger 2.2.0). - MultiGeneUMI … basic + remove lower-count UMIs that map to more than one gene. - MultiGeneUMI_All … basic + remove all UMIs that map to more than one gene. - MultiGeneUMI_CR … basic + remove lower-count UMIs that map to more than one gene, matching CellRanger > 3.0.0 . Only works with –soloUMIdedup 1MM_CR\nstring\n\n\n--soloOutFileNames\nfile names for STARsolo output: file_name_prefix gene_names barcode_sequences cell_feature_count_matrix\nstring, example: \"Solo.out/\", example: \"features.tsv\", example: \"barcodes.tsv\", example: \"matrix.mtx\"\n\n\n--soloCellFilter\ncell filtering type and parameters - None … do not output filtered cells - TopCells … only report top cells by UMI count, followed by the exact number of cells - CellRanger2.2 … simple filtering of CellRanger 2.2. Can be followed by numbers: number of expected cells, robust maximum percentile for UMI count, maximum to minimum ratio for UMI count The harcoded values are from CellRanger: nExpectedCells=3000; maxPercentile=0.99; maxMinRatio=10 - EmptyDrops_CR … EmptyDrops filtering in CellRanger flavor. Please cite the original EmptyDrops paper: A.T.L Lun et al, Genome Biology, 20, 63 (2019): https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1662-y Can be followed by 10 numeric parameters: nExpectedCells maxPercentile maxMinRatio indMin indMax umiMin umiMinFracMedian candMaxN FDR simN The harcoded values are from CellRanger: 3000 0.99 10 45000 90000 500 0.01 20000 0.01 10000\nstring, example: \"CellRanger2.2\", example: \"3000\", example: \"0.99\", example: \"10\"\n\n\n--soloOutFormatFeaturesGeneField3\nfield 3 in the Gene features.tsv file. If “-”, then no 3rd field is output.\nstring, example: \"Gene Expression\"\n\n\n--soloCellReadStats\nOutput reads statistics for each CB - Standard … standard output\nstring\n\n\n\n\n\nHTSeq arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--stranded\nWhether the data is from a strand-specific assay. ‘reverse’ means ‘yes’ with reversed strand interpretation.\nstring, default: \"yes\"\n\n\n--minimum_alignment_quality\nSkip all reads with MAPQ alignment quality lower than the given minimum value. MAPQ is the 5th column of a SAM/BAM file and its usage depends on the software used to map the reads.\ninteger, default: 10\n\n\n--type\nFeature type (3rd column in GTF file) to be used, all features of other type are ignored (default, suitable for Ensembl GTF files: exon)\nstring, example: \"exon\"\n\n\n--id_attribute\nGTF attribute to be used as feature ID (default, suitable for Ensembl GTF files: gene_id). All feature of the right type (see -t option) within the same GTF attribute will be added together. The typical way of using this option is to count all exonic reads from each gene and add the exons but other uses are possible as well. You can call this option multiple times: in that case, the combination of all attributes separated by colons (:) will be used as a unique identifier, e.g. for exons you might use -i gene_id -i exon_number.\nstring, example: \"gene_id\"\n\n\n--additional_attributes\nAdditional feature attributes (suitable for Ensembl GTF files: gene_name). Use multiple times for more than one additional attribute. These attributes are only used as annotations in the output, while the determination of how the counts are added together is done based on option -i.\nstring, example: \"gene_name\"\n\n\n--add_chromosome_info\nStore information about the chromosome of each feature as an additional attribute (e.g. colunm in the TSV output file).\nboolean_true\n\n\n--mode\nMode to handle reads overlapping more than one feature.\nstring, default: \"union\"\n\n\n--non_unique\nWhether and how to score reads that are not uniquely aligned or ambiguously assigned to features.\nstring, default: \"none\"\n\n\n--secondary_alignments\nWhether to score secondary alignments (0x100 flag).\nstring\n\n\n--supplementary_alignments\nWhether to score supplementary alignments (0x800 flag).\nstring\n\n\n--counts_output_sparse\nStore the counts as a sparse matrix (mtx, h5ad, loom).\nboolean_true"
  },
  {
    "objectID": "modules/mapping/multi_star.html#authors",
    "href": "modules/mapping/multi_star.html#authors",
    "title": "Multi star",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/mapping/cellranger_multi.html",
    "href": "modules/mapping/cellranger_multi.html",
    "title": "Cellranger multi",
    "section": "",
    "text": "ID: cellranger_multi\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/mapping/cellranger_multi.html#example-commands",
    "href": "modules/mapping/cellranger_multi.html#example-commands",
    "title": "Cellranger multi",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/cellranger_multi/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/cellranger_multi/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/cellranger_multi.html#argument-groups",
    "href": "modules/mapping/cellranger_multi.html#argument-groups",
    "title": "Cellranger multi",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput files\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe FASTQ files to be analyzed. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq: [Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz\nfile, required, example: \"mysample_S1_L001_R1_001.fastq.gz\", example: \"mysample_S1_L001_R2_001.fastq.gz\"\n\n\n--gex_reference\nGenome refence index built by Cell Ranger mkref.\nfile, required, example: \"reference_genome.tar.gz\"\n\n\n--vdj_reference\nVDJ refence index built by Cell Ranger mkref.\nfile, example: \"reference_vdj.tar.gz\"\n\n\n--feature_reference\nPath to the Feature reference CSV file, declaring Feature Barcode constructs and associated barcodes. Required only for Antibody Capture or CRISPR Guide Capture libraries. See https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/feature-bc-analysis#feature-ref for more information.\nfile, example: \"feature_reference.csv\"\n\n\n\n\n\nLibrary arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--library_id\nThe Illumina sample name to analyze. This must exactly match the ‘Sample Name’ part of the FASTQ files specified in the --input argument.\nstring, required, example: \"mysample1\"\n\n\n--library_type\nThe underlying feature type of the library. Possible values: “Gene Expression”, “VDJ”, “VDJ-T”, “VDJ-B”, “Antibody Capture”, “CRISPR Guide Capture”, “Multiplexing Capture”\nstring, required, example: \"Gene Expression\"\n\n\n--library_subsample\nOptional. The rate at which reads from the provided FASTQ files are sampled. Must be strictly greater than 0 and less than or equal to 1.\nstring, example: \"0.5\"\n\n\n--library_lanes\nLanes associated with this sample. Defaults to using all lanes.\nstring, example: \"1-4\"\n\n\n\n\n\nGene expression arguments\nArguments relevant to the analysis of gene expression data.\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--gex_expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--gex_chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--gex_secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--gex_generate_bam\nWhether to generate a BAM file.\nboolean, default: FALSE\n\n\n--gex_include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE\n\n\n\n\n\nCell multiplexing parameters\nArguments related to cell multiplexing.\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--cell_multiplex_sample_id\nA name to identify a multiplexed sample. Must be alphanumeric with hyphens and/or underscores, and less than 64 characters. Required for Cell Multiplexing libraries.\nstring\n\n\n--cell_multiplex_oligo_ids\nThe Cell Multiplexing oligo IDs used to multiplex this sample. If multiple CMOs were used for a sample, separate IDs with a pipe (e.g., CMO301|CMO302). Required for Cell Multiplexing libraries.\nstring\n\n\n--cell_multiplex_description\nA description for the sample.\nstring\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe folder to store the alignment results.\nfile, required, example: \"/path/to/output\"\n\n\n\n\n\nExecutor arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--dryrun\nIf true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.\nboolean_true"
  },
  {
    "objectID": "modules/mapping/cellranger_multi.html#authors",
    "href": "modules/mapping/cellranger_multi.html#authors",
    "title": "Cellranger multi",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)\nDries De Maeyer  (author)"
  },
  {
    "objectID": "modules/mapping/multi_star_to_h5mu.html",
    "href": "modules/mapping/multi_star_to_h5mu.html",
    "title": "Multi star to h5mu",
    "section": "",
    "text": "ID: multi_star_to_h5mu\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/mapping/multi_star_to_h5mu.html#example-commands",
    "href": "modules/mapping/multi_star_to_h5mu.html#example-commands",
    "title": "Multi star to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/multi_star_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/multi_star_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/multi_star_to_h5mu.html#argument-group",
    "href": "modules/mapping/multi_star_to_h5mu.html#argument-group",
    "title": "Multi star to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe directory created by multi_star\nfile, required, example: \"/path/to/foo\"\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/mapping/multi_star_to_h5mu.html#authors",
    "href": "modules/mapping/multi_star_to_h5mu.html#authors",
    "title": "Multi star to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (author, maintainer)\nAngela Pisco   (author)"
  },
  {
    "objectID": "modules/mapping/cellranger_count.html",
    "href": "modules/mapping/cellranger_count.html",
    "title": "Cellranger count",
    "section": "",
    "text": "ID: cellranger_count\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/mapping/cellranger_count.html#example-commands",
    "href": "modules/mapping/cellranger_count.html#example-commands",
    "title": "Cellranger count",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/cellranger_count/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/cellranger_count/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/cellranger_count.html#argument-groups",
    "href": "modules/mapping/cellranger_count.html#argument-groups",
    "title": "Cellranger count",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe fastq.gz files to align. Can also be a single directory containing fastq.gz files.\nfile, required, example: \"sample_S1_L001_R1_001.fastq.gz\", example: \"sample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nThe path to Cell Ranger reference tar.gz file. Can also be a directory.\nfile, required, example: \"reference.tar.gz\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe folder to store the alignment results.\nfile, required, example: \"/path/to/output\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--generate_bam\nWhether to generate a BAM file.\nboolean, default: TRUE\n\n\n--include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE"
  },
  {
    "objectID": "modules/mapping/cellranger_count.html#authors",
    "href": "modules/mapping/cellranger_count.html#authors",
    "title": "Cellranger count",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "modules/mapping/htseq_count_to_h5mu.html",
    "href": "modules/mapping/htseq_count_to_h5mu.html",
    "title": "Htseq count to h5mu",
    "section": "",
    "text": "ID: htseq_count_to_h5mu\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "modules/mapping/htseq_count_to_h5mu.html#example-commands",
    "href": "modules/mapping/htseq_count_to_h5mu.html#example-commands",
    "title": "Htseq count to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/htseq_count_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/htseq_count_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/htseq_count_to_h5mu.html#argument-groups",
    "href": "modules/mapping/htseq_count_to_h5mu.html#argument-groups",
    "title": "Htseq count to h5mu",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input_id\nThe obs index for the counts\nstring, required, example: \"foo\"\n\n\n--input_counts\nThe counts as a TSV file as output by HTSeq.\nfile, required, example: \"counts.tsv\"\n\n\n--reference\nThe GTF file.\nfile, required, example: \"gencode_v41_star\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/mapping/htseq_count_to_h5mu.html#authors",
    "href": "modules/mapping/htseq_count_to_h5mu.html#authors",
    "title": "Htseq count to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (author, maintainer)\nAngela Pisco   (author)"
  },
  {
    "objectID": "modules/mapping/samtools_sort.html",
    "href": "modules/mapping/samtools_sort.html",
    "title": "Samtools sort",
    "section": "",
    "text": "ID: samtools_sort\nNamespace: mapping\n\n\n\nSource\nReads are sorted by leftmost coordinates, or by read name when --sort_by_read_names is used.\nAn appropriate @HD-SO sort order header tag will be added or an existing one updated if necessary.\nNote that to generate an index file (by specifying --output_bai), the default coordinate sort must be used. Thus the --sort_by_read_names and --sort_by <TAG> options are incompatible with --output_bai."
  },
  {
    "objectID": "modules/mapping/samtools_sort.html#example-commands",
    "href": "modules/mapping/samtools_sort.html#example-commands",
    "title": "Samtools sort",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/samtools_sort/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/samtools_sort/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/samtools_sort.html#argument-groups",
    "href": "modules/mapping/samtools_sort.html#argument-groups",
    "title": "Samtools sort",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the SAM/BAM/CRAM files containing the mapped reads.\nfile, required, example: \"input.bam\"\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output_bam\nFilename to output the counts to.\nfile, required, example: \"output.bam\"\n\n\n--output_bai\nBAI-format index for BAM file.\nfile, example: \"output.bam.bai\"\n\n\n--output_format\nThe output format. By default, samtools tries to select a format based on the -o filename extension; if output is to standard output or no format can be deduced, bam is selected.\nstring, example: \"bam\"\n\n\n--compression\nCompression level, from 0 (uncompressed) to 9 (best\ninteger, example: 5\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--minimizer_cluster\nSort unmapped reads (those in chromosome “*“) by their sequence minimiser (Schleimer et al., 2003; Roberts et al., 2004), also reverse complementing as appropriate. This has the effect of collating some similar data together, improving the compressibility of the unmapped sequence. The minimiser kmer size is adjusted using the -K option. Note data compressed in this manner may need to be name collated prior to conversion back to fastq. Mapped sequences are sorted by chromosome and position.\nboolean_true\n\n\n--minimizer_kmer\nSets the kmer size to be used in the -M option.\ninteger, example: 20\n\n\n--sort_by_read_names\nSort by read names (i.e., the QNAME field) rather than by chromosomal coordinates.\nboolean_true\n\n\n--sort_by\nSort first by this value in the alignment tag, then by position or name (if also using -n).\nstring\n\n\n--no_pg\nDo not add a @PG line to the header of the output file.\nboolean_true"
  },
  {
    "objectID": "modules/mapping/samtools_sort.html#authors",
    "href": "modules/mapping/samtools_sort.html#authors",
    "title": "Samtools sort",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (author, maintainer)\nAngela Pisco   (author)"
  },
  {
    "objectID": "modules/mapping/htseq_count.html",
    "href": "modules/mapping/htseq_count.html",
    "title": "Htseq count",
    "section": "",
    "text": "ID: htseq_count\nNamespace: mapping\n\n\n\nSource\nThis script takes one or more alignment files in SAM/BAM format and a feature file in GFF format and calculates for each feature the number of reads mapping to it.\nSee http://htseq.readthedocs.io/en/master/count.html for details."
  },
  {
    "objectID": "modules/mapping/htseq_count.html#example-commands",
    "href": "modules/mapping/htseq_count.html#example-commands",
    "title": "Htseq count",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/mapping/htseq_count/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/htseq_count/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/mapping/htseq_count.html#argument-groups",
    "href": "modules/mapping/htseq_count.html#argument-groups",
    "title": "Htseq count",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the SAM/BAM files containing the mapped reads.\nfile, required, example: \"mysample1.BAM\", example: \"mysample2.BAM\"\n\n\n--reference\nPath to the GTF file containing the features.\nfile, required, example: \"reference.gtf\"\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nFilename to output the counts to.\nfile, required, example: \"htseq-count.tsv\"\n\n\n--output_delimiter\nColumn delimiter in output.\nstring, example: \"    \"\n\n\n--output_sam\nWrite out all SAM alignment records into SAM/BAM files (one per input file needed), annotating each line with its feature assignment (as an optional field with tag ‘XF’). See the -p option to use BAM instead of SAM.\nfile, example: \"mysample1_out.BAM\", example: \"mysample2_out.BAM\"\n\n\n--output_sam_format\nFormat to use with the –output_sam argument.\nstring\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--order\nSorting order of . Paired-end sequencing data must be sorted either by position or by read name, and the sorting order must be specified. Ignored for single-end data.\nstring, default: \"name\"\n\n\n--stranded\nWhether the data is from a strand-specific assay. ‘reverse’ means ‘yes’ with reversed strand interpretation.\nstring, default: \"yes\"\n\n\n--minimum_alignment_quality\nSkip all reads with MAPQ alignment quality lower than the given minimum value. MAPQ is the 5th column of a SAM/BAM file and its usage depends on the software used to map the reads.\ninteger, default: 10\n\n\n--type\nFeature type (3rd column in GTF file) to be used, all features of other type are ignored (default, suitable for Ensembl GTF files: exon)\nstring, example: \"exon\"\n\n\n--id_attribute\nGTF attribute to be used as feature ID (default, suitable for Ensembl GTF files: gene_id). All feature of the right type (see -t option) within the same GTF attribute will be added together. The typical way of using this option is to count all exonic reads from each gene and add the exons but other uses are possible as well. You can call this option multiple times: in that case, the combination of all attributes separated by colons (:) will be used as a unique identifier, e.g. for exons you might use -i gene_id -i exon_number.\nstring, example: \"gene_id\"\n\n\n--additional_attributes\nAdditional feature attributes (suitable for Ensembl GTF files: gene_name). Use multiple times for more than one additional attribute. These attributes are only used as annotations in the output, while the determination of how the counts are added together is done based on option -i.\nstring, example: \"gene_name\"\n\n\n--add_chromosome_info\nStore information about the chromosome of each feature as an additional attribute (e.g. colunm in the TSV output file).\nboolean_true\n\n\n--mode\nMode to handle reads overlapping more than one feature.\nstring, default: \"union\"\n\n\n--non_unique\nWhether and how to score reads that are not uniquely aligned or ambiguously assigned to features.\nstring, default: \"none\"\n\n\n--secondary_alignments\nWhether to score secondary alignments (0x100 flag).\nstring\n\n\n--supplementary_alignments\nWhether to score supplementary alignments (0x800 flag).\nstring\n\n\n--counts_output_sparse\nStore the counts as a sparse matrix (mtx, h5ad, loom).\nboolean_true"
  },
  {
    "objectID": "modules/mapping/htseq_count.html#authors",
    "href": "modules/mapping/htseq_count.html#authors",
    "title": "Htseq count",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (author, maintainer)\nAngela Pisco   (author)"
  },
  {
    "objectID": "modules/metadata/join_uns_to_obs.html",
    "href": "modules/metadata/join_uns_to_obs.html",
    "title": "Join uns to obs",
    "section": "",
    "text": "ID: join_uns_to_obs\nNamespace: metadata\n\n\n\nSource"
  },
  {
    "objectID": "modules/metadata/join_uns_to_obs.html#example-commands",
    "href": "modules/metadata/join_uns_to_obs.html#example-commands",
    "title": "Join uns to obs",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/metadata/join_uns_to_obs/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/metadata/join_uns_to_obs/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/metadata/join_uns_to_obs.html#argument-group",
    "href": "modules/metadata/join_uns_to_obs.html#argument-group",
    "title": "Join uns to obs",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--uns_key\n\nstring, required\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/metadata/join_uns_to_obs.html#authors",
    "href": "modules/metadata/join_uns_to_obs.html#authors",
    "title": "Join uns to obs",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/metadata/add_id.html",
    "href": "modules/metadata/add_id.html",
    "title": "Add id",
    "section": "",
    "text": "ID: add_id\nNamespace: metadata\n\n\n\nSource\nAlso allows to make .obs_names (the .obs index) unique by prefixing the values with an unique id per .h5mu file"
  },
  {
    "objectID": "modules/metadata/add_id.html#example-commands",
    "href": "modules/metadata/add_id.html#example-commands",
    "title": "Add id",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/metadata/add_id/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/metadata/add_id/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/metadata/add_id.html#argument-group",
    "href": "modules/metadata/add_id.html#argument-group",
    "title": "Add id",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the input .h5mu.\nfile, required, example: \"sample_path\"\n\n\n--input_id\nThe input id.\nstring, required\n\n\n--obs_output\nName of the .obs column where to store the id.\nstring, default: \"sample_id\"\n\n\n--output\n\nfile, example: \"output.h5mu\"\n\n\n--make_observation_keys_unique\nJoin the id to the .obs index (.obs_names).\nboolean_true"
  },
  {
    "objectID": "modules/metadata/add_id.html#authors",
    "href": "modules/metadata/add_id.html#authors",
    "title": "Add id",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/metadata/join_csv.html",
    "href": "modules/metadata/join_csv.html",
    "title": "Join csv",
    "section": "",
    "text": "ID: join_csv\nNamespace: metadata\n\n\n\nSource"
  },
  {
    "objectID": "modules/metadata/join_csv.html#example-commands",
    "href": "modules/metadata/join_csv.html#example-commands",
    "title": "Join csv",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/metadata/join_csv/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/metadata/join_csv/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/metadata/join_csv.html#argument-groups",
    "href": "modules/metadata/join_csv.html#argument-groups",
    "title": "Join csv",
    "section": "Argument groups",
    "text": "Argument groups\n\nMuData Input\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obs_key\nObs column name where the sample id can be found for each observation to join on. Useful when adding metadata to concatenated samples. Mutually exclusive with --var_key.”\nstring\n\n\n--var_key\nVar column name where the sample id can be found for each variable to join on. Mutually exclusive with --obs_key.”\nstring\n\n\n\n\n\nMuData Output\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n\n\n\nMetadata Input\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input_csv\n.csv file containing metadata\nfile, required, example: \"metadata.csv\"\n\n\n--csv_key\ncolumn of the the csv that corresponds to the sample id.\nstring, default: \"id\""
  },
  {
    "objectID": "modules/metadata/join_csv.html#authors",
    "href": "modules/metadata/join_csv.html#authors",
    "title": "Join csv",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author)"
  },
  {
    "objectID": "modules/report/mermaid.html",
    "href": "modules/report/mermaid.html",
    "title": "Mermaid",
    "section": "",
    "text": "ID: mermaid\nNamespace: report\n\n\n\nSource\nSee https://mermaid-js.github.io/mermaid/#/Tutorials. This component uses the external mermaid.ink service to generate visual networks."
  },
  {
    "objectID": "modules/report/mermaid.html#example-commands",
    "href": "modules/report/mermaid.html#example-commands",
    "title": "Mermaid",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/report/mermaid/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/report/mermaid/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/report/mermaid.html#argument-group",
    "href": "modules/report/mermaid.html#argument-group",
    "title": "Mermaid",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput directory\nfile, required\n\n\n--output\nGenerated network as output.\nfile, required"
  },
  {
    "objectID": "modules/report/mermaid.html#authors",
    "href": "modules/report/mermaid.html#authors",
    "title": "Mermaid",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/transfer/publish.html",
    "href": "modules/transfer/publish.html",
    "title": "Publish",
    "section": "",
    "text": "ID: publish\nNamespace: transfer\n\n\n\nSource"
  },
  {
    "objectID": "modules/transfer/publish.html#example-commands",
    "href": "modules/transfer/publish.html#example-commands",
    "title": "Publish",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/transfer/publish/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transfer/publish/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/transfer/publish.html#argument-group",
    "href": "modules/transfer/publish.html#argument-group",
    "title": "Publish",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput filename\nfile, required\n\n\n--output\nOutput filename\nfile, required"
  },
  {
    "objectID": "modules/transfer/publish.html#authors",
    "href": "modules/transfer/publish.html#authors",
    "title": "Publish",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (maintainer)"
  },
  {
    "objectID": "modules/files/make_params.html",
    "href": "modules/files/make_params.html",
    "title": "Make params",
    "section": "",
    "text": "ID: make_params\nNamespace: files\n\n\n\nSource"
  },
  {
    "objectID": "modules/files/make_params.html#example-commands",
    "href": "modules/files/make_params.html#example-commands",
    "title": "Make params",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/files/make_params/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/files/make_params/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/files/make_params.html#argument-group",
    "href": "modules/files/make_params.html#argument-group",
    "title": "Make params",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--base_dir\nBase directory to search recursively\nfile, required, example: \"/path/to/dir\"\n\n\n--pattern\nAn optional regular expression. Only file names which match the regular expression will be matched.\nstring, required, example: \"*.fastq.gz\"\n\n\n--n_dirname_drop\nFor every matched file, the parent directory will be traversed N times.\ninteger, default: 0\n\n\n--n_basename_id\nThe unique identifiers will consist of at least N dirnames.\ninteger, default: 0\n\n\n--id_name\nThe name for storing the identifier field in the yaml.\nstring, default: \"id\"\n\n\n--path_name\nThe name for storing the path field in the yaml.\nstring, default: \"path\"\n\n\n--group_name\nTop level name for the group of entries.\nstring, example: \"param_list\"\n\n\n--output\nOutput YAML file.\nfile, required, example: \"params.yaml\""
  },
  {
    "objectID": "modules/files/make_params.html#authors",
    "href": "modules/files/make_params.html#authors",
    "title": "Make params",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (maintainer, author)"
  },
  {
    "objectID": "modules/viash/ns_list.html",
    "href": "modules/viash/ns_list.html",
    "title": "Ns list",
    "section": "",
    "text": "ID: ns_list\nNamespace: viash\n\n\n\nSource"
  },
  {
    "objectID": "modules/viash/ns_list.html#example-commands",
    "href": "modules/viash/ns_list.html#example-commands",
    "title": "Ns list",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/viash/ns_list/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/viash/ns_list/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/viash/ns_list.html#argument-group",
    "href": "modules/viash/ns_list.html#argument-group",
    "title": "Ns list",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nRepository url (currently only public repositories are supported)\nstring, required, example: \"input.yaml\"\n\n\n--output\nyaml file from viash ns list\nfile, required, example: \"output.yaml\"\n\n\n--branch\nGit branch to parse\nstring, default: \"main\""
  },
  {
    "objectID": "modules/viash/ns_list.html#authors",
    "href": "modules/viash/ns_list.html#authors",
    "title": "Ns list",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont  (maintainer)"
  },
  {
    "objectID": "modules/dataflow/concat.html",
    "href": "modules/dataflow/concat.html",
    "title": "Concat",
    "section": "",
    "text": "ID: concat\nNamespace: dataflow\n\n\n\nSource"
  },
  {
    "objectID": "modules/dataflow/concat.html#example-commands",
    "href": "modules/dataflow/concat.html#example-commands",
    "title": "Concat",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/dataflow/concat/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dataflow/concat/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/dataflow/concat.html#argument-group",
    "href": "modules/dataflow/concat.html#argument-group",
    "title": "Concat",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPaths to the different samples to be concatenated.\nfile, required, example: \"sample_paths\"\n\n\n--input_id\nNames of the different samples that have to be concatenated. Must be specified when using ‘–mode move’. In this case, the ids will be used for the columns names of the dataframes registring the conflicts. If specified, must be of same length as --input.\nstring\n\n\n--output\n\nfile, example: \"output.h5mu\"\n\n\n--obs_sample_name\nName of the .obs key under which to add the sample names.\nstring, default: \"sample_id\"\n\n\n--compression\nThe compression format to be used on the final h5mu object.\nstring, default: \"gzip\"\n\n\n--other_axis_mode\nHow to handle the merging of other axis (var, obs, …). - None: keep no data - same: only keep elements of the matrices which are the same in each of the samples - unique: only keep elements for which there is only 1 possible value (1 value that can occur in multiple samples) - first: keep the annotation from the first sample - only: keep elements that show up in only one of the objects (1 unique element in only 1 sample) - move: identical to ‘same’, but moving the conflicting values to .varm or .obsm\nstring, default: \"move\""
  },
  {
    "objectID": "modules/dataflow/concat.html#authors",
    "href": "modules/dataflow/concat.html#authors",
    "title": "Concat",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/dataflow/merge.html",
    "href": "modules/dataflow/merge.html",
    "title": "Merge",
    "section": "",
    "text": "ID: merge\nNamespace: dataflow\n\n\n\nSource"
  },
  {
    "objectID": "modules/dataflow/merge.html#example-commands",
    "href": "modules/dataflow/merge.html#example-commands",
    "title": "Merge",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/dataflow/merge/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dataflow/merge/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/dataflow/merge.html#argument-group",
    "href": "modules/dataflow/merge.html#argument-group",
    "title": "Merge",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPaths to the single-modality .h5mu files that need to be combined\nfile, required, default: \"sample_paths\"\n\n\n--output\nPath to the output file.\nfile, default: \"output.h5mu\"\n\n\n--compression\nThe compression format to be used on the final h5mu object.\nstring, default: \"gzip\""
  },
  {
    "objectID": "modules/dataflow/merge.html#authors",
    "href": "modules/dataflow/merge.html#authors",
    "title": "Merge",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/dataflow/split_modalities.html",
    "href": "modules/dataflow/split_modalities.html",
    "title": "Split modalities",
    "section": "",
    "text": "ID: split_modalities\nNamespace: dataflow\n\n\n\nSource"
  },
  {
    "objectID": "modules/dataflow/split_modalities.html#example-commands",
    "href": "modules/dataflow/split_modalities.html#example-commands",
    "title": "Split modalities",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/dataflow/split_modalities/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dataflow/split_modalities/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/dataflow/split_modalities.html#argument-group",
    "href": "modules/dataflow/split_modalities.html#argument-group",
    "title": "Split modalities",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to a single .h5mu file.\nfile, required, default: \"sample_path\"\n\n\n--output\nOutput directory containing multiple h5mu files.\nfile, required, example: \"/path/to/output\"\n\n\n--output_types\nA csv containing the base filename and modality type per output file.\nfile, required, example: \"types.csv\"\n\n\n--compression\nThe compression format to be used on the final h5mu object.\nstring, default: \"gzip\""
  },
  {
    "objectID": "modules/dataflow/split_modalities.html#authors",
    "href": "modules/dataflow/split_modalities.html#authors",
    "title": "Split modalities",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "modules/convert/from_10xmtx_to_h5mu.html",
    "href": "modules/convert/from_10xmtx_to_h5mu.html",
    "title": "From 10xmtx to h5mu",
    "section": "",
    "text": "ID: from_10xmtx_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/convert/from_10xmtx_to_h5mu.html#example-commands",
    "href": "modules/convert/from_10xmtx_to_h5mu.html#example-commands",
    "title": "From 10xmtx to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/convert/from_10xmtx_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_10xmtx_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/convert/from_10xmtx_to_h5mu.html#argument-group",
    "href": "modules/convert/from_10xmtx_to_h5mu.html#argument-group",
    "title": "From 10xmtx to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput mtx folder\nfile, required, example: \"input_dir_containing_gz_files\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/convert/from_10xmtx_to_h5mu.html#authors",
    "href": "modules/convert/from_10xmtx_to_h5mu.html#authors",
    "title": "From 10xmtx to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/convert/from_bdrhap_to_h5mu.html",
    "href": "modules/convert/from_bdrhap_to_h5mu.html",
    "title": "From bdrhap to h5mu",
    "section": "",
    "text": "ID: from_bdrhap_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/convert/from_bdrhap_to_h5mu.html#example-commands",
    "href": "modules/convert/from_bdrhap_to_h5mu.html#example-commands",
    "title": "From bdrhap to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/convert/from_bdrhap_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_bdrhap_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/convert/from_bdrhap_to_h5mu.html#argument-groups",
    "href": "modules/convert/from_bdrhap_to_h5mu.html#argument-groups",
    "title": "From bdrhap to h5mu",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nA sample ID.\nstring, required, example: \"my_id\"\n\n\n--input\nThe output of a BD Rhapsody workflow.\nfile, required, example: \"input_dir\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "modules/convert/from_bdrhap_to_h5mu.html#authors",
    "href": "modules/convert/from_bdrhap_to_h5mu.html#authors",
    "title": "From bdrhap to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/convert/from_10xh5_to_h5mu.html",
    "href": "modules/convert/from_10xh5_to_h5mu.html",
    "title": "From 10xh5 to h5mu",
    "section": "",
    "text": "ID: from_10xh5_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/convert/from_10xh5_to_h5mu.html#example-commands",
    "href": "modules/convert/from_10xh5_to_h5mu.html#example-commands",
    "title": "From 10xh5 to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/convert/from_10xh5_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_10xh5_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/convert/from_10xh5_to_h5mu.html#argument-groups",
    "href": "modules/convert/from_10xh5_to_h5mu.html#argument-groups",
    "title": "From 10xh5 to h5mu",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nA 10x h5 file as generated by Cell Ranger.\nfile, required, example: \"raw_feature_bc_matrix.h5\"\n\n\n--input_metrics_summary\nA metrics summary csv file as generated by Cell Ranger.\nfile, example: \"metrics_cellranger.h5\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--uns_metrics\nName of the .uns slot under which to QC metrics (if any).\nstring, default: \"metrics_cellranger\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_genes\nMinimum number of counts required for a cell to pass filtering.\ninteger, example: 100\n\n\n--min_counts\nMinimum number of genes expressed required for a cell to pass filtering.\ninteger, example: 1000"
  },
  {
    "objectID": "modules/convert/from_10xh5_to_h5mu.html#authors",
    "href": "modules/convert/from_10xh5_to_h5mu.html#authors",
    "title": "From 10xh5 to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/convert/velocyto_to_h5mu.html",
    "href": "modules/convert/velocyto_to_h5mu.html",
    "title": "Velocyto to h5mu",
    "section": "",
    "text": "ID: velocyto_to_h5mu\nNamespace: convert\n\n\n\nSource\nIf an input h5mu file is also provided, the velocity h5ad object will get added to that h5mu instead."
  },
  {
    "objectID": "modules/convert/velocyto_to_h5mu.html#example-commands",
    "href": "modules/convert/velocyto_to_h5mu.html#example-commands",
    "title": "Velocyto to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/convert/velocyto_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/velocyto_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/convert/velocyto_to_h5mu.html#argument-groups",
    "href": "modules/convert/velocyto_to_h5mu.html#argument-groups",
    "title": "Velocyto to h5mu",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input_loom\nPath to the input loom file.\nfile, required, example: \"input.loom\"\n\n\n--input_h5mu\nIf a MuData file is provided,\nfile, example: \"input.h5mu\"\n\n\n--modality\nThe name of the modality to operate on.\nstring, default: \"rna_velocity\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nPath to the output MuData file.\nfile, example: \"output.h5mu\"\n\n\n--layer_spliced\nOutput layer for the spliced reads.\nstring, default: \"velo_spliced\"\n\n\n--layer_unspliced\nOutput layer for the unspliced reads.\nstring, default: \"velo_unspliced\"\n\n\n--layer_ambiguous\nOutput layer for the ambiguous reads.\nstring, default: \"velo_ambiguous\""
  },
  {
    "objectID": "modules/convert/velocyto_to_h5mu.html#authors",
    "href": "modules/convert/velocyto_to_h5mu.html#authors",
    "title": "Velocyto to h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer, author)\nRobrecht Cannoodt   (author)\nAngela Pisco   (contributor)"
  },
  {
    "objectID": "modules/convert/from_h5ad_to_h5mu.html",
    "href": "modules/convert/from_h5ad_to_h5mu.html",
    "title": "From h5ad to h5mu",
    "section": "",
    "text": "ID: from_h5ad_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/convert/from_h5ad_to_h5mu.html#example-commands",
    "href": "modules/convert/from_h5ad_to_h5mu.html#example-commands",
    "title": "From h5ad to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/convert/from_h5ad_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_h5ad_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/convert/from_h5ad_to_h5mu.html#argument-group",
    "href": "modules/convert/from_h5ad_to_h5mu.html#argument-group",
    "title": "From h5ad to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5ad files\nfile, required, default: \"input.h5ad\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput MuData file.\nfile, default: \"output.h5mu\""
  },
  {
    "objectID": "modules/convert/from_h5ad_to_h5mu.html#authors",
    "href": "modules/convert/from_h5ad_to_h5mu.html#authors",
    "title": "From h5ad to h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/convert/from_cellranger_multi_to_h5mu.html",
    "href": "modules/convert/from_cellranger_multi_to_h5mu.html",
    "title": "From cellranger multi to h5mu",
    "section": "",
    "text": "ID: from_cellranger_multi_to_h5mu\nNamespace: convert\n\n\n\nSource\nBy default, will map the following library type names to modality names: - Gene Expression: rna - Peaks: atac - Antibody Capture: prot - VDJ: vdj - VDJ-T: vdj_t - VDJ-B: vdj_b - CRISPR Guide Capture: crispr - Multiplexing Capture: hashing\nOther library types have their whitepace removed and dashes replaced by underscores to generate the modality name.\nCurrently does not allow parsing the output from cell barcode demultiplexing."
  },
  {
    "objectID": "modules/convert/from_cellranger_multi_to_h5mu.html#example-commands",
    "href": "modules/convert/from_cellranger_multi_to_h5mu.html#example-commands",
    "title": "From cellranger multi to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/convert/from_cellranger_multi_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_cellranger_multi_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/convert/from_cellranger_multi_to_h5mu.html#argument-group",
    "href": "modules/convert/from_cellranger_multi_to_h5mu.html#argument-group",
    "title": "From cellranger multi to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput folder. Must contain the output from a cellranger multi run.\nfile, required, example: \"input_dir_containing_modalities\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--uns_metrics\nName of the .uns slot under which to QC metrics (if any).\nstring, default: \"metrics_cellranger\""
  },
  {
    "objectID": "modules/convert/from_cellranger_multi_to_h5mu.html#authors",
    "href": "modules/convert/from_cellranger_multi_to_h5mu.html#authors",
    "title": "From cellranger multi to h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/convert/from_bd_to_10x_molecular_barcode_tags.html",
    "href": "modules/convert/from_bd_to_10x_molecular_barcode_tags.html",
    "title": "From bd to 10x molecular barcode tags",
    "section": "",
    "text": "ID: from_bd_to_10x_molecular_barcode_tags\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/convert/from_bd_to_10x_molecular_barcode_tags.html#example-commands",
    "href": "modules/convert/from_bd_to_10x_molecular_barcode_tags.html#example-commands",
    "title": "From bd to 10x molecular barcode tags",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/convert/from_bd_to_10x_molecular_barcode_tags/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_bd_to_10x_molecular_barcode_tags/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/convert/from_bd_to_10x_molecular_barcode_tags.html#argument-group",
    "href": "modules/convert/from_bd_to_10x_molecular_barcode_tags.html#argument-group",
    "title": "From bd to 10x molecular barcode tags",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput SAM or BAM file.\nfile, required, example: \"input.bam\"\n\n\n--output\nOutput alignment file.\nfile, example: \"output.sam\"\n\n\n--bam\nOutput a BAM file.\nboolean_true\n\n\n--threads\nNumber of threads\ninteger"
  },
  {
    "objectID": "modules/convert/from_bd_to_10x_molecular_barcode_tags.html#authors",
    "href": "modules/convert/from_bd_to_10x_molecular_barcode_tags.html#authors",
    "title": "From bd to 10x molecular barcode tags",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "modules/convert/from_h5mu_to_h5ad.html",
    "href": "modules/convert/from_h5mu_to_h5ad.html",
    "title": "From h5mu to h5ad",
    "section": "",
    "text": "ID: from_h5mu_to_h5ad\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "modules/convert/from_h5mu_to_h5ad.html#example-commands",
    "href": "modules/convert/from_h5mu_to_h5ad.html#example-commands",
    "title": "From h5mu to h5ad",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/convert/from_h5mu_to_h5ad/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_h5mu_to_h5ad/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/convert/from_h5mu_to_h5ad.html#argument-group",
    "href": "modules/convert/from_h5mu_to_h5ad.html#argument-group",
    "title": "From h5mu to h5ad",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput MuData file\nfile, required, default: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput AnnData file.\nfile, default: \"output.h5ad\"\n\n\n--compression\nThe compression format to be used on the final h5ad object.\nstring, default: \"gzip\""
  },
  {
    "objectID": "modules/convert/from_h5mu_to_h5ad.html#authors",
    "href": "modules/convert/from_h5mu_to_h5ad.html#authors",
    "title": "From h5mu to h5ad",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "modules/quarto/generate_documentation_qmd.html",
    "href": "modules/quarto/generate_documentation_qmd.html",
    "title": "Generate documentation qmd",
    "section": "",
    "text": "ID: generate_documentation_qmd\nNamespace: quarto\n\n\n\nSource"
  },
  {
    "objectID": "modules/quarto/generate_documentation_qmd.html#example-commands",
    "href": "modules/quarto/generate_documentation_qmd.html#example-commands",
    "title": "Generate documentation qmd",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/quarto/generate_documentation_qmd/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/quarto/generate_documentation_qmd/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/quarto/generate_documentation_qmd.html#argument-groups",
    "href": "modules/quarto/generate_documentation_qmd.html#argument-groups",
    "title": "Generate documentation qmd",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput project\nfile, required, example: \"/path/to/my_project\"\n\n\n--template\n“Jinja template that can be used to customize the .qmd. By default will use the included template.”\nfile\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput website\nfile, required, example: \"/path/to/my_website\"\n\n\n--dest_path\nTemplate for output paths\nstring, default: \"{type}s/{namespace}/{name}.qmd\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--clean\nWhether or not to start from a clean directory.\nboolean_true\n\n\n--write_index\nWhether or not to also create an index file.\nboolean_true\n\n\n--git_repo\nGit repo\nstring, required\n\n\n--git_tag\nGit tag\nstring, required\n\n\n--git_browse_url\nThe base url for browsing a file.\nstring"
  },
  {
    "objectID": "modules/quarto/generate_documentation_qmd.html#authors",
    "href": "modules/quarto/generate_documentation_qmd.html#authors",
    "title": "Generate documentation qmd",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "modules/quarto/viash_configs_to_qmd.html",
    "href": "modules/quarto/viash_configs_to_qmd.html",
    "title": "Viash configs to qmd",
    "section": "",
    "text": "ID: viash_configs_to_qmd\nNamespace: quarto\n\n\n\nSource"
  },
  {
    "objectID": "modules/quarto/viash_configs_to_qmd.html#example-commands",
    "href": "modules/quarto/viash_configs_to_qmd.html#example-commands",
    "title": "Viash configs to qmd",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/quarto/viash_configs_to_qmd/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/quarto/viash_configs_to_qmd/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/quarto/viash_configs_to_qmd.html#argument-group",
    "href": "modules/quarto/viash_configs_to_qmd.html#argument-group",
    "title": "Viash configs to qmd",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nyaml file from viash ns list\nfile, required, example: \"input.yaml\"\n\n\n--output\nOutput directory\nfile, required\n\n\n--build_dir\nOutput location of build viash components, relative to the root of the repository.\nstring, default: \"target/nextflow/\"\n\n\n--git_tag\nOverwrite git tag\nstring"
  },
  {
    "objectID": "modules/quarto/viash_configs_to_qmd.html#authors",
    "href": "modules/quarto/viash_configs_to_qmd.html#authors",
    "title": "Viash configs to qmd",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont  (maintainer)"
  },
  {
    "objectID": "modules/cluster/leiden.html",
    "href": "modules/cluster/leiden.html",
    "title": "Leiden",
    "section": "",
    "text": "ID: leiden\nNamespace: cluster\n\n\n\nSource\nLeiden is an improved version of the Louvain algorithm [Blondel08]. It has been proposed for single-cell analysis by [Levine15]. This requires having ran neighbors/find_neighbors or neighbors/bbknn first.\nBlondel08: Blondel et al. (2008), Fast unfolding of communities in large networks, J. Stat. Mech.\nLevine15: Levine et al. (2015), Data-Driven Phenotypic Dissection of AML Reveals Progenitor-like Cells that Correlate with Prognosis, Cell.\nTraag18: Traag et al. (2018), From Louvain to Leiden: guaranteeing well-connected communities arXiv.\nWolf18: Wolf et al. (2018), Scanpy: large-scale single-cell gene expression data analysis, Genome Biology."
  },
  {
    "objectID": "modules/cluster/leiden.html#example-commands",
    "href": "modules/cluster/leiden.html#example-commands",
    "title": "Leiden",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/cluster/leiden/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/cluster/leiden/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/cluster/leiden.html#argument-group",
    "href": "modules/cluster/leiden.html#argument-group",
    "title": "Leiden",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput file.\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obsp_connectivities\nIn which .obsp slot the neighbor connectivities can be found.\nstring, default: \"connectivities\"\n\n\n--output\nOutput file.\nfile, required, example: \"output.h5mu\"\n\n\n--obs_name\nName of the .obs key under which to add the cluster labels.\nstring, default: \"leiden\"\n\n\n--resolution\nA parameter value controlling the coarseness of the clustering. Higher values lead to more clusters.\ndouble, default: 1"
  },
  {
    "objectID": "modules/cluster/leiden.html#authors",
    "href": "modules/cluster/leiden.html#authors",
    "title": "Leiden",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "modules/correction/cellbender_remove_background.html",
    "href": "modules/correction/cellbender_remove_background.html",
    "title": "Cellbender remove background",
    "section": "",
    "text": "ID: cellbender_remove_background\nNamespace: correction\n\n\n\nSource\nThis module removes counts due to ambient RNA molecules and random barcode swapping from (raw) UMI-based scRNA-seq count matrices. At the moment, only the count matrices produced by the CellRanger count pipeline is supported. Support for additional tools and protocols will be added in the future. A quick start tutorial can be found here.\nFleming et al. 2022, bioRxiv."
  },
  {
    "objectID": "modules/correction/cellbender_remove_background.html#example-commands",
    "href": "modules/correction/cellbender_remove_background.html#example-commands",
    "title": "Cellbender remove background",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script target/nextflow/correction/cellbender_remove_background/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script target/nextflow/correction/cellbender_remove_background/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "modules/correction/cellbender_remove_background.html#argument-groups",
    "href": "modules/correction/cellbender_remove_background.html#argument-groups",
    "title": "Cellbender remove background",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file.\nfile, required, example: \"input.h5mu\"\n\n\n--modality\nList of modalities to process.\nstring, default: \"rna\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nFull count matrix as an h5mu file, with background RNA removed. This file contains all the original droplet barcodes.\nfile, required, example: \"output.h5\"\n\n\n--layer_output\nOutput layer\nstring, default: \"corrected\"\n\n\n--obs_latent_rt_efficiency\n\nstring, default: \"latent_rt_efficiency\"\n\n\n--obs_latent_cell_probability\n\nstring, default: \"latent_cell_probability\"\n\n\n--obs_latent_scale\n\nstring, default: \"latent_scale\"\n\n\n--var_ambient_expression\n\nstring, default: \"ambient_expression\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--expected_cells\nNumber of cells expected in the dataset (a rough estimate within a factor of 2 is sufficient).\ninteger, example: 1000\n\n\n--total_droplets_included\nThe number of droplets from the rank-ordered UMI plot that will be analyzed. The largest ‘total_droplets’ droplets will have their cell probabilities inferred as an output.\ninteger, example: 25000\n\n\n--expected_cells_from_qc\nWill use the Cell Ranger QC to determine the estimated number of cells\nboolean, default: TRUE\n\n\n--model\nWhich model is being used for count data. ‘simple’ does not model either ambient RNA or random barcode swapping (for debugging purposes – not recommended). ‘ambient’ assumes background RNA is incorporated into droplets. ‘swapping’ assumes background RNA comes from random barcode swapping. ‘full’ uses a combined ambient and swapping model.\nstring, default: \"full\"\n\n\n--epochs\nNumber of epochs to train.\ninteger, default: 150\n\n\n--low_count_threshold\nDroplets with UMI counts below this number are completely excluded from the analysis. This can help identify the correct prior for empty droplet counts in the rare case where empty counts are extremely high (over 200).\ninteger, default: 15\n\n\n--z_dim\nDimension of latent variable z.\ninteger, default: 100\n\n\n--z_layers\nDimension of hidden layers in the encoder for z.\ninteger, default: 500\n\n\n--training_fraction\nTraining detail: the fraction of the data used for training. The rest is never seen by the inference algorithm. Speeds up learning.\ndouble, default: 0.9\n\n\n--empty_drop_training_fraction\nTraining detail: the fraction of the training data each epoch that is drawn (randomly sampled) from surely empty droplets.\ndouble, default: 0.5\n\n\n--fpr\nTarget false positive rate in (0, 1). A false positive is a true signal count that is erroneously removed. More background removal is accompanied by more signal removal at high values of FPR. You can specify multiple values, which will create multiple output files.\ndouble, default: 0.01\n\n\n--exclude_antibody_capture\nIncluding the flag –exclude-antibody-capture will cause remove-background to operate on gene counts only, ignoring other features.\nboolean_true\n\n\n--learning_rate\nTraining detail: lower learning rate for inference. A OneCycle learning rate schedule is used, where the upper learning rate is ten times this value. (For this value, probably do not exceed 1e-3).\ndouble, example: 1e-04\n\n\n--cuda\nIncluding the flag –cuda will run the inference on a GPU.\nboolean_true"
  },
  {
    "objectID": "modules/correction/cellbender_remove_background.html#authors",
    "href": "modules/correction/cellbender_remove_background.html#authors",
    "title": "Cellbender remove background",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "contributing/project_structure.html",
    "href": "contributing/project_structure.html",
    "title": "Project structure",
    "section": "",
    "text": "The root of the repository contains three main folders:\n\nsrc, which contains the source code for individual components.\nThe workflows folder containing the implementations of the pipelines (combining one or more components).\n(optionally) the target folder\n\nEach subfolder from src contains a Viash namespace, a logical grouping of pipeline components that perform a similar function. Within each namespace, subfolders designate individual pipeline components. For example ./src/convert/from_bdrhap_to_h5ad contains the implementation for a component from_bdrhap_to_h5ad which is grouped together with other components such as from_10xmtx_to_h5mu into a namespace convert. In a similar manner as grouping components into namespaces, pipelines are grouped together into folders. However, these are not component namespaces and as such do not interact with viash ns commands.\nAs will become apparent later on, Viash not only provides commands to perform operations on individual components, but also on groups of components in a namespace and all components in a project. As a rule of thumb, the basic Viash commands (like ./bin/viash test) are designated for running commands on individual components, while ns commands are (./bin/viash ns test) are for namespaces. When cloning a fresh repository, there will be no target folder present. This is because the target folder will only be created after components have been build."
  },
  {
    "objectID": "contributing/project_structure.html#branching-strategy",
    "href": "contributing/project_structure.html#branching-strategy",
    "title": "Project structure",
    "section": "Branching strategy",
    "text": "Branching strategy\n\n\n\n\n%%{init: { 'logLevel': 'debug', 'theme': 'default'} } }%%\ngitGraph\n  commit id: \"initial commit\"\n  branch main_build\n  commit id: \"CI build\"\n  checkout main\n  commit\n  checkout main_build\n  merge main\n  checkout main\n  branch feature_a\n  branch feature_b\n  checkout feature_a\n  commit\n  commit\n  checkout main\n  commit id: \"#release 0.1\" type: HIGHLIGHT\n  checkout main_build\n  merge main\n  checkout main\n  branch release\n  commit tag: \"0.1\"\n  checkout main\n  commit\n  checkout feature_b\n  commit\n  commit\n  checkout feature_a\n  commit\n  checkout main\n  merge feature_a\n  checkout main_build\n  merge main\n  checkout main\n  checkout feature_b\n  commit\n  checkout main\n  merge feature_b\n  checkout main_build\n  merge main\n  checkout release\n  merge main tag: \"0.2\"\n\n\n\n\n\n\n\n\nThe develoment version of openpipelines is available on the main branch. This is where all new code should be merged into by creating a pull request. Once a pull request has been approved and merged, Github Actions CI will automatically build all components (creating the target directory) and push the result to the main_build branch. In essence, the main_build branch is a copy of the main branch, but also containing the build components. Once it is time to create a openpipelines release, the Github CI release workflow is manually triggered, the components on the main branch will be build and tested. Then, the result will be pushed to the release branch and the integration tests will be run. If all tests succeeded, a new github tag and release can be created manually from the release branch."
  },
  {
    "objectID": "contributing/creating_components.html",
    "href": "contributing/creating_components.html",
    "title": "Creating components",
    "section": "",
    "text": "A common file format\nOne of the core principals of OpenPipelines is to use MuData as a common data format troughout the whole pipeline. This means that the input and output for most components and workflows will be a MuData file and converters from and to other common data formats are provided to improve compatibility with downstream applications. Choosing a common data format greatly diminishes the development complexity because it facilitates interfacing between different tools in a pipeline without needing to convert multiple times.\nMuData is a format to store annotated multimodal data. It is derived from the AnnData format. If you are unfamiliar with AnnData or MuData, it is recommended to read up on AnnData first as it is the unimodal counterpart of MuData. MuData can be roughly described as collection of several AnnData objects (stored as a associative array in the .mod attribute). MuData provides a hierarchical way to store the data:\nMuData\n├─ .mod\n│  ├─ modality_1 (AnnData Object)\n│     ├─ .X\n│     ├─ .layers\n│         ├─ layer_1 \n│         ├─ ...\n│     ├─ .var\n│     ├─ .obs\n│     ├─ .obsm\n│     ├─ .varm\n│     ├─ .uns\n│  ├─ modality_1 (AnnData Object)\n├─ .var\n├─ .obs\n├─ .obms\n├─ .varm\n├─ .uns\n\n.mod: an associative array of AnnData objects. Used in OpenPipelines to store the different modalities (CITE-seq, RNA abundance, …)\n.X and .layers: matrices storing the measurements with the columns being the variables measured and the rows being the observations (cells in most cases).\n.var: metadata for the variables (i.e. annotation for the columns of .X or any matrix in .layers). The number of rows in the .var datafame (or the length of each entry in the dictionairy) is equal to the number of columns in the measurement matrices.\n.obs: metadata for the observations (i.e. annotation for the rows of .X or any matrix in .layers). The number of rows in the .obs datafame (or the length of each entry in the dictionairy) is equal to the number of rows in the measurement matrices.\nvarm: multi-dimensional the variable annotation. A key-dataframe mapping where the number of rows in each dataframe is equal to the number of columns in the measurement matrices.\nobsm: multi-dimensional the observation annotation. A key-dataframe mapping where the number of rows in each dataframe is equal to the number of rows in the measurement matrices.\n.uns: A mapping where no restrictions are enforced on the dimensions of the data.\n\n\n\nBuilding components from their source\nWhen running or testing individual components, it is not necessary to execute an extra command to run the build step, viash test and viash run will build the component on the fly. However, before integrating components into a pipeline, you will need to build the components. More specifically, openpipelines uses Nextflow to combine components into pipelines, so we need to have at least the components build for nextflow platform as target. The easiest method to build the components is to use:\nviash ns build --parallel --setup cachedbuild\nAfter using .viash ns build, the target folder will be populated with three subfolders, corresponding to the build platforms that viash supports: native, docker and nextflow. In contrast to ./bin/viash build, viash_build will use all of the platforms defined in each of the components configuration instead of the first one. Keep in mind that running ./bin/viash_build will not always cause a component to be re-build completely. Caching mechanisms in the docker platform for example will make sure only components for which alterations have been made will be build, significantly reducing build times. In summary, using ./bin/viash_build makes sure that the latest build of components are available before starting to integrate them in pipelines.\nBuilding an individual component can still be useful, for example when debugging a component for which the build fails or if you want to create a standalone executable for a component to execute it without the need to use viash. To build an individual component, ./bin/viash build can be used. Note that the default build directory of this viash base command is output, which is not the location where build components will be imported from when integrating them in pipelines. Using the --output argument, you can set it to any directory you want, for example:\n./bin/viash build ./src/filter/do_filter/config.vsh.yaml -o ./target/native/filter/do_filter/ -p native\n\n\nContainerization\nOne of the key benefits of using Viash is that containers can be created that gather dependencies per component, which avoids building one container that has to encorporate all dependencies for a pipeline together. The containers for a single component can be reduced in size, defining the minimal requirements to run the component. That being said, building containers from scratch can be labour intensive and error prone, with base containers from reputable publishers often benefiting from improved reliability and security. Hence, a balance has to be made between reducing the container’s size and adding many dependencies to a small base container.\nThe preferred containerization setup in OpenPipelines uses the following guidelines:\n\nChoose a base container from a reputable source and use its latest version\nDo not use base containers that have not been updated in a while\nUse package managers to install dependencies as much as possible\nAvoid building depdencies from source.\n\nExamples of base containers that are currently being used are:\n\npython:3.11 for python environments\nubuntu:focal for general linux environments and bash scripts\neddelbuettel/r2u:22.04 for R\nnvcr.io/nvidia/pytorch:22.09-py3 for using GPU accelerated calculations using pytorch in python"
  },
  {
    "objectID": "contributing/getting_started.html",
    "href": "contributing/getting_started.html",
    "title": "Getting started",
    "section": "",
    "text": "Forking the code and cloning the repository\nThe openpipelines code is hosted on GitHub. To start working on openpipeline, you should create your own copy of the repository by forking it. Visit the openpipeline repository here and use the ‘Fork’ button on the top right hand side of the page. After you are done forking, you can clone the repository to a local directory on your computer using git clone. You can choose between using an SSH key to log in to GitHub or username and password (HTTPS) to connect to github.\n\nHTTPSSSH\n\n\ngit clone https://github.com/<YOUR USERNAME>/openpipeline.git\ncd openpipeline\ngit remote add upstream https://github.com/openpipeline-bio/openpipeline.git\n\n\ngit clone git@github.com:<YOUR USERNAME>/openpipeline.git\ncd openpipeline\ngit remote add upstream https://github.com/openpipeline-bio/openpipeline.git\n\n\n\n\n\nInstalling viash and nextflow\nOpenpipelines is being developed in Viash and Nextflow. If you are unfamiliar with either one of these platforms, you can check out their respective documentations here and here. To start contributing to openpipelines, you will need at least a working version of Java 11, OpenJDK 11, or a later version (up to Java 18). Additionally, by using Docker,you can build and test pipeline components and pipelines without needing to manually install dependencies for these components on your machine.\nViash and Nextflow can be installed by following the guides in the documentation for both of these tools. Make sure the viash and nextflow binaries are located in an existing directory that is listed in your $PATH. You can check if everything worked by running the following two commands and see if they output the correct location of the executables.\nwhich viash\nwhich nextflow"
  },
  {
    "objectID": "contributing/pull_requests.html",
    "href": "contributing/pull_requests.html",
    "title": "Publishing your changes",
    "section": "",
    "text": "While creating changes on your local branch, another developper could have added new changes the openpipeline repository. These changes will need to be included into your local branch before a pull request can be merged. Updating your branch involves merging the upstream branch (usually main) into your branch:\n# download the changes from the openpipelines repo\ngit fetch upstream\n# change your current branch to the branch of the pull request\ngit checkout <feature_branch>\n# merge the changes from upstream into your branch\ngit merge upstream/main\n# push the updates, your pull request will also be updated\ngit push"
  },
  {
    "objectID": "contributing/running_tests.html",
    "href": "contributing/running_tests.html",
    "title": "Running tests",
    "section": "",
    "text": "Fetching the test data.\nThe input data that is needed to run the tests will need to be downloaded from the openpipelines Amazon AWS s3 bucket first. To do so, the download/sync_test_resource component can be used, which will download the data to the correct location (resources_test) by default.\n./bin/viash run ./src/download/sync_test_resources/config.vsh.yaml -p docker -- --input s3://openpipelines-data\nOr, if you do not want to use Docker and have aws-cli tools installed natively:\n./bin/viash run ./src/download/sync_test_resources/config.vsh.yaml -p native -- --input s3://openpipelines-data\n\n\nRunning component unittests\nTo build and run tests for individual component that you are working on, use viash test with the config.vsh.yaml of the component you would like to test. For example:\n./bin/viash test ./src/convert/from_10xh5_to_h5mu/config.vsh.yaml\nKeep in mind that when no platform is passed to viash test, it will use the first platform that is specified in the config, which is docker for most of the components in openpipelines. Use -p native for example if you do not want to use docker.\nIt is also possible to execute the tests for all components in each namespace using ./bin/viash_test (note the underscore instead of a space).\n./bin/viash_test\n\n\nIntegration tests\nIndividual integration tests can be run by using the integration_test.sh scripts for a pipeline, located next to the main.nf in the workflows folder.\n./workflows/ingestion/cellranger_demux/integration_test.sh\nRunning all integration tests is also possible using a helper script that can be found at workflows/test/integration_test.sh. Using this script requires a working R installation with tidyverse installed. However, as pipelines are implemented by combining individual components\n./workflows/test/integration_test.sh"
  },
  {
    "objectID": "about/authors.html",
    "href": "about/authors.html",
    "title": "OpenPipelines",
    "section": "",
    "text": "Authors\nTest 2"
  },
  {
    "objectID": "about/openpipelines.html",
    "href": "about/openpipelines.html",
    "title": "OpenPipelines",
    "section": "",
    "text": "Openpipelines\nTest"
  },
  {
    "objectID": "user_guide/index.html#using-the-nf-tower-user-interface",
    "href": "user_guide/index.html#using-the-nf-tower-user-interface",
    "title": "OpenPipelines",
    "section": "Using the nf-tower user-interface",
    "text": "Using the nf-tower user-interface"
  },
  {
    "objectID": "user_guide/index.html#using-the-nf-tower-cli-tw",
    "href": "user_guide/index.html#using-the-nf-tower-cli-tw",
    "title": "OpenPipelines",
    "section": "Using the nf-tower CLI (tw)",
    "text": "Using the nf-tower CLI (tw)"
  },
  {
    "objectID": "user_guide/index.html#using-the-nextflow-cli",
    "href": "user_guide/index.html#using-the-nextflow-cli",
    "title": "OpenPipelines",
    "section": "Using the nextflow CLI",
    "text": "Using the nextflow CLI"
  },
  {
    "objectID": "guide/architecture.html",
    "href": "guide/architecture.html",
    "title": "Architecture",
    "section": "",
    "text": "The single-cell workflow is comprised of multiple (standalone) subworkflows.\n\n\n\n\n\n\n\nflowchart TD  \n  subgraph ingest [\"Ingestion\"]\n    direction LR\n    RawCounts1[\"Raw counts\"]\n    BCL[\"BCL\"]\n    Demux[\"Demux\"]\n    Fastq[\"Fastq\"]\n    Ref[\"Reference\"]\n    Mapping[\"Mapping\"]\n    RawDir[\"Raw out\"]\n    Convert[\"Convert\"]\n    RawCounts1[\"Raw counts\"]\n    BCL --> Demux --> Fastq\n    Fastq & Ref --> Mapping --> RawDir --> Convert --> RawCounts1\n  end\n  subgraph unimodalsinglesample [\"Unimodal Single Sample Processing\"]\n    direction LR\n    RawCounts2[\"Raw counts for one modality\"]\n    ProccessedCounts1[\"Processed\\nCounts\"]\n    AmbientRNACorr[/\"Ambient RNA\\ncorrection\"/]\n    RawCounts2 --> CellFiltering --> DoubletCalling --> AmbientRNACorr --> ProccessedCounts1\n  end\n  subgraph unimodalmultisample [\"Unimodal Multi Sample Processing\"]\n    direction LR\n    FeatureAnnotation[/\"Feature annotation\"/]\n    BatchCorrection[\"Batch correction\"]\n    Normalization[\"Normalisation\"]\n    FeatureSelection[\"Feature selection\"]\n    ProccessedCounts2[\"Processed\\nCounts\"]\n    DoubletCalling[\"Doublet\\ncalling\"]\n    CellFiltering[\"Cell\\nfiltering\"]\n    NormalisedOut[\"Normalised\\ncounts\"]\n\n    ProccessedCounts2 --> FeatureAnnotation --> BatchCorrection --> Normalization --> FeatureSelection --> NormalisedOut\n  end\n  subgraph integration [\"Integration\"]\n    direction LR\n\n    Normalised[\"Normalised\\ncounts\"]\n    Integrated[\"Integrated\\ndata\"]\n\n    DataIntegration[/\"Data integration\"/]\n    DimRed[/\"Dimensionality\\nreduction\"/]\n  \n    Normalised --> DataIntegration --> DimRed --> Integrated\n\n  end\n  subgraph downstreamprocessing [\"Downstream Processing\"]\n    direction LR\n    Interpretation[\"Interpretation\"]\n    Conversion[\"Conversion\"]\n    Dataset[\"Dataset\"]\n\n    Interpretation --> Conversion --> Dataset\n  end\n\n  ingest --> split --> unimodalsinglesample --> concat --> unimodalmultisample --> merging --> integration  --> downstreamprocessing\n  %% Do not change the ID for these boxes because this is linked to custom css\n  titlebox_ingestion[\"Convert raw sequencing data\\nor count tables into MuData data\\nfor further processing.\"]\n  titlebox_empty[\" \"]\n  titlebox2[\"Per modality fitering pipelines\\nare available to select true\\nfrom false cells.\"]\n  titlebox_empty2[\" \"]\n  titlebox3[\"...\"]\n  titlebox_empty3[\" \"]\n  titlebox4[\"Performs an integration pipeline for single\\ncell data based on a single or multiple modalities.\"]\n  titlebox5[\"Take different dataset annotations and combine\\nthem together into a single enriched dataset.\\n The idea is to have a diff_muon object,\\n i.e. a muon object containing the  changes \\n of the original objectwhere data from the\\ndiff_muon will be pushed to the original muon object.\"]\n  titlebox_ingestion --> titlebox_empty --> titlebox2 --> titlebox_empty2 --> titlebox3 --> titlebox_empty3--> titlebox4 --> titlebox5\n\n\n\n\n\nFigure 1: Overview single cell processing steps in OpenPipeline. Rectangles are data objects, parallelograms are Viash modules or subworkflows.\n\n\n\n\n\n\nUse-cases\n\n\n\n\n\n\nNote\n\n\n\nIn these use-cases, Interpretation, Conversion and Dataset are omitted because they are the same in every use case.\n\n\n\nA single unimodal sample\n\n\n\n\n\n\nflowchart LR\n\n  Raw1[Sample 1] --> Split1[/Split\\nmodalities/] --> ProcGEX1[/Process GEX\\nprofile/]\n  ProcGEX1 --> ConcatGEX[/Concatenate\\nprofiles/] --> ProcGEX[/Process GEX\\nprofiles/]\n  ProcGEX --> Merge[/Merge\\nmodalities/] --> Integration[/Integration/]\n\n\n\n\n\n\nFigure 2: Example of how the concatenation and merges work.\nGEX: Gene-expression.\n\n\n\n\n\n\n\nMultiple unimodal samples\n\n\n\n\n\n\nflowchart LR\n\n  Raw1[Sample 1] --> Split1[/Split\\nmodalities/] --> ProcGEX1[/Process GEX\\nprofile/]\n  Raw2[Sample 2] --> Split2[/Split\\nmodalities/] --> ProcGEX2[/Process GEX\\nprofile/]\n  Raw3[Sample 3] --> Split3[/Split\\nmodalities/] --> ProcGEX3[/Process GEX\\nprofile/]\n  ProcGEX1 & ProcGEX2 & ProcGEX3 --> ConcatGEX[/Concatenate\\nprofiles/] --> ProcGEX[/Process GEX\\nprofiles/] \n  ProcGEX --> Merge[/Merge\\nmodalities/] --> Integration[/Integration/]\n\n\n\n\n\n\nFigure 3: Example of how the concatenation and merges work.\nGEX: Gene-expression.\n\n\n\n\n\n\n\nA single multimodal sample\n\n\n\n\n\n\nflowchart LR\n\n  Raw1[Sample 1] --> Split1[/Split\\nmodalities/] --> ProcGEX1 & ProcADT1 & ProcRNAV1\n  ProcGEX1[/Process GEX\\nprofile/] --> ConcatGEX[/Concatenate\\nprofiles/] --> ProcGEX[/Process GEX\\nprofiles/]\n  ProcADT1[/Process ADT\\nprofile/] --> ConcatADT[/Concatenate\\nprofiles/] --> ProcADT[/Process ADT\\nprofiles/]\n  ProcRNAV1[/Process RNAV\\nprofile/] --> ConcatRNAV[/Concatenate\\nprofiles/] --> ProcRNAV[/Process RNAV\\nprofiles/]\n  ProcGEX & ProcADT & ProcRNAV--> Merge[/Merge\\nmodalities/] --> Integration[/Integration/]\n\n\n\n\n\n\nFigure 4: Example of how the concatenation and merges work.\nGEX: Gene-expression. ADT: Antibody-Derived Tags. RNAV: RNA Velocity.\n\n\n\n\n\n\n\nMultiple multimodal samples\n\n\n\n\n\n\nflowchart LR\n\n  Raw1[Sample 1] --> Split1[/Split\\nmodalities/] --> ProcGEX1 & ProcADT1\n  Raw2[Sample 2] --> Split2[/Split\\nmodalities/] --> ProcGEX2 & ProcADT2\n  ProcGEX1[/Process GEX\\nprofile/] & ProcGEX2[/Process GEX\\nprofile/] --> ConcatGEX[/Concatenate\\nprofiles/] --> ProcGEX[/Process GEX\\nprofiles/]\n  ProcADT1[/Process ADT\\nprofile/] & ProcADT2[/Process ADT\\nprofile/] --> ConcatADT[/Concatenate\\nprofiles/] --> ProcADT[/Process ADT\\nprofiles/]\n  ProcGEX & ProcADT --> Merge[/Merge\\nmodalities/] --> Integration[/Integration/]\n\n\n\n\n\n\nFigure 5: Example of how the concat and merges work.\nGEX: Gene-expression. ADT: Antibody-Derived Tags."
  },
  {
    "objectID": "guide/running_pipelines.html",
    "href": "guide/running_pipelines.html",
    "title": "Running pipelines",
    "section": "",
    "text": "Note\n\n\n\nTODO: Fill in these sections.\n\nExamples should be using an OpenPipelines release or the main_build branch.\nPoint to the “Components” tab\n\n\n\n\nInstalling Viash and Nextflow\nBefore you try running OpenPipelines, please install Viash and Nextflow first (?@sec-install-viash-nextflow).\n\nRunning pipelines from the CLI\nbin/nextflow run . \\\n  -main-script workflows/integration/multimodal_integration/main.nf \\\n  -profile docker \\\n  -resume \n  --publish_dir foo/\n  --input \"bar\"\n  --output \"test.txt\"\n\n\nRunning pipelines from Nextflow Tower\n\n\nUsing param_list to pass large parameter sets\nUsing Viash’s VDSL3 nextflow platform, an optional -param_list argument can be used to pass a large number of inputs to a workflow. Additionally, the pipeline parameter values can be set for each input to the workflow independently. A param_list can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob:\n\nA csv file should have column names which correspond to the different arguments of this pipeline. Example: --param_list data.csv with columns id,input.\nA json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: --param_list data.json with contents [ {'id': 'foo', 'input': 'foo.txt'}, {'id': 'bar', 'input': 'bar.txt'} ].\nA yaml blob can also be passed directly as a string. Example: --param_list \"[ {'id': 'foo', 'input': 'foo.txt'}, {'id': 'bar', 'input': 'bar.txt'} ]\".\nA list of maps can be in a nextflow.config file, where the keys of each map corresponds to the arguments of the pipeline. Example in a nextflow.config file: param_list: [ ['id': 'foo', 'input': 'foo.txt'], ['id': 'bar', 'input': 'bar.txt'] ].\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when param_list is a list of maps (as-is) or a yaml blob.\nUsing a param_list can be combined with setting parameters that are set for all parameter sets. These ‘gobal’ parameters will always be overwritten with their counterpart that was specified in a more specific manner for a single parameter set. For example, using --param_list \"[ {'id': 'foo', 'input': 'foo.txt'}, {'id': 'bar'} ]\" --input 'global.txt' will result in the following parameter sets being processed:\n\nid: foo, input: foo.txt\nid: bar, input: global.txt"
  },
  {
    "objectID": "guide/data_api.html",
    "href": "guide/data_api.html",
    "title": "Data API",
    "section": "",
    "text": "Note\n\n\n\nFile formats are being discussed in openpipelines-bio/openpipeline#102"
  },
  {
    "objectID": "guide/data_api.html#dataset",
    "href": "guide/data_api.html#dataset",
    "title": "Data API",
    "section": "Dataset",
    "text": "Dataset\nobs:\n index # cell id\n sample\n cell_type\n organism\n tissue\n\nmod:\n rna:\n rnav:\n prot:\n atac:\n vdj:"
  },
  {
    "objectID": "guide/data_api.html#rna-modality",
    "href": "guide/data_api.html#rna-modality",
    "title": "Data API",
    "section": "RNA modality",
    "text": "RNA modality\nmod:\n rna:\n   layers:\n     counts\n     normalized\n   obs:\n     <qc metrics>\n     doublet_score\n     doublet_bool\n     cluster\n   var:\n     index # feature_id, preferably an ensembl id\n     feature_name\n     <qc metrics>\n     highly_variable\n     highly_variable_score\n   obsm:\n     X_pca\n     X_integrated\n     X_umap\n     annotation # scvi, bbknn, ...\n   obsp:\n     connectivities\n     distances"
  },
  {
    "objectID": "guide/data_api.html#adt-modality",
    "href": "guide/data_api.html#adt-modality",
    "title": "Data API",
    "section": "ADT modality",
    "text": "ADT modality\nmod:\n prot:\n   layers:\n     counts\n   var:\n      index # feature_id\n      feature_name # Associated protein names"
  },
  {
    "objectID": "guide/data_api.html#vdj-modality",
    "href": "guide/data_api.html#vdj-modality",
    "title": "Data API",
    "section": "VDJ modality",
    "text": "VDJ modality\nmod:\n vdj:\n   obsm:\n     vdj_t\n     vdj_b"
  },
  {
    "objectID": "guide/data_api.html#atac-modality",
    "href": "guide/data_api.html#atac-modality",
    "title": "Data API",
    "section": "ATAC modality",
    "text": "ATAC modality\nmod:\n atac:\n   layers:\n     counts\n   var:\n     interval"
  },
  {
    "objectID": "guide/data_api.html#rna-velocity-modality",
    "href": "guide/data_api.html#rna-velocity-modality",
    "title": "Data API",
    "section": "RNA velocity modality",
    "text": "RNA velocity modality\nmod:\n rnav:\n   layers:\n     spliced\n     unspliced"
  },
  {
    "objectID": "guide/implementation_status.html",
    "href": "guide/implementation_status.html",
    "title": "Status",
    "section": "",
    "text": "flowchart LR\n  classDef done fill:#a3f6cf,stroke:#000000;\n  classDef wip fill:#f4cb93,stroke:#000000;\n  classDef todo fill:#f0aeb2,stroke:#000000;\n\n  Raw1[Sample 1] --> Split1[/Split\\nmodalities/]:::done --> ProcGEX1 & ProcRNAV1 & ProcADT1 & ProcATAC1 & ProcVDJ1\n  ProcGEX1[/Process GEX\\nprofile/]:::done --> ConcatGEX[/Concatenate\\nprofiles/]:::done --> ProcGEX[/Process GEX\\nprofiles/]:::done\n  ProcRNAV1[/Process RNAV\\nprofile/]:::wip --> ConcatRNAV[/Concatenate\\nprofiles/]:::done --> ProcRNAV[/Process RNAV\\nprofiles/]:::wip\n  ProcADT1[/Process ADT\\nprofile/]:::done --> ConcatADT[/Concatenate\\nprofiles/]:::done --> ProcADT[/Process ADT\\nprofiles/]:::todo\n  ProcATAC1[/Process ATAC\\nprofile/]:::todo --> ConcatATAC[/Concatenate\\nprofiles/]:::done --> ProcATAC[/Process ATAC\\nprofiles/]:::todo\n  ProcVDJ1[/Process VDJ\\nprofile/]:::todo --> ConcatVDJ[/Concatenate\\nprofiles/]:::done --> ProcVDJ[/Process VDJ\\nprofiles/]:::todo\n  ProcGEX & ProcRNAV & ProcADT & ProcATAC & ProcVDJ --> Merge[/Merge\\nmodalities/]:::done --> Integration[/Integration/]:::done\n\n\n\n\n\nFigure 1: Status of implemented components. Green: implemented, orange: work in progress,\nGEX: Gene-expression. RNAV: RNA Velocity. ADT: Antibody-Derived Tags. ATAC: Assay for Transposase-Accessible Chromatin."
  },
  {
    "objectID": "guide/bug_reports.html",
    "href": "guide/bug_reports.html",
    "title": "Bug reports",
    "section": "",
    "text": "Issues with Openpipelines are being tracked on Github. In order for an issue to be fixed in a timely manner, creating a complete and reproducable is essential."
  },
  {
    "objectID": "components/modules/process_10xh5/filter_10xh5.html",
    "href": "components/modules/process_10xh5/filter_10xh5.html",
    "title": "Filter 10xh5",
    "section": "",
    "text": "ID: filter_10xh5\nNamespace: process_10xh5\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/process_10xh5/filter_10xh5.html#example-commands",
    "href": "components/modules/process_10xh5/filter_10xh5.html#example-commands",
    "title": "Filter 10xh5",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/process_10xh5/filter_10xh5/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n# output: \"$id.$key.output.h5\"\nmin_library_size: 0\nmin_cells_per_gene: 0\n# keep_feature_types: [\"Antibody Capture\"]\nverbose: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/process_10xh5/filter_10xh5/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/process_10xh5/filter_10xh5.html#argument-group",
    "href": "components/modules/process_10xh5/filter_10xh5.html#argument-group",
    "title": "Filter 10xh5",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nAn h5 file from the 10x genomics website.\nfile, required, example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n\n\n--output\nOutput h5 file.\nfile, required, example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix_filtered.h5\"\n\n\n--min_library_size\nMinimum library size.\ninteger, default: 0\n\n\n--min_cells_per_gene\nMinimum number of cells per gene.\ninteger, default: 0\n\n\n--keep_feature_types\nSpecify which feature types will never be filtered out\nstring, example: \"Antibody Capture\"\n\n\n--verbose\nIncrease verbosity\nboolean_true"
  },
  {
    "objectID": "components/modules/process_10xh5/filter_10xh5.html#authors",
    "href": "components/modules/process_10xh5/filter_10xh5.html#authors",
    "title": "Filter 10xh5",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/modules/velocity/scvelo.html",
    "href": "components/modules/velocity/scvelo.html",
    "title": "Scvelo",
    "section": "",
    "text": "ID: scvelo\nNamespace: velocity\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/velocity/scvelo.html#example-commands",
    "href": "components/modules/velocity/scvelo.html#example-commands",
    "title": "Scvelo",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/velocity/scvelo/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"path/to/file\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Filtering and normalization\n# min_counts: 123\n# min_counts_u: 123\n# min_cells: 123\n# min_cells_u: 123\n# min_shared_counts: 123\n# min_shared_cells: 123\n# n_top_genes: 123\nlog_transform: true\n\n# Fitting parameters\n# n_principal_components: 123\nn_neighbors: 30\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/velocity/scvelo/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/velocity/scvelo.html#argument-groups",
    "href": "components/modules/velocity/scvelo.html#argument-groups",
    "title": "Scvelo",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nVelocyto loom file.\nfile, required\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput directory. If it does not exist, will be created.\nfile, required\n\n\n\n\n\nFiltering and normalization\nArguments for filtering, normalization an log transform (see scvelo.pp.filter_and_normalize function)\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_counts\nMinimum number of counts required for a gene to pass filtering (spliced).\ninteger\n\n\n--min_counts_u\nMinimum number of counts required for a gene to pass filtering (unspliced).\ninteger\n\n\n--min_cells\nMinimum number of cells expressed required to pass filtering (spliced).\ninteger\n\n\n--min_cells_u\nMinimum number of cells expressed required to pass filtering (unspliced).\ninteger\n\n\n--min_shared_counts\nMinimum number of counts (both unspliced and spliced) required for a gene.\ninteger\n\n\n--min_shared_cells\nMinimum number of cells required to be expressed (both unspliced and spliced).\ninteger\n\n\n--n_top_genes\nNumber of genes to keep.\ninteger\n\n\n--log_transform\nDo not log transform counts.\nboolean, default: TRUE\n\n\n\n\n\nFitting parameters\nArguments for fitting the data\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--n_principal_components\nNumber of principal components to use for calculating moments.\ninteger\n\n\n--n_neighbors\nNumber of neighbors to use. First/second-order moments are computed for each cell across its nearest neighbors, where the neighbor graph is obtained from euclidean distances in PCA space.\ninteger, default: 30"
  },
  {
    "objectID": "components/modules/velocity/scvelo.html#authors",
    "href": "components/modules/velocity/scvelo.html#authors",
    "title": "Scvelo",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/velocity/velocyto.html",
    "href": "components/modules/velocity/velocyto.html",
    "title": "Velocyto",
    "section": "",
    "text": "ID: velocyto\nNamespace: velocity\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/velocity/velocyto.html#example-commands",
    "href": "components/modules/velocity/velocyto.html#example-commands",
    "title": "Velocyto",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/velocity/velocyto/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\ntranscriptome: # please fill in - example: \"path/to/file\"\n# barcode: \"path/to/file\"\nwithout_umi: false\n# output: \"$id.$key.output.output\"\nlogic: \"Default\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/velocity/velocyto/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/velocity/velocyto.html#argument-group",
    "href": "components/modules/velocity/velocyto.html#argument-group",
    "title": "Velocyto",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to BAM file\nfile, required\n\n\n--transcriptome\nPath to GTF file\nfile, required\n\n\n--barcode\nValid barcodes file, to filter the bam. If –bcfile is not specified all the cell barcodes will be included. Cell barcodes should be specified in the bcfile as the ‘CB’ tag for each read\nfile\n\n\n--without_umi\nfoo\nboolean_true\n\n\n--output\nVelocyto loom file\nfile, required\n\n\n--logic\nThe logic to use for the filtering.\nstring, default: \"Default\""
  },
  {
    "objectID": "components/modules/velocity/velocyto.html#authors",
    "href": "components/modules/velocity/velocyto.html#authors",
    "title": "Velocyto",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/modules/transform/scale.html",
    "href": "components/modules/transform/scale.html",
    "title": "Scale",
    "section": "",
    "text": "ID: scale\nNamespace: transform\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/transform/scale.html#example-commands",
    "href": "components/modules/transform/scale.html#example-commands",
    "title": "Scale",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/scale/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# max_value: 123.0\nzero_center: true\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/scale/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/transform/scale.html#argument-group",
    "href": "components/modules/transform/scale.html#argument-group",
    "title": "Scale",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file.\nfile, required, example: \"input.h5mu\"\n\n\n--modality\nList of modalities to process.\nstring, default: \"rna\"\n\n\n--max_value\nClip (truncate) to this value after scaling. Does not clip by default.\ndouble\n\n\n--zero_center\nIf False, omit zero-centering variables, which allows to handle sparse input efficiently.\nboolean, default: TRUE\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\""
  },
  {
    "objectID": "components/modules/transform/scale.html#authors",
    "href": "components/modules/transform/scale.html#authors",
    "title": "Scale",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/transform/regress_out.html",
    "href": "components/modules/transform/regress_out.html",
    "title": "Regress out",
    "section": "",
    "text": "ID: regress_out\nNamespace: transform\n\n\n\nSource\nUses simple linear regression. This is inspired by Seurat’s regressOut function in R [Satija15]. Note that this function tends to overcorrect in certain circumstances as described in issue theislab/scanpy#526. See https://github.com/theislab/scanpy/issues/526"
  },
  {
    "objectID": "components/modules/transform/regress_out.html#example-commands",
    "href": "components/modules/transform/regress_out.html#example-commands",
    "title": "Regress out",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/regress_out/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\n# output: \"$id.$key.output.h5mu\"\nmodality: \"rna\"\n# obs_keys: [\"foo\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/regress_out/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/transform/regress_out.html#argument-group",
    "href": "components/modules/transform/regress_out.html#argument-group",
    "title": "Regress out",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--modality\nWhich modality (one or more) to run this component on.\nstring, default: \"rna\"\n\n\n--obs_keys\nWhich .obs keys to regress on.\nstring"
  },
  {
    "objectID": "components/modules/transform/regress_out.html#authors",
    "href": "components/modules/transform/regress_out.html#authors",
    "title": "Regress out",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "components/modules/transform/normalize_total.html",
    "href": "components/modules/transform/normalize_total.html",
    "title": "Normalize total",
    "section": "",
    "text": "ID: normalize_total\nNamespace: transform\n\n\n\nSource\nNormalize each cell by total counts over all genes, so that every cell has the same total count after normalization. If choosing target_sum=1e6, this is CPM normalization.\nIf exclude_highly_expressed=True, very highly expressed genes are excluded from the computation of the normalization factor (size factor) for each cell. This is meaningful as these can strongly influence the resulting normalized values for all other genes [Weinreb17]."
  },
  {
    "objectID": "components/modules/transform/normalize_total.html#example-commands",
    "href": "components/modules/transform/normalize_total.html#example-commands",
    "title": "Normalize total",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/normalize_total/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# input_layer: \"foo\"\n# output: \"$id.$key.output.h5mu\"\n# output_layer: \"foo\"\ntarget_sum: 10000\nexclude_highly_expressed: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/normalize_total/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/transform/normalize_total.html#argument-group",
    "href": "components/modules/transform/normalize_total.html#argument-group",
    "title": "Normalize total",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--input_layer\nInput layer to use. By default, X is normalized\nstring\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--output_layer\nOutput layer to use. By default, use X.\nstring\n\n\n--target_sum\nIf None, after normalization, each observation (cell) has a total count equal to the median of total counts for observations (cells) before normalization.\ninteger, default: 10000\n\n\n--exclude_highly_expressed\nExclude (very) highly expressed genes for the computation of the normalization factor (size factor) for each cell. A gene is considered highly expressed, if it has more than max_fraction of the total counts in at least one cell. The not-excluded genes will sum up to target_sum.\nboolean_true"
  },
  {
    "objectID": "components/modules/transform/normalize_total.html#authors",
    "href": "components/modules/transform/normalize_total.html#authors",
    "title": "Normalize total",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "components/modules/transform/delete_layer.html",
    "href": "components/modules/transform/delete_layer.html",
    "title": "Delete layer",
    "section": "",
    "text": "ID: delete_layer\nNamespace: transform\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/transform/delete_layer.html#example-commands",
    "href": "components/modules/transform/delete_layer.html#example-commands",
    "title": "Delete layer",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/delete_layer/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nlayer: # please fill in - example: [\"foo\"]\n# output: \"$id.$key.output.h5mu\"\nmissing_ok: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/delete_layer/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/transform/delete_layer.html#argument-group",
    "href": "components/modules/transform/delete_layer.html#argument-group",
    "title": "Delete layer",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--layer\nInput layer to remove\nstring, required\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--missing_ok\nDo not raise an error if the layer does not exist for all modalities.\nboolean_true"
  },
  {
    "objectID": "components/modules/transform/delete_layer.html#authors",
    "href": "components/modules/transform/delete_layer.html#authors",
    "title": "Delete layer",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/transform/log1p.html",
    "href": "components/modules/transform/log1p.html",
    "title": "Log1p",
    "section": "",
    "text": "ID: log1p\nNamespace: transform\n\n\n\nSource\nComputes X = log(X + 1), where log denotes the natural logarithm unless a different base is given"
  },
  {
    "objectID": "components/modules/transform/log1p.html#example-commands",
    "href": "components/modules/transform/log1p.html#example-commands",
    "title": "Log1p",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transform/log1p/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# input_layer: \"foo\"\n# output_layer: \"foo\"\n# output: \"$id.$key.output.h5mu\"\n# base: 2\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transform/log1p/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/transform/log1p.html#argument-group",
    "href": "components/modules/transform/log1p.html#argument-group",
    "title": "Log1p",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--input_layer\nInput layer to use. If None, X is normalized\nstring\n\n\n--output_layer\nOutput layer to use. By default, use X.\nstring\n\n\n--output\nOutput h5mu file.\nfile, required, default: \"output.h5mu\"\n\n\n--base\n\ndouble, example: 2"
  },
  {
    "objectID": "components/modules/transform/log1p.html#authors",
    "href": "components/modules/transform/log1p.html#authors",
    "title": "Log1p",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "components/modules/qc/multiqc.html",
    "href": "components/modules/qc/multiqc.html",
    "title": "Multiqc",
    "section": "",
    "text": "ID: multiqc\nNamespace: qc\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/qc/multiqc.html#example-commands",
    "href": "components/modules/qc/multiqc.html#example-commands",
    "title": "Multiqc",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/qc/multiqc/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: [\"input.txt\"]\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/qc/multiqc/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/qc/multiqc.html#argument-group",
    "href": "components/modules/qc/multiqc.html#argument-group",
    "title": "Multiqc",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nDescribe the input file.\nfile, required, example: \"input.txt\"\n\n\n--output\nDescribe the output file.\nfile, required, example: \"report\""
  },
  {
    "objectID": "components/modules/qc/multiqc.html#authors",
    "href": "components/modules/qc/multiqc.html#authors",
    "title": "Multiqc",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "components/modules/qc/fastqc.html",
    "href": "components/modules/qc/fastqc.html",
    "title": "Fastqc",
    "section": "",
    "text": "ID: fastqc\nNamespace: qc\n\n\n\nSource\nThis component can take one or more files (by means of shell globbing) or a complete directory"
  },
  {
    "objectID": "components/modules/qc/fastqc.html#example-commands",
    "href": "components/modules/qc/fastqc.html#example-commands",
    "title": "Fastqc",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/qc/fastqc/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nmode: \"files\"\ninput: # please fill in - example: \"fastq_dir/\"\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/qc/fastqc/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/qc/fastqc.html#argument-group",
    "href": "components/modules/qc/fastqc.html#argument-group",
    "title": "Fastqc",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--mode\nThe mode in which the component works. Can be either files or dir.\nstring, default: \"files\"\n\n\n--input\nDirectory containing input fastq files.\nfile, required, example: \"fastq_dir\"\n\n\n--output\nOutput directory to write reports to.\nfile, required, example: \"qc\""
  },
  {
    "objectID": "components/modules/qc/fastqc.html#authors",
    "href": "components/modules/qc/fastqc.html#authors",
    "title": "Fastqc",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "components/modules/dimred/pca.html",
    "href": "components/modules/dimred/pca.html",
    "title": "Pca",
    "section": "",
    "text": "ID: pca\nNamespace: dimred\n\n\n\nSource\nUses the implementation of scikit-learn [Pedregosa11]"
  },
  {
    "objectID": "components/modules/dimred/pca.html#example-commands",
    "href": "components/modules/dimred/pca.html#example-commands",
    "title": "Pca",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dimred/pca/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# layer: \"foo\"\n# output: \"$id.$key.output.h5mu\"\nobsm_output: \"X_pca\"\nvarm_output: \"pca_loadings\"\nuns_output: \"pca_variance\"\n# num_components: 25\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dimred/pca/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/dimred/pca.html#argument-group",
    "href": "components/modules/dimred/pca.html#argument-group",
    "title": "Pca",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--layer\nUse specified layer for expression values instead of the .X object from the modality.\nstring\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_output\nIn which .obsm slot to store the resulting embedding.\nstring, default: \"X_pca\"\n\n\n--varm_output\nIn which .varm slot to store the resulting loadings matrix.\nstring, default: \"pca_loadings\"\n\n\n--uns_output\nIn which .uns slot to store the resulting variance objects.\nstring, default: \"pca_variance\"\n\n\n--num_components\nNumber of principal components to compute. Defaults to 50, or 1 - minimum dimension size of selected representation.\ninteger, example: 25"
  },
  {
    "objectID": "components/modules/dimred/pca.html#authors",
    "href": "components/modules/dimred/pca.html#authors",
    "title": "Pca",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "components/modules/dimred/umap.html",
    "href": "components/modules/dimred/umap.html",
    "title": "Umap",
    "section": "",
    "text": "ID: umap\nNamespace: dimred\n\n\n\nSource\nBesides tending to be faster than tSNE, it optimizes the embedding such that it best reflects the topology of the data, which we represent throughout Scanpy using a neighborhood graph. tSNE, by contrast, optimizes the distribution of nearest-neighbor distances in the embedding such that these best match the distribution of distances in the high-dimensional space. We use the implementation of umap-learn [McInnes18]. For a few comparisons of UMAP with tSNE, see this preprint"
  },
  {
    "objectID": "components/modules/dimred/umap.html#example-commands",
    "href": "components/modules/dimred/umap.html#example-commands",
    "title": "Umap",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dimred/umap/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nuns_neighbors: \"neighbors\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\nobsm_output: \"umap\"\n\n# Arguments\nmin_dist: 0.5\nspread: 1.0\nnum_components: 2\n# max_iter: 123\nalpha: 1.0\ngamma: 1.0\nnegative_sample_rate: 5\ninit_pos: \"spectral\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dimred/umap/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/dimred/umap.html#argument-groups",
    "href": "components/modules/dimred/umap.html#argument-groups",
    "title": "Umap",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--uns_neighbors\nThe .uns neighbors slot as output by the find_neighbors component.\nstring, default: \"neighbors\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_output\nThe pre/postfix under which to store the UMAP results.\nstring, default: \"umap\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_dist\nThe effective minimum distance between embedded points. Smaller values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points. The value should be set relative to the spread value, which determines the scale at which embedded points will be spread out.\ndouble, default: 0.5\n\n\n--spread\nThe effective scale of embedded points. In combination with min_dist this determines how clustered/clumped the embedded points are.\ndouble, default: 1\n\n\n--num_components\nThe number of dimensions of the embedding.\ninteger, default: 2\n\n\n--max_iter\nThe number of iterations (epochs) of the optimization. Called n_epochs in the original UMAP. Default is set to 500 if neighbors[‘connectivities’].shape[0] <= 10000, else 200.\ninteger\n\n\n--alpha\nThe initial learning rate for the embedding optimization.\ndouble, default: 1\n\n\n--gamma\nWeighting applied to negative samples in low dimensional embedding optimization. Values higher than one will result in greater weight being given to negative samples.\ndouble, default: 1\n\n\n--negative_sample_rate\nThe number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding.\ninteger, default: 5\n\n\n--init_pos\nHow to initialize the low dimensional embedding. Called init in the original UMAP. Options are: * Any key from .obsm * 'paga': positions from paga() * 'spectral': use a spectral embedding of the graph * 'random': assign initial embedding positions at random.\nstring, default: \"spectral\""
  },
  {
    "objectID": "components/modules/dimred/umap.html#authors",
    "href": "components/modules/dimred/umap.html#authors",
    "title": "Umap",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "components/modules/integrate/scvi.html",
    "href": "components/modules/integrate/scvi.html",
    "title": "Scvi",
    "section": "",
    "text": "ID: scvi\nNamespace: integrate\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/integrate/scvi.html#example-commands",
    "href": "components/modules/integrate/scvi.html#example-commands",
    "title": "Scvi",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/integrate/scvi/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"path/to/file\"\nmodality: \"rna\"\n# input_layer: \"foo\"\nobs_batch: \"sample_id\"\n# var_input: \"foo\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\nobsm_output: \"X_scvi_integrated\"\n\n# Early stopping arguments\n# early_stopping: true\nearly_stopping_monitor: \"elbo_validation\"\nearly_stopping_patience: 45\nearly_stopping_min_delta: 0.0\n\n# Learning parameters\nmax_epochs: # please fill in - example: 123\nreduce_lr_on_plateau: true\nlr_factor: 0.6\nlr_patience: 30\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/scvi/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/integrate/scvi.html#argument-groups",
    "href": "components/modules/integrate/scvi.html#argument-groups",
    "title": "Scvi",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--input_layer\nInput layer to use. If None, X is used\nstring\n\n\n--obs_batch\nColumn name discriminating between your batches.\nstring, default: \"sample_id\"\n\n\n--var_input\n.var column containing highly variable genes. By default, do not subset genes.\nstring\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required\n\n\n--obsm_output\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_scvi_integrated\"\n\n\n\n\n\nEarly stopping arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--early_stopping\nWhether to perform early stopping with respect to the validation set.\nboolean\n\n\n--early_stopping_monitor\nMetric logged during validation set epoch.\nstring, default: \"elbo_validation\"\n\n\n--early_stopping_patience\nNumber of validation epochs with no improvement after which training will be stopped.\ninteger, default: 45\n\n\n--early_stopping_min_delta\nMinimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.\ndouble, default: 0\n\n\n\n\n\nLearning parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--max_epochs\nNumber of passes through the dataset, defaults to (20000 / number of cells) * 400 or 400; whichever is smallest.\ninteger, required\n\n\n--reduce_lr_on_plateau\nWhether to monitor validation loss and reduce learning rate when validation set lr_scheduler_metric plateaus.\nboolean, default: TRUE\n\n\n--lr_factor\nFactor to reduce learning rate.\ndouble, default: 0.6\n\n\n--lr_patience\nNumber of epochs with no improvement after which learning rate will be reduced.\ndouble, default: 30"
  },
  {
    "objectID": "components/modules/integrate/scvi.html#authors",
    "href": "components/modules/integrate/scvi.html#authors",
    "title": "Scvi",
    "section": "Authors",
    "text": "Authors\n\nMalte D. Luecken   (author)\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/integrate/scanorama.html",
    "href": "components/modules/integrate/scanorama.html",
    "title": "Scanorama",
    "section": "",
    "text": "ID: scanorama\nNamespace: integrate\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/integrate/scanorama.html#example-commands",
    "href": "components/modules/integrate/scanorama.html#example-commands",
    "title": "Scanorama",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/integrate/scanorama/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\nmodality: \"rna\"\n# output: \"$id.$key.output.h5ad\"\nobs_batch: \"batch\"\nobsm_input: \"X_pca\"\nobsm_output: \"X_scanorama\"\nknn: 20\nbatch_size: 5000\nsigma: 15\napprox: true\nalpha: 0.1\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/scanorama/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/integrate/scanorama.html#argument-group",
    "href": "components/modules/integrate/scanorama.html#argument-group",
    "title": "Scanorama",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput .h5mu file\nfile, required, default: \"output.h5ad\"\n\n\n--obs_batch\nColumn name discriminating between your batches.\nstring, default: \"batch\"\n\n\n--obsm_input\nBasis obsm slot to run scanorama on.\nstring, default: \"X_pca\"\n\n\n--obsm_output\nThe name of the field in adata.obsm where the integrated embeddings will be stored after running this function. Defaults to X_scanorama.\nstring, default: \"X_scanorama\"\n\n\n--knn\nNumber of nearest neighbors to use for matching.\ninteger, default: 20\n\n\n--batch_size\nThe batch size used in the alignment vector computation. Useful when integrating very large (>100k samples) datasets. Set to large value that runs within available memory.\ninteger, default: 5000\n\n\n--sigma\nCorrection smoothing parameter on Gaussian kernel.\ndouble, default: 15\n\n\n--approx\nUse approximate nearest neighbors with Python annoy; greatly speeds up matching runtime.\nboolean, default: TRUE\n\n\n--alpha\nAlignment score minimum cutoff\ndouble, default: 0.1"
  },
  {
    "objectID": "components/modules/integrate/scanorama.html#authors",
    "href": "components/modules/integrate/scanorama.html#authors",
    "title": "Scanorama",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/integrate/harmonypy.html",
    "href": "components/modules/integrate/harmonypy.html",
    "title": "Harmonypy",
    "section": "",
    "text": "ID: harmonypy\nNamespace: integrate\n\n\n\nSource\nBased on an implementation in python from https://github.com/slowkow/harmonypy"
  },
  {
    "objectID": "components/modules/integrate/harmonypy.html#example-commands",
    "href": "components/modules/integrate/harmonypy.html#example-commands",
    "title": "Harmonypy",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/integrate/harmonypy/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\n# output: \"$id.$key.output.output\"\nmodality: \"rna\"\nobsm_input: \"X_pca\"\nobsm_output: \"X_pca_integrated\"\ntheta: [2]\nobs_covariates: # please fill in - example: [\"batch\", \"sample\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/integrate/harmonypy/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/integrate/harmonypy.html#argument-group",
    "href": "components/modules/integrate/harmonypy.html#argument-group",
    "title": "Harmonypy",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required\n\n\n--output\nOutput h5mu file.\nfile, required\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obsm_input\nWhich .obsm slot to use as a starting PCA embedding.\nstring, default: \"X_pca\"\n\n\n--obsm_output\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_pca_integrated\"\n\n\n--theta\nDiversity clustering penalty parameter. Specify for each variable in group.by.vars. theta=0 does not encourage any diversity. Larger values of theta result in more diverse clusters.\ndouble, default: 2\n\n\n--obs_covariates\nThe .obs field(s) that define the covariate(s) to regress out.\nstring, required, example: \"batch\", example: \"sample\""
  },
  {
    "objectID": "components/modules/integrate/harmonypy.html#authors",
    "href": "components/modules/integrate/harmonypy.html#authors",
    "title": "Harmonypy",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "components/modules/reference/build_bdrhap_reference.html",
    "href": "components/modules/reference/build_bdrhap_reference.html",
    "title": "Build bdrhap reference",
    "section": "",
    "text": "ID: build_bdrhap_reference\nNamespace: reference\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/reference/build_bdrhap_reference.html#example-commands",
    "href": "components/modules/reference/build_bdrhap_reference.html#example-commands",
    "title": "Build bdrhap reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/reference/build_bdrhap_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ngenome_fasta: # please fill in - example: \"genome_sequence.fa.gz\"\ntranscriptome_gtf: # please fill in - example: \"transcriptome_annotation.gtf.gz\"\n# output: \"$id.$key.output.gz\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/reference/build_bdrhap_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/reference/build_bdrhap_reference.html#argument-group",
    "href": "components/modules/reference/build_bdrhap_reference.html#argument-group",
    "title": "Build bdrhap reference",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nReference genome fasta.\nfile, required, example: \"genome_sequence.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"transcriptome_annotation.gtf.gz\"\n\n\n--output\nStar index\nfile, required, example: \"star_index.tar.gz\""
  },
  {
    "objectID": "components/modules/reference/build_bdrhap_reference.html#authors",
    "href": "components/modules/reference/build_bdrhap_reference.html#authors",
    "title": "Build bdrhap reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "components/modules/reference/build_cellranger_reference.html",
    "href": "components/modules/reference/build_cellranger_reference.html",
    "title": "Build cellranger reference",
    "section": "",
    "text": "ID: build_cellranger_reference\nNamespace: reference\n\n\n\nSource\nCreates a new folder named after the genome."
  },
  {
    "objectID": "components/modules/reference/build_cellranger_reference.html#example-commands",
    "href": "components/modules/reference/build_cellranger_reference.html#example-commands",
    "title": "Build cellranger reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/reference/build_cellranger_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ngenome_fasta: # please fill in - example: \"genome_sequence.fa.gz\"\ntranscriptome_gtf: # please fill in - example: \"transcriptome_annotation.gtf.gz\"\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/reference/build_cellranger_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/reference/build_cellranger_reference.html#argument-group",
    "href": "components/modules/reference/build_cellranger_reference.html#argument-group",
    "title": "Build cellranger reference",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nReference genome fasta.\nfile, required, example: \"genome_sequence.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"transcriptome_annotation.gtf.gz\"\n\n\n--output\nOutput folder\nfile, required, example: \"cellranger_reference\""
  },
  {
    "objectID": "components/modules/reference/build_cellranger_reference.html#authors",
    "href": "components/modules/reference/build_cellranger_reference.html#authors",
    "title": "Build cellranger reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "components/modules/reference/make_reference.html",
    "href": "components/modules/reference/make_reference.html",
    "title": "Make reference",
    "section": "",
    "text": "ID: make_reference\nNamespace: reference\n\n\n\nSource\nExample input files are: - genome_fasta: https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz - transcriptome_gtf: https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz - ercc: https://assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip"
  },
  {
    "objectID": "components/modules/reference/make_reference.html#example-commands",
    "href": "components/modules/reference/make_reference.html#example-commands",
    "title": "Make reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/reference/make_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ngenome_fasta: # please fill in - example: \"genome_fasta.fa.gz\"\ntranscriptome_gtf: # please fill in - example: \"transcriptome.gtf.gz\"\n# ercc: \"ercc.zip\"\n# subset_regex: \"(ERCC-00002|chr1)\"\n# output_fasta: \"$id.$key.output_fasta.gz\"\n# output_gtf: \"$id.$key.output_gtf.gz\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/reference/make_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/reference/make_reference.html#argument-group",
    "href": "components/modules/reference/make_reference.html#argument-group",
    "title": "Make reference",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genome_fasta\nReference genome fasta. Example:\nfile, required, example: \"genome_fasta.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"transcriptome.gtf.gz\"\n\n\n--ercc\nERCC sequence and annotation file.\nfile, example: \"ercc.zip\"\n\n\n--subset_regex\nWill subset the reference chromosomes using the given regex.\nstring, example: \"(ERCC-00002&#124;chr1)\"\n\n\n--output_fasta\nOutput genome sequence fasta.\nfile, required, example: \"genome_sequence.fa.gz\"\n\n\n--output_gtf\nOutput transcriptome annotation gtf.\nfile, required, example: \"transcriptome_annotation.gtf.gz\""
  },
  {
    "objectID": "components/modules/reference/make_reference.html#authors",
    "href": "components/modules/reference/make_reference.html#authors",
    "title": "Make reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "components/modules/download/download_file.html",
    "href": "components/modules/download/download_file.html",
    "title": "Download file",
    "section": "",
    "text": "ID: download_file\nNamespace: download\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/download/download_file.html#example-commands",
    "href": "components/modules/download/download_file.html#example-commands",
    "title": "Download file",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/download/download_file/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n# output: \"$id.$key.output.h5\"\nverbose: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/download/download_file/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/download/download_file.html#argument-group",
    "href": "components/modules/download/download_file.html#argument-group",
    "title": "Download file",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nURL to a file to download.\nstring, required, example: \"https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n\n\n--output\nPath where to store output.\nfile, required, example: \"pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\"\n\n\n--verbose\nIncrease verbosity\nboolean_true"
  },
  {
    "objectID": "components/modules/download/download_file.html#authors",
    "href": "components/modules/download/download_file.html#authors",
    "title": "Download file",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/modules/download/sync_test_resources.html",
    "href": "components/modules/download/sync_test_resources.html",
    "title": "Sync test resources",
    "section": "",
    "text": "ID: sync_test_resources\nNamespace: download\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/download/sync_test_resources.html#example-commands",
    "href": "components/modules/download/sync_test_resources.html#example-commands",
    "title": "Sync test resources",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/download/sync_test_resources/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: \"s3://openpipelines-data\"\n# output: \"$id.$key.output.output\"\nquiet: false\ndryrun: false\ndelete: false\n# exclude: [\"foo\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/download/sync_test_resources/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/download/sync_test_resources.html#argument-group",
    "href": "components/modules/download/sync_test_resources.html#argument-group",
    "title": "Sync test resources",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the S3 bucket to sync from.\nstring, default: \"s3://openpipelines-data\"\n\n\n--output\nPath to the test resource directory.\nfile, default: \"resources_test\"\n\n\n--quiet\nDisplays the operations that would be performed using the specified command without actually running them.\nboolean_true\n\n\n--dryrun\nDoes not display the operations performed from the specified command.\nboolean_true\n\n\n--delete\nFiles that exist in the destination but not in the source are deleted during sync.\nboolean_true\n\n\n--exclude\nExclude all files or objects from the command that matches the specified pattern.\nstring"
  },
  {
    "objectID": "components/modules/download/sync_test_resources.html#authors",
    "href": "components/modules/download/sync_test_resources.html#authors",
    "title": "Sync test resources",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/modules/neighbors/bbknn.html",
    "href": "components/modules/neighbors/bbknn.html",
    "title": "Bbknn",
    "section": "",
    "text": "ID: bbknn\nNamespace: neighbors\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/neighbors/bbknn.html#example-commands",
    "href": "components/modules/neighbors/bbknn.html#example-commands",
    "title": "Bbknn",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/neighbors/bbknn/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\n# input: \"path/to/file\"\nmodality: \"rna\"\nobsm_input: \"X_pca\"\nobs_batch: \"batch\"\n# output: \"$id.$key.output.output\"\nuns_output: \"neighbors\"\nobsp_distances: \"distances\"\nobsp_connectivities: \"connectivities\"\nn_neighbors_within_batch: 3\nn_pcs: 50\n# n_trim: 123\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/neighbors/bbknn/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/neighbors/bbknn.html#argument-group",
    "href": "components/modules/neighbors/bbknn.html#argument-group",
    "title": "Bbknn",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obsm_input\nThe dimensionality reduction in .obsm to use for neighbour detection. Defaults to X_pca.\nstring, default: \"X_pca\"\n\n\n--obs_batch\n.obs column name discriminating between your batches.\nstring, default: \"batch\"\n\n\n--output\nOutput .h5mu file.\nfile, required\n\n\n--uns_output\nMandatory .uns slot to store various neighbor output objects.\nstring, default: \"neighbors\"\n\n\n--obsp_distances\nIn which .obsp slot to store the distance matrix between the resulting neighbors.\nstring, default: \"distances\"\n\n\n--obsp_connectivities\nIn which .obsp slot to store the connectivities matrix between the resulting neighbors.\nstring, default: \"connectivities\"\n\n\n--n_neighbors_within_batch\nHow many top neighbours to report for each batch; total number of neighbours in the initial k-nearest-neighbours computation will be this number times the number of batches.\ninteger, default: 3\n\n\n--n_pcs\nHow many dimensions (in case of PCA, principal components) to use in the analysis.\ninteger, default: 50\n\n\n--n_trim\nTrim the neighbours of each cell to these many top connectivities. May help with population independence and improve the tidiness of clustering. The lower the value the more independent the individual populations, at the cost of more conserved batch effect. If None (default), sets the parameter value automatically to 10 times neighbors_within_batch times the number of batches. Set to 0 to skip.\ninteger"
  },
  {
    "objectID": "components/modules/neighbors/bbknn.html#authors",
    "href": "components/modules/neighbors/bbknn.html#authors",
    "title": "Bbknn",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/neighbors/find_neighbors.html",
    "href": "components/modules/neighbors/find_neighbors.html",
    "title": "Find neighbors",
    "section": "",
    "text": "ID: find_neighbors\nNamespace: neighbors\n\n\n\nSource\nThe neighbor search efficiency of this heavily relies on UMAP [McInnes18], which also provides a method for estimating connectivities of data points - the connectivity of the manifold (method==‘umap’). If method==‘gauss’, connectivities are computed according to [Coifman05], in the adaption of [Haghverdi16]."
  },
  {
    "objectID": "components/modules/neighbors/find_neighbors.html#example-commands",
    "href": "components/modules/neighbors/find_neighbors.html#example-commands",
    "title": "Find neighbors",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/neighbors/find_neighbors/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nobsm_input: \"X_pca\"\n# output: \"$id.$key.output.h5mu\"\nuns_output: \"neighbors\"\nobsp_distances: \"distances\"\nobsp_connectivities: \"connectivities\"\nmetric: \"euclidean\"\nnum_neighbors: 15\nseed: 0\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/neighbors/find_neighbors/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/neighbors/find_neighbors.html#argument-group",
    "href": "components/modules/neighbors/find_neighbors.html#argument-group",
    "title": "Find neighbors",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obsm_input\nWhich .obsm slot to use as a starting PCA embedding.\nstring, default: \"X_pca\"\n\n\n--output\nOutput h5mu file containing the found neighbors.\nfile, example: \"output.h5mu\"\n\n\n--uns_output\nMandatory .uns slot to store various neighbor output objects.\nstring, default: \"neighbors\"\n\n\n--obsp_distances\nIn which .obsp slot to store the distance matrix between the resulting neighbors.\nstring, default: \"distances\"\n\n\n--obsp_connectivities\nIn which .obsp slot to store the connectivities matrix between the resulting neighbors.\nstring, default: \"connectivities\"\n\n\n--metric\nThe distance metric to be used in the generation of the nearest neighborhood network.\nstring, default: \"euclidean\"\n\n\n--num_neighbors\nThe size of local neighborhood (in terms of number of neighboring data points) used for manifold approximation. Larger values result in more global views of the manifold, while smaller values result in more local data being preserved. In general values should be in the range 2 to 100. If knn is True, number of nearest neighbors to be searched. If knn is False, a Gaussian kernel width is set to the distance of the n_neighbors neighbor.\ninteger, default: 15\n\n\n--seed\nA random seed.\ninteger, default: 0"
  },
  {
    "objectID": "components/modules/neighbors/find_neighbors.html#authors",
    "href": "components/modules/neighbors/find_neighbors.html#authors",
    "title": "Find neighbors",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "components/modules/filter/filter_with_scrublet.html",
    "href": "components/modules/filter/filter_with_scrublet.html",
    "title": "Filter with scrublet",
    "section": "",
    "text": "ID: filter_with_scrublet\nNamespace: filter\n\n\n\nSource\nThe method tests for potential doublets by using the expression profiles of cells to generate synthetic potential doubles which are tested against cells. The method returns a “doublet score” on which it calls for potential doublets.\nFor the source code please visit https://github.com/AllonKleinLab/scrublet.\nFor 10x we expect the doublet rates to be: Multiplet Rate (%) - # of Cells Loaded - # of Cells Recovered ~0.4% ~800 ~500 ~0.8% ~1,600 ~1,000 ~1.6% ~3,200 ~2,000 ~2.3% ~4,800 ~3,000 ~3.1% ~6,400 ~4,000 ~3.9% ~8,000 ~5,000 ~4.6% ~9,600 ~6,000 ~5.4% ~11,200 ~7,000 ~6.1% ~12,800 ~8,000 ~6.9% ~14,400 ~9,000 ~7.6% ~16,000 ~10,000"
  },
  {
    "objectID": "components/modules/filter/filter_with_scrublet.html#example-commands",
    "href": "components/modules/filter/filter_with_scrublet.html#example-commands",
    "title": "Filter with scrublet",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/filter_with_scrublet/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# output: \"$id.$key.output.h5mu\"\nobs_name_filter: \"filter_with_scrublet\"\ndo_subset: false\nobs_name_doublet_score: \"scrublet_doublet_score\"\nmin_counts: 2\nmin_cells: 3\nmin_gene_variablity_percent: 85\nnum_pca_components: 30\ndistance_metric: \"euclidean\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/filter_with_scrublet/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/filter/filter_with_scrublet.html#argument-group",
    "href": "components/modules/filter/filter_with_scrublet.html#argument-group",
    "title": "Filter with scrublet",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--obs_name_filter\nIn which .obs slot to store a boolean array corresponding to which observations should be filtered out.\nstring, default: \"filter_with_scrublet\"\n\n\n--do_subset\nWhether to subset before storing the output.\nboolean_true\n\n\n--obs_name_doublet_score\nName of the doublet scores column in the obs slot of the returned object.\nstring, default: \"scrublet_doublet_score\"\n\n\n--min_counts\nThe number of minimal UMI counts per cell that have to be present for initial cell detection.\ninteger, default: 2\n\n\n--min_cells\nThe number of cells in which UMIs for a gene were detected.\ninteger, default: 3\n\n\n--min_gene_variablity_percent\nUsed for gene filtering prior to PCA. Keep the most highly variable genes (in the top min_gene_variability_pctl percentile), as measured by the v-statistic [Klein et al., Cell 2015].\ndouble, default: 85\n\n\n--num_pca_components\nNumber of principal components to use during PCA dimensionality reduction.\ninteger, default: 30\n\n\n--distance_metric\nThe distance metric used for computing similarities.\nstring, default: \"euclidean\""
  },
  {
    "objectID": "components/modules/filter/filter_with_scrublet.html#authors",
    "href": "components/modules/filter/filter_with_scrublet.html#authors",
    "title": "Filter with scrublet",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (contributor)\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "components/modules/filter/filter_with_counts.html",
    "href": "components/modules/filter/filter_with_counts.html",
    "title": "Filter with counts",
    "section": "",
    "text": "ID: filter_with_counts\nNamespace: filter\n\n\n\nSource\nThis is based on both the UMI counts, the gene counts and the mitochondrial genes (genes starting with mt/MT)"
  },
  {
    "objectID": "components/modules/filter/filter_with_counts.html#example-commands",
    "href": "components/modules/filter/filter_with_counts.html#example-commands",
    "title": "Filter with counts",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/filter_with_counts/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# layer: \"raw_counts\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\ndo_subset: false\nobs_name_filter: \"filter_with_counts\"\nvar_name_filter: \"filter_with_counts\"\n\n# Arguments\n# min_counts: 200\n# max_counts: 5000000\n# min_genes_per_cell: 200\n# max_genes_per_cell: 1500000\n# min_cells_per_gene: 3\n# min_fraction_mito: 0\n# max_fraction_mito: 0.2\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/filter_with_counts/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/filter/filter_with_counts.html#argument-groups",
    "href": "components/modules/filter/filter_with_counts.html#argument-groups",
    "title": "Filter with counts",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--layer\n\nstring, example: \"raw_counts\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--do_subset\nWhether to subset before storing the output.\nboolean_true\n\n\n--obs_name_filter\nIn which .obs slot to store a boolean array corresponding to which observations should be removed.\nstring, default: \"filter_with_counts\"\n\n\n--var_name_filter\nIn which .var slot to store a boolean array corresponding to which variables should be removed.\nstring, default: \"filter_with_counts\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_counts\nMinimum number of counts captured per cell.\ninteger, example: 200\n\n\n--max_counts\nMaximum number of counts captured per cell.\ninteger, example: 5000000\n\n\n--min_genes_per_cell\nMinimum of non-zero values per cell.\ninteger, example: 200\n\n\n--max_genes_per_cell\nMaximum of non-zero values per cell.\ninteger, example: 1500000\n\n\n--min_cells_per_gene\nMinimum of non-zero values per gene.\ninteger, example: 3\n\n\n--min_fraction_mito\nMinimum fraction of UMIs that are mitochondrial.\ndouble, example: 0\n\n\n--max_fraction_mito\nMaximum fraction of UMIs that are mitochondrial.\ndouble, example: 0.2"
  },
  {
    "objectID": "components/modules/filter/filter_with_counts.html#authors",
    "href": "components/modules/filter/filter_with_counts.html#authors",
    "title": "Filter with counts",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (maintainer, author)"
  },
  {
    "objectID": "components/modules/filter/do_filter.html",
    "href": "components/modules/filter/do_filter.html",
    "title": "Do filter",
    "section": "",
    "text": "ID: do_filter\nNamespace: filter\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/filter/do_filter.html#example-commands",
    "href": "components/modules/filter/do_filter.html#example-commands",
    "title": "Do filter",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/do_filter/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# obs_filter: [\"filter_with_x\"]\nvar_filter: [\"filter_with_x\"]\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/do_filter/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/filter/do_filter.html#argument-group",
    "href": "components/modules/filter/do_filter.html#argument-group",
    "title": "Do filter",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obs_filter\nWhich .obs columns to use to filter the observations by.\nstring, example: \"filter_with_x\"\n\n\n--var_filter\nWhich .var columns to use to filter the observations by.\nstring, default: \"filter_with_x\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "components/modules/filter/do_filter.html#authors",
    "href": "components/modules/filter/do_filter.html#authors",
    "title": "Do filter",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "components/modules/filter/filter_with_hvg.html",
    "href": "components/modules/filter/filter_with_hvg.html",
    "title": "Filter with hvg",
    "section": "",
    "text": "ID: filter_with_hvg\nNamespace: filter\n\n\n\nSource\nExpects logarithmized data, except when flavor=‘seurat_v3’ in which count data is expected.\nDepending on flavor, this reproduces the R-implementations of Seurat [Satija15], Cell Ranger [Zheng17], and Seurat v3 [Stuart19].\nFor the dispersion-based methods ([Satija15] and [Zheng17]), the normalized dispersion is obtained by scaling with the mean and standard deviation of the dispersions for genes falling into a given bin for mean expression of genes. This means that for each bin of mean expression, highly variable genes are selected.\nFor [Stuart19], a normalized variance for each gene is computed. First, the data are standardized (i.e., z-score normalization per feature) with a regularized standard deviation. Next, the normalized variance is computed as the variance of each gene after the transformation. Genes are ranked by the normalized variance."
  },
  {
    "objectID": "components/modules/filter/filter_with_hvg.html#example-commands",
    "href": "components/modules/filter/filter_with_hvg.html#example-commands",
    "title": "Filter with hvg",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/filter_with_hvg/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# layer: \"foo\"\n# output: \"$id.$key.output.h5mu\"\nvar_name_filter: \"filter_with_hvg\"\nvarm_name: \"hvg\"\ndo_subset: false\nflavor: \"seurat\"\n# n_top_genes: 123\nmin_mean: 0.0125\nmax_mean: 3\nmin_disp: 0.5\n# max_disp: 123.0\nspan: 0.3\nn_bins: 20\n# obs_batch_key: \"foo\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/filter_with_hvg/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/filter/filter_with_hvg.html#argument-group",
    "href": "components/modules/filter/filter_with_hvg.html#argument-group",
    "title": "Filter with hvg",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--layer\nuse adata.layers[layer] for expression values instead of adata.X.\nstring\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--var_name_filter\nIn which .var slot to store a boolean array corresponding to which observations should be filtered out.\nstring, default: \"filter_with_hvg\"\n\n\n--varm_name\nIn which .varm slot to store additional metadata.\nstring, default: \"hvg\"\n\n\n--do_subset\nWhether to subset before storing the output.\nboolean_true\n\n\n--flavor\nChoose the flavor for identifying highly variable genes. For the dispersion based methods in their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_genes.\nstring, default: \"seurat\"\n\n\n--n_top_genes\nNumber of highly-variable genes to keep. Mandatory if flavor=‘seurat_v3’.\ninteger\n\n\n--min_mean\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’.\ndouble, default: 0.0125\n\n\n--max_mean\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’.\ndouble, default: 3\n\n\n--min_disp\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’.\ndouble, default: 0.5\n\n\n--max_disp\nIf n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor=‘seurat_v3’. Default is +inf.\ndouble\n\n\n--span\nThe fraction of the data (cells) used when estimating the variance in the loess model fit if flavor=‘seurat_v3’.\ndouble, default: 0.3\n\n\n--n_bins\nNumber of bins for binning the mean gene expression. Normalization is done with respect to each bin. If just a single gene falls into a bin, the normalized dispersion is artificially set to 1.\ninteger, default: 20\n\n\n--obs_batch_key\nIf specified, highly-variable genes are selected within each batch separately and merged. This simple process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. For all flavors, genes are first sorted by how many batches they are a HVG. For dispersion-based flavors ties are broken by normalized dispersion. If flavor = ‘seurat_v3’, ties are broken by the median (across batches) rank based on within-batch normalized variance.\nstring"
  },
  {
    "objectID": "components/modules/filter/filter_with_hvg.html#authors",
    "href": "components/modules/filter/filter_with_hvg.html#authors",
    "title": "Filter with hvg",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (contributor)\nRobrecht Cannoodt   (maintainer, contributor)"
  },
  {
    "objectID": "components/modules/filter/subset_h5mu.html",
    "href": "components/modules/filter/subset_h5mu.html",
    "title": "Subset h5mu",
    "section": "",
    "text": "ID: subset_h5mu\nNamespace: filter\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/filter/subset_h5mu.html#example-commands",
    "href": "components/modules/filter/subset_h5mu.html#example-commands",
    "title": "Subset h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/filter/subset_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# output: \"$id.$key.output.h5mu\"\n# number_of_observations: 5\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/filter/subset_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/filter/subset_h5mu.html#argument-group",
    "href": "components/modules/filter/subset_h5mu.html#argument-group",
    "title": "Subset h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--number_of_observations\nNumber of observations to be selected from the h5mu file.\ninteger, example: 5"
  },
  {
    "objectID": "components/modules/filter/subset_h5mu.html#authors",
    "href": "components/modules/filter/subset_h5mu.html#authors",
    "title": "Subset h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/demux/bcl_convert.html",
    "href": "components/modules/demux/bcl_convert.html",
    "title": "Bcl convert",
    "section": "",
    "text": "ID: bcl_convert\nNamespace: demux\n\n\n\nSource\nInformation about upgrading from bcl2fastq via https://emea.support.illumina.com/bulletins/2020/10/upgrading-from-bcl2fastq-to-bcl-convert.html and https://support.illumina.com/sequencing/sequencing_software/bcl-convert/compatibility.html"
  },
  {
    "objectID": "components/modules/demux/bcl_convert.html#example-commands",
    "href": "components/modules/demux/bcl_convert.html#example-commands",
    "title": "Bcl convert",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/demux/bcl_convert/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"bcl_dir\"\nsample_sheet: # please fill in - example: \"bcl_dir\"\n# output: \"$id.$key.output.output\"\n# reports: \"$id.$key.reports.reports\"\ntest_mode: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/bcl_convert/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/demux/bcl_convert.html#argument-group",
    "href": "components/modules/demux/bcl_convert.html#argument-group",
    "title": "Bcl convert",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput run directory\nfile, required, example: \"bcl_dir\"\n\n\n--sample_sheet\nPointer to the sample sheet\nfile, required, example: \"bcl_dir\"\n\n\n--output\nOutput directory containig fastq files\nfile, required, example: \"fastq_dir\"\n\n\n--reports\nReports directory\nfile, example: \"reports_dir\"\n\n\n--test_mode\nShould bcl-convert be run in test mode (using –first-tile-only)?\nboolean, default: FALSE"
  },
  {
    "objectID": "components/modules/demux/bcl_convert.html#authors",
    "href": "components/modules/demux/bcl_convert.html#authors",
    "title": "Bcl convert",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (author, maintainer)\nMarijke Van Moerbeke  (author)"
  },
  {
    "objectID": "components/modules/demux/cellranger_mkfastq.html",
    "href": "components/modules/demux/cellranger_mkfastq.html",
    "title": "Cellranger mkfastq",
    "section": "",
    "text": "ID: cellranger_mkfastq\nNamespace: demux\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/demux/cellranger_mkfastq.html#example-commands",
    "href": "components/modules/demux/cellranger_mkfastq.html#example-commands",
    "title": "Cellranger mkfastq",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/demux/cellranger_mkfastq/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"/path/to/bcl\"\nsample_sheet: # please fill in - example: \"SampleSheet.csv\"\n# output: \"$id.$key.output.output\"\n# reports: \"$id.$key.reports.reports\"\n# cores: 2\n# memory: 10\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/cellranger_mkfastq/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/demux/cellranger_mkfastq.html#argument-group",
    "href": "components/modules/demux/cellranger_mkfastq.html#argument-group",
    "title": "Cellranger mkfastq",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the (untarred) BCL files. Expects ‘RunParameters.xml’ at ‘./’.\nfile, required, example: \"/path/to/bcl\"\n\n\n--sample_sheet\nThe path to the sample sheet.\nfile, required, example: \"SampleSheet.csv\"\n\n\n--output\nThe folder to store the demux results\nfile, required, default: \"fastqs\", example: \"/path/to/output\"\n\n\n--reports\nReports directory\nfile, example: \"reports_dir\"\n\n\n--cores\nSet max cores the pipeline may request at one time.\ninteger, example: 2\n\n\n--memory\nSet max GB the pipeline may request at one time.\ninteger, example: 10"
  },
  {
    "objectID": "components/modules/demux/cellranger_mkfastq.html#authors",
    "href": "components/modules/demux/cellranger_mkfastq.html#authors",
    "title": "Cellranger mkfastq",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "components/modules/demux/bcl2fastq.html",
    "href": "components/modules/demux/bcl2fastq.html",
    "title": "Bcl2fastq",
    "section": "",
    "text": "ID: bcl2fastq\nNamespace: demux\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/demux/bcl2fastq.html#example-commands",
    "href": "components/modules/demux/bcl2fastq.html#example-commands",
    "title": "Bcl2fastq",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/demux/bcl2fastq/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"bcl_dir\"\nsample_sheet: # please fill in - example: \"SampleSheet.csv\"\n# output: \"$id.$key.output.output\"\n# reports: \"$id.$key.reports.reports\"\nignore_missing: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/demux/bcl2fastq/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/demux/bcl2fastq.html#argument-group",
    "href": "components/modules/demux/bcl2fastq.html#argument-group",
    "title": "Bcl2fastq",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput run directory\nfile, required, example: \"bcl_dir\"\n\n\n--sample_sheet\nPointer to the sample sheet\nfile, required, example: \"SampleSheet.csv\"\n\n\n--output\nOutput directory containig fastq files\nfile, required, example: \"fastq_dir\"\n\n\n--reports\nReports directory\nfile, example: \"reports_dir\"\n\n\n--ignore_missing\n\nboolean_true"
  },
  {
    "objectID": "components/modules/demux/bcl2fastq.html#authors",
    "href": "components/modules/demux/bcl2fastq.html#authors",
    "title": "Bcl2fastq",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (author, maintainer)"
  },
  {
    "objectID": "components/modules/mapping/star_align.html",
    "href": "components/modules/mapping/star_align.html",
    "title": "Star align",
    "section": "",
    "text": "ID: star_align\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/mapping/star_align.html#example-commands",
    "href": "components/modules/mapping/star_align.html#example-commands",
    "title": "Star align",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/star_align/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Input/Output\ninput: # please fill in - example: [\"mysample_S1_L001_R1_001.fastq.gz\", \"mysample_S1_L001_R2_001.fastq.gz\"]\nreference: # please fill in - example: \"/path/to/reference\"\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/star_align/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/mapping/star_align.html#argument-groups",
    "href": "components/modules/mapping/star_align.html#argument-groups",
    "title": "Star align",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput/Output\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe FASTQ files to be analyzed.\nfile, required, example: \"mysample_S1_L001_R1_001.fastq.gz\", example: \"mysample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nPath to the reference built by star_mkref.\nfile, required, example: \"/path/to/reference\"\n\n\n--output\nPath to output directory.\nfile, required, example: \"/path/to/foo\"\n\n\n\n\n\nRun Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--runRNGseed\nrandom number generator seed.\ninteger, example: 777\n\n\n\n\n\nGenome Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--genomeLoad\nmode of shared memory usage for the genome files. Only used with –runMode alignReads. - LoadAndKeep … load genome into shared and keep it in memory after run - LoadAndRemove … load genome into shared but remove it after run - LoadAndExit … load genome into shared memory and exit, keeping the genome in memory for future runs - Remove … do not map anything, just remove loaded genome from memory - NoSharedMemory … do not use shared memory, each job will have its own private copy of the genome\nstring, example: \"NoSharedMemory\"\n\n\n--genomeFastaFiles\npath(s) to the fasta files with the genome sequences, separated by spaces. These files should be plain text FASTA files, they cannot be zipped. Required for the genome generation (–runMode genomeGenerate). Can also be used in the mapping (–runMode alignReads) to add extra (new) sequences to the genome (e.g. spike-ins).\nfile\n\n\n--genomeFileSizes\ngenome files exact sizes in bytes. Typically, this should not be defined by the user.\ninteger, example: 0\n\n\n--genomeTransformOutput\nwhich output to transform back to original genome - SAM … SAM/BAM alignments - SJ … splice junctions (SJ.out.tab) - None … no transformation of the output\nstring\n\n\n--genomeChrSetMitochondrial\nnames of the mitochondrial chromosomes. Presently only used for STARsolo statistics output/\nstring, example: \"chrM\", example: \"M\", example: \"MT\"\n\n\n\n\n\nSplice Junctions Database\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sjdbFileChrStartEnd\npath to the files with genomic coordinates (chr  start  end  strand) for the splice junction introns. Multiple files can be supplied and will be concatenated.\nstring\n\n\n--sjdbGTFfile\npath to the GTF file with annotations\nfile\n\n\n--sjdbGTFchrPrefix\nprefix for chromosome names in a GTF file (e.g. ‘chr’ for using ENSMEBL annotations with UCSC genomes)\nstring\n\n\n--sjdbGTFfeatureExon\nfeature type in GTF file to be used as exons for building transcripts\nstring, example: \"exon\"\n\n\n--sjdbGTFtagExonParentTranscript\nGTF attribute name for parent transcript ID (default “transcript_id” works for GTF files)\nstring, example: \"transcript_id\"\n\n\n--sjdbGTFtagExonParentGene\nGTF attribute name for parent gene ID (default “gene_id” works for GTF files)\nstring, example: \"gene_id\"\n\n\n--sjdbGTFtagExonParentGeneName\nGTF attribute name for parent gene name\nstring, example: \"gene_name\"\n\n\n--sjdbGTFtagExonParentGeneType\nGTF attribute name for parent gene type\nstring, example: \"gene_type\", example: \"gene_biotype\"\n\n\n--sjdbOverhang\nlength of the donor/acceptor sequence on each side of the junctions, ideally = (mate_length - 1)\ninteger, example: 100\n\n\n--sjdbScore\nextra alignment score for alignments that cross database junctions\ninteger, example: 2\n\n\n--sjdbInsertSave\nwhich files to save when sjdb junctions are inserted on the fly at the mapping step - Basic … only small junction / transcript files - All … all files including big Genome, SA and SAindex - this will create a complete genome directory\nstring, example: \"Basic\"\n\n\n\n\n\nVariation parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--varVCFfile\npath to the VCF file that contains variation data. The 10th column should contain the genotype information, e.g. 0/1\nstring\n\n\n\n\n\nRead Parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--readFilesType\nformat of input read files - Fastx … FASTA or FASTQ - SAM SE … SAM or BAM single-end reads; for BAM use –readFilesCommand samtools view - SAM PE … SAM or BAM paired-end reads; for BAM use –readFilesCommand samtools view\nstring, example: \"Fastx\"\n\n\n--readFilesSAMattrKeep\nfor –readFilesType SAM SE/PE, which SAM tags to keep in the output BAM, e.g.: –readFilesSAMtagsKeep RG PL - All … keep all tags - None … do not keep any tags\nstring, example: \"All\"\n\n\n--readFilesManifest\npath to the “manifest” file with the names of read files. The manifest file should contain 3 tab-separated columns: paired-end reads: read1_file_name \\(tab\\) read2_file_name \\(tab\\) read_group_line. single-end reads: read1_file_name \\(tab\\) - \\(tab\\) read_group_line. Spaces, but not tabs are allowed in file names. If read_group_line does not start with ID:, it can only contain one ID field, and ID: will be added to it. If read_group_line starts with ID:, it can contain several fields separated by \\(tab\\), and all fields will be be copied verbatim into SAM @RG header line.\nfile\n\n\n--readFilesPrefix\nprefix for the read files names, i.e. it will be added in front of the strings in –readFilesIn\nstring\n\n\n--readFilesCommand\ncommand line to execute for each of the input file. This command should generate FASTA or FASTQ text and send it to stdout For example: zcat - to uncompress .gz files, bzcat - to uncompress .bz2 files, etc.\nstring\n\n\n--readMapNumber\nnumber of reads to map from the beginning of the file -1: map all reads\ninteger, example: -1\n\n\n--readMatesLengthsIn\nEqual/NotEqual - lengths of names,sequences,qualities for both mates are the same / not the same. NotEqual is safe in all situations.\nstring, example: \"NotEqual\"\n\n\n--readNameSeparator\ncharacter(s) separating the part of the read names that will be trimmed in output (read name after space is always trimmed)\nstring, example: \"/\"\n\n\n--readQualityScoreBase\nnumber to be subtracted from the ASCII code to get Phred quality score\ninteger, example: 33\n\n\n\n\n\nRead Clipping\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--clipAdapterType\nadapter clipping type - Hamming … adapter clipping based on Hamming distance, with the number of mismatches controlled by –clip5pAdapterMMp - CellRanger4 … 5p and 3p adapter clipping similar to CellRanger4. Utilizes Opal package by Martin Šošić: https://github.com/Martinsos/opal - None … no adapter clipping, all other clip* parameters are disregarded\nstring, example: \"Hamming\"\n\n\n--clip3pNbases\nnumber(s) of bases to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n--clip3pAdapterSeq\nadapter sequences to clip from 3p of each mate. If one value is given, it will be assumed the same for both mates. - polyA … polyA sequence with the length equal to read length\nstring\n\n\n--clip3pAdapterMMp\nmax proportion of mismatches for 3p adapter clipping for each mate. If one value is given, it will be assumed the same for both mates.\ndouble, example: 0.1\n\n\n--clip3pAfterAdapterNbases\nnumber of bases to clip from 3p of each mate after the adapter clipping. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n--clip5pNbases\nnumber(s) of bases to clip from 5p of each mate. If one value is given, it will be assumed the same for both mates.\ninteger, example: 0\n\n\n\n\n\nLimits\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--limitGenomeGenerateRAM\nmaximum available RAM (bytes) for genome generation\nlong, example: NA\n\n\n--limitIObufferSize\nmax available buffers size (bytes) for input/output, per thread\nlong, example: 30000000, example: 50000000\n\n\n--limitOutSAMoneReadBytes\nmax size of the SAM record (bytes) for one read. Recommended value: >(2(LengthMate1+LengthMate2+100)outFilterMultimapNmax\nlong, example: 100000\n\n\n--limitOutSJoneRead\nmax number of junctions for one read (including all multi-mappers)\ninteger, example: 1000\n\n\n--limitOutSJcollapsed\nmax number of collapsed junctions\ninteger, example: 1000000\n\n\n--limitBAMsortRAM\nmaximum available RAM (bytes) for sorting BAM. If =0, it will be set to the genome index size. 0 value can only be used with –genomeLoad NoSharedMemory option.\nlong, example: 0\n\n\n--limitSjdbInsertNsj\nmaximum number of junctions to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run\ninteger, example: 1000000\n\n\n--limitNreadsSoft\nsoft limit on the number of reads\ninteger, example: -1\n\n\n\n\n\nOutput: general\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outTmpKeep\nwhether to keep the temporary files after STAR runs is finished - None … remove all temporary files - All … keep all files\nstring\n\n\n--outStd\nwhich output will be directed to stdout (standard out) - Log … log messages - SAM … alignments in SAM format (which normally are output to Aligned.out.sam file), normal standard output will go into Log.std.out - BAM_Unsorted … alignments in BAM format, unsorted. Requires –outSAMtype BAM Unsorted - BAM_SortedByCoordinate … alignments in BAM format, sorted by coordinate. Requires –outSAMtype BAM SortedByCoordinate - BAM_Quant … alignments to transcriptome in BAM format, unsorted. Requires –quantMode TranscriptomeSAM\nstring, example: \"Log\"\n\n\n--outReadsUnmapped\noutput of unmapped and partially mapped (i.e. mapped only one mate of a paired end read) reads in separate file(s). - None … no output - Fastx … output in separate fasta/fastq files, Unmapped.out.mate1/2\nstring\n\n\n--outQSconversionAdd\nadd this number to the quality score (e.g. to convert from Illumina to Sanger, use -31)\ninteger, example: 0\n\n\n--outMultimapperOrder\norder of multimapping alignments in the output files - Old_2.4 … quasi-random order used before 2.5.0 - Random … random order of alignments for each multi-mapper. Read mates (pairs) are always adjacent, all alignment for each read stay together. This option will become default in the future releases.\nstring, example: \"Old_2.4\"\n\n\n\n\n\nOutput: SAM and BAM\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSAMtype\ntype of SAM/BAM output 1st word: - BAM … output BAM without sorting - SAM … output SAM without sorting - None … no SAM/BAM output 2nd, 3rd: - Unsorted … standard unsorted - SortedByCoordinate … sorted by coordinate. This option will allocate extra memory for sorting which can be specified by –limitBAMsortRAM.\nstring, example: \"SAM\"\n\n\n--outSAMmode\nmode of SAM output - None … no SAM output - Full … full SAM output - NoQS … full SAM but without quality scores\nstring, example: \"Full\"\n\n\n--outSAMstrandField\nCufflinks-like strand field flag - None … not used - intronMotif … strand derived from the intron motif. This option changes the output alignments: reads with inconsistent and/or non-canonical introns are filtered out.\nstring\n\n\n--outSAMattributes\na string of desired SAM attributes, in the order desired for the output SAM. Tags can be listed in any combination/order. Presets: - None … no attributes - Standard … NH HI AS nM - All … NH HI AS nM NM MD jM jI MC ch Alignment: - NH … number of loci the reads maps to: =1 for unique mappers, >1 for multimappers. Standard SAM tag. - HI … multiple alignment index, starts with –outSAMattrIHstart (=1 by default). Standard SAM tag. - AS … local alignment score, +1/-1 for matches/mismateches, score* penalties for indels and gaps. For PE reads, total score for two mates. Stadnard SAM tag. - nM … number of mismatches. For PE reads, sum over two mates. - NM … edit distance to the reference (number of mismatched + inserted + deleted bases) for each mate. Standard SAM tag. - MD … string encoding mismatched and deleted reference bases (see standard SAM specifications). Standard SAM tag. - jM … intron motifs for all junctions (i.e. N in CIGAR): 0: non-canonical; 1: GT/AG, 2: CT/AC, 3: GC/AG, 4: CT/GC, 5: AT/AC, 6: GT/AT. If splice junctions database is used, and a junction is annotated, 20 is added to its motif value. - jI … start and end of introns for all junctions (1-based). - XS … alignment strand according to –outSAMstrandField. - MC … mate’s CIGAR string. Standard SAM tag. - ch … marks all segment of all chimeric alingments for –chimOutType WithinBAM output. - cN … number of bases clipped from the read ends: 5’ and 3’ Variation: - vA … variant allele - vG … genomic coordinate of the variant overlapped by the read. - vW … 1 - alignment passes WASP filtering; 2,3,4,5,6,7 - alignment does not pass WASP filtering. Requires –waspOutputMode SAMtag. STARsolo: - CR CY UR UY … sequences and quality scores of cell barcodes and UMIs for the solo* demultiplexing. - GX GN … gene ID and gene name for unique-gene reads. - gx gn … gene IDs and gene names for unique- and multi-gene reads. - CB UB … error-corrected cell barcodes and UMIs for solo* demultiplexing. Requires –outSAMtype BAM SortedByCoordinate. - sM … assessment of CB and UMI. - sS … sequence of the entire barcode (CB,UMI,adapter). - sQ … quality of the entire barcode. ***Unsupported/undocumented: - ha … haplotype (1/2) when mapping to the diploid genome. Requires genome generated with –genomeTransformType Diploid . - rB … alignment block read/genomic coordinates. - vR … read coordinate of the variant.\nstring, example: \"Standard\"\n\n\n--outSAMattrIHstart\nstart value for the IH attribute. 0 may be required by some downstream software, such as Cufflinks or StringTie.\ninteger, example: 1\n\n\n--outSAMunmapped\noutput of unmapped reads in the SAM format 1st word: - None … no output - Within … output unmapped reads within the main SAM file (i.e. Aligned.out.sam) 2nd word: - KeepPairs … record unmapped mate for each alignment, and, in case of unsorted output, keep it adjacent to its mapped mate. Only affects multi-mapping reads.\nstring\n\n\n--outSAMorder\ntype of sorting for the SAM output Paired: one mate after the other for all paired alignments PairedKeepInputOrder: one mate after the other for all paired alignments, the order is kept the same as in the input FASTQ files\nstring, example: \"Paired\"\n\n\n--outSAMprimaryFlag\nwhich alignments are considered primary - all others will be marked with 0x100 bit in the FLAG - OneBestScore … only one alignment with the best score is primary - AllBestScore … all alignments with the best score are primary\nstring, example: \"OneBestScore\"\n\n\n--outSAMreadID\nread ID record type - Standard … first word (until space) from the FASTx read ID line, removing /1,/2 from the end - Number … read number (index) in the FASTx file\nstring, example: \"Standard\"\n\n\n--outSAMmapqUnique\n0 to 255: the MAPQ value for unique mappers\ninteger, example: 255\n\n\n--outSAMflagOR\n0 to 65535: sam FLAG will be bitwise OR’d with this value, i.e. FLAG=FLAG | outSAMflagOR. This is applied after all flags have been set by STAR, and after outSAMflagAND. Can be used to set specific bits that are not set otherwise.\ninteger, example: 0\n\n\n--outSAMflagAND\n0 to 65535: sam FLAG will be bitwise AND’d with this value, i.e. FLAG=FLAG & outSAMflagOR. This is applied after all flags have been set by STAR, but before outSAMflagOR. Can be used to unset specific bits that are not set otherwise.\ninteger, example: 65535\n\n\n--outSAMattrRGline\nSAM/BAM read group line. The first word contains the read group identifier and must start with “ID:”, e.g. –outSAMattrRGline ID:xxx CN:yy “DS:z z z”. xxx will be added as RG tag to each output alignment. Any spaces in the tag values have to be double quoted. Comma separated RG lines correspons to different (comma separated) input files in –readFilesIn. Commas have to be surrounded by spaces, e.g. –outSAMattrRGline ID:xxx , ID:zzz “DS:z z” , ID:yyy DS:yyyy\nstring\n\n\n--outSAMheaderHD\n@HD (header) line of the SAM header\nstring\n\n\n--outSAMheaderPG\nextra @PG (software) line of the SAM header (in addition to STAR)\nstring\n\n\n--outSAMheaderCommentFile\npath to the file with @CO (comment) lines of the SAM header\nstring\n\n\n--outSAMfilter\nfilter the output into main SAM/BAM files - KeepOnlyAddedReferences … only keep the reads for which all alignments are to the extra reference sequences added with –genomeFastaFiles at the mapping stage. - KeepAllAddedReferences … keep all alignments to the extra reference sequences added with –genomeFastaFiles at the mapping stage.\nstring\n\n\n--outSAMmultNmax\nmax number of multiple alignments for a read that will be output to the SAM/BAM files. Note that if this value is not equal to -1, the top scoring alignment will be output first - -1 … all alignments (up to –outFilterMultimapNmax) will be output\ninteger, example: -1\n\n\n--outSAMtlen\ncalculation method for the TLEN field in the SAM/BAM files - 1 … leftmost base of the (+)strand mate to rightmost base of the (-)mate. (+)sign for the (+)strand mate - 2 … leftmost base of any mate to rightmost base of any mate. (+)sign for the mate with the leftmost base. This is different from 1 for overlapping mates with protruding ends\ninteger, example: 1\n\n\n--outBAMcompression\n-1 to 10 BAM compression level, -1=default compression (6?), 0=no compression, 10=maximum compression\ninteger, example: 1\n\n\n--outBAMsortingThreadN\n>=0: number of threads for BAM sorting. 0 will default to min(6,–runThreadN).\ninteger, example: 0\n\n\n--outBAMsortingBinsN\n>0: number of genome bins for coordinate-sorting\ninteger, example: 50\n\n\n\n\n\nBAM processing\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--bamRemoveDuplicatesType\nmark duplicates in the BAM file, for now only works with (i) sorted BAM fed with inputBAMfile, and (ii) for paired-end alignments only - - … no duplicate removal/marking - UniqueIdentical … mark all multimappers, and duplicate unique mappers. The coordinates, FLAG, CIGAR must be identical - UniqueIdenticalNotMulti … mark duplicate unique mappers but not multimappers.\nstring\n\n\n--bamRemoveDuplicatesMate2basesN\nnumber of bases from the 5’ of mate 2 to use in collapsing (e.g. for RAMPAGE)\ninteger, example: 0\n\n\n\n\n\nOutput Wiggle\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outWigType\ntype of signal output, e.g. “bedGraph” OR “bedGraph read1_5p”. Requires sorted BAM: –outSAMtype BAM SortedByCoordinate . 1st word: - None … no signal output - bedGraph … bedGraph format - wiggle … wiggle format 2nd word: - read1_5p … signal from only 5’ of the 1st read, useful for CAGE/RAMPAGE etc - read2 … signal from only 2nd read\nstring\n\n\n--outWigStrand\nstrandedness of wiggle/bedGraph output - Stranded … separate strands, str1 and str2 - Unstranded … collapsed strands\nstring, example: \"Stranded\"\n\n\n--outWigReferencesPrefix\nprefix matching reference names to include in the output wiggle file, e.g. “chr”, default “-” - include all references\nstring\n\n\n--outWigNorm\ntype of normalization for the signal - RPM … reads per million of mapped reads - None … no normalization, “raw” counts\nstring, example: \"RPM\"\n\n\n\n\n\nOutput Filtering\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outFilterType\ntype of filtering - Normal … standard filtering using only current alignment - BySJout … keep only those reads that contain junctions that passed filtering into SJ.out.tab\nstring, example: \"Normal\"\n\n\n--outFilterMultimapScoreRange\nthe score range below the maximum score for multimapping alignments\ninteger, example: 1\n\n\n--outFilterMultimapNmax\nmaximum number of loci the read is allowed to map to. Alignments (all of them) will be output only if the read maps to no more loci than this value. Otherwise no alignments will be output, and the read will be counted as “mapped to too many loci” in the Log.final.out .\ninteger, example: 10\n\n\n--outFilterMismatchNmax\nalignment will be output only if it has no more mismatches than this value.\ninteger, example: 10\n\n\n--outFilterMismatchNoverLmax\nalignment will be output only if its ratio of mismatches to mapped length is less than or equal to this value.\ndouble, example: 0.3\n\n\n--outFilterMismatchNoverReadLmax\nalignment will be output only if its ratio of mismatches to read length is less than or equal to this value.\ndouble, example: 1\n\n\n--outFilterScoreMin\nalignment will be output only if its score is higher than or equal to this value.\ninteger, example: 0\n\n\n--outFilterScoreMinOverLread\nsame as outFilterScoreMin, but normalized to read length (sum of mates’ lengths for paired-end reads)\ndouble, example: 0.66\n\n\n--outFilterMatchNmin\nalignment will be output only if the number of matched bases is higher than or equal to this value.\ninteger, example: 0\n\n\n--outFilterMatchNminOverLread\nsam as outFilterMatchNmin, but normalized to the read length (sum of mates’ lengths for paired-end reads).\ndouble, example: 0.66\n\n\n--outFilterIntronMotifs\nfilter alignment using their motifs - None … no filtering - RemoveNoncanonical … filter out alignments that contain non-canonical junctions - RemoveNoncanonicalUnannotated … filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.\nstring\n\n\n--outFilterIntronStrands\nfilter alignments - RemoveInconsistentStrands … remove alignments that have junctions with inconsistent strands - None … no filtering\nstring, example: \"RemoveInconsistentStrands\"\n\n\n\n\n\nOutput splice junctions (SJ.out.tab)\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSJtype\ntype of splice junction output - Standard … standard SJ.out.tab output - None … no splice junction output\nstring, example: \"Standard\"\n\n\n\n\n\nOutput Filtering: Splice Junctions\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--outSJfilterReads\nwhich reads to consider for collapsed splice junctions output - All … all reads, unique- and multi-mappers - Unique … uniquely mapping reads only\nstring, example: \"All\"\n\n\n--outSJfilterOverhangMin\nminimum overhang length for splice junctions on both sides for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif does not apply to annotated junctions\ninteger, example: 30, example: 12, example: 12, example: 12\n\n\n--outSJfilterCountUniqueMin\nminimum uniquely mapping read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions\ninteger, example: 3, example: 1, example: 1, example: 1\n\n\n--outSJfilterCountTotalMin\nminimum total (multi-mapping+unique) read count per junction for: (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif. -1 means no output for that motif Junctions are output if one of outSJfilterCountUniqueMin OR outSJfilterCountTotalMin conditions are satisfied does not apply to annotated junctions\ninteger, example: 3, example: 1, example: 1, example: 1\n\n\n--outSJfilterDistToOtherSJmin\nminimum allowed distance to other junctions’ donor/acceptor does not apply to annotated junctions\ninteger, example: 10, example: 0, example: 5, example: 10\n\n\n--outSJfilterIntronMaxVsReadN\nmaximum gap allowed for junctions supported by 1,2,3,,,N reads i.e. by default junctions supported by 1 read can have gaps <=50000b, by 2 reads: <=100000b, by 3 reads: <=200000. by >=4 reads any gap <=alignIntronMax does not apply to annotated junctions\ninteger, example: 50000, example: 100000, example: 200000\n\n\n\n\n\nScoring\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--scoreGap\nsplice junction penalty (independent on intron motif)\ninteger, example: 0\n\n\n--scoreGapNoncan\nnon-canonical junction penalty (in addition to scoreGap)\ninteger, example: -8\n\n\n--scoreGapGCAG\nGC/AG and CT/GC junction penalty (in addition to scoreGap)\ninteger, example: -4\n\n\n--scoreGapATAC\nAT/AC and GT/AT junction penalty (in addition to scoreGap)\ninteger, example: -8\n\n\n--scoreGenomicLengthLog2scale\nextra score logarithmically scaled with genomic length of the alignment: scoreGenomicLengthLog2scale*log2(genomicLength)\ninteger, example: 0\n\n\n--scoreDelOpen\ndeletion open penalty\ninteger, example: -2\n\n\n--scoreDelBase\ndeletion extension penalty per base (in addition to scoreDelOpen)\ninteger, example: -2\n\n\n--scoreInsOpen\ninsertion open penalty\ninteger, example: -2\n\n\n--scoreInsBase\ninsertion extension penalty per base (in addition to scoreInsOpen)\ninteger, example: -2\n\n\n--scoreStitchSJshift\nmaximum score reduction while searching for SJ boundaries in the stitching step\ninteger, example: 1\n\n\n\n\n\nAlignments and Seeding\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--seedSearchStartLmax\ndefines the search start point through the read - the read is split into pieces no longer than this value\ninteger, example: 50\n\n\n--seedSearchStartLmaxOverLread\nseedSearchStartLmax normalized to read length (sum of mates’ lengths for paired-end reads)\ndouble, example: 1\n\n\n--seedSearchLmax\ndefines the maximum length of the seeds, if =0 seed length is not limited\ninteger, example: 0\n\n\n--seedMultimapNmax\nonly pieces that map fewer than this value are utilized in the stitching procedure\ninteger, example: 10000\n\n\n--seedPerReadNmax\nmax number of seeds per read\ninteger, example: 1000\n\n\n--seedPerWindowNmax\nmax number of seeds per window\ninteger, example: 50\n\n\n--seedNoneLociPerWindow\nmax number of one seed loci per window\ninteger, example: 10\n\n\n--seedSplitMin\nmin length of the seed sequences split by Ns or mate gap\ninteger, example: 12\n\n\n--seedMapMin\nmin length of seeds to be mapped\ninteger, example: 5\n\n\n--alignIntronMin\nminimum intron size, genomic gap is considered intron if its length>=alignIntronMin, otherwise it is considered Deletion\ninteger, example: 21\n\n\n--alignIntronMax\nmaximum intron size, if 0, max intron size will be determined by (2^winBinNbits)*winAnchorDistNbins\ninteger, example: 0\n\n\n--alignMatesGapMax\nmaximum gap between two mates, if 0, max intron gap will be determined by (2^winBinNbits)*winAnchorDistNbins\ninteger, example: 0\n\n\n--alignSJoverhangMin\nminimum overhang (i.e. block size) for spliced alignments\ninteger, example: 5\n\n\n--alignSJstitchMismatchNmax\nmaximum number of mismatches for stitching of the splice junctions (-1: no limit). (1) non-canonical motifs, (2) GT/AG and CT/AC motif, (3) GC/AG and CT/GC motif, (4) AT/AC and GT/AT motif.\ninteger, example: 0, example: -1, example: 0, example: 0\n\n\n--alignSJDBoverhangMin\nminimum overhang (i.e. block size) for annotated (sjdb) spliced alignments\ninteger, example: 3\n\n\n--alignSplicedMateMapLmin\nminimum mapped length for a read mate that is spliced\ninteger, example: 0\n\n\n--alignSplicedMateMapLminOverLmate\nalignSplicedMateMapLmin normalized to mate length\ndouble, example: 0.66\n\n\n--alignWindowsPerReadNmax\nmax number of windows per read\ninteger, example: 10000\n\n\n--alignTranscriptsPerWindowNmax\nmax number of transcripts per window\ninteger, example: 100\n\n\n--alignTranscriptsPerReadNmax\nmax number of different alignments per read to consider\ninteger, example: 10000\n\n\n--alignEndsType\ntype of read ends alignment - Local … standard local alignment with soft-clipping allowed - EndToEnd … force end-to-end read alignment, do not soft-clip - Extend5pOfRead1 … fully extend only the 5p of the read1, all other ends: local alignment - Extend5pOfReads12 … fully extend only the 5p of the both read1 and read2, all other ends: local alignment\nstring, example: \"Local\"\n\n\n--alignEndsProtrude\nallow protrusion of alignment ends, i.e. start (end) of the +strand mate downstream of the start (end) of the -strand mate 1st word: int: maximum number of protrusion bases allowed 2nd word: string: - ConcordantPair … report alignments with non-zero protrusion as concordant pairs - DiscordantPair … report alignments with non-zero protrusion as discordant pairs\nstring, example: \"0    ConcordantPair\"\n\n\n--alignSoftClipAtReferenceEnds\nallow the soft-clipping of the alignments past the end of the chromosomes - Yes … allow - No … prohibit, useful for compatibility with Cufflinks\nstring, example: \"Yes\"\n\n\n--alignInsertionFlush\nhow to flush ambiguous insertion positions - None … insertions are not flushed - Right … insertions are flushed to the right\nstring\n\n\n\n\n\nPaired-End reads\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--peOverlapNbasesMin\nminimum number of overlapping bases to trigger mates merging and realignment. Specify >0 value to switch on the “merginf of overlapping mates” algorithm.\ninteger, example: 0\n\n\n--peOverlapMMp\nmaximum proportion of mismatched bases in the overlap area\ndouble, example: 0.01\n\n\n\n\n\nWindows, Anchors, Binning\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--winAnchorMultimapNmax\nmax number of loci anchors are allowed to map to\ninteger, example: 50\n\n\n--winBinNbits\n=log2(winBin), where winBin is the size of the bin for the windows/clustering, each window will occupy an integer number of bins.\ninteger, example: 16\n\n\n--winAnchorDistNbins\nmax number of bins between two anchors that allows aggregation of anchors into one window\ninteger, example: 9\n\n\n--winFlankNbins\nlog2(winFlank), where win Flank is the size of the left and right flanking regions for each window\ninteger, example: 4\n\n\n--winReadCoverageRelativeMin\nminimum relative coverage of the read sequence by the seeds in a window, for STARlong algorithm only.\ndouble, example: 0.5\n\n\n--winReadCoverageBasesMin\nminimum number of bases covered by the seeds in a window , for STARlong algorithm only.\ninteger, example: 0\n\n\n\n\n\nChimeric Alignments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--chimOutType\ntype of chimeric output - Junctions … Chimeric.out.junction - SeparateSAMold … output old SAM into separate Chimeric.out.sam file - WithinBAM … output into main aligned BAM files (Aligned.*.bam) - WithinBAM HardClip … (default) hard-clipping in the CIGAR for supplemental chimeric alignments (default if no 2nd word is present) - WithinBAM SoftClip … soft-clipping in the CIGAR for supplemental chimeric alignments\nstring, example: \"Junctions\"\n\n\n--chimSegmentMin\nminimum length of chimeric segment length, if ==0, no chimeric output\ninteger, example: 0\n\n\n--chimScoreMin\nminimum total (summed) score of the chimeric segments\ninteger, example: 0\n\n\n--chimScoreDropMax\nmax drop (difference) of chimeric score (the sum of scores of all chimeric segments) from the read length\ninteger, example: 20\n\n\n--chimScoreSeparation\nminimum difference (separation) between the best chimeric score and the next one\ninteger, example: 10\n\n\n--chimScoreJunctionNonGTAG\npenalty for a non-GT/AG chimeric junction\ninteger, example: -1\n\n\n--chimJunctionOverhangMin\nminimum overhang for a chimeric junction\ninteger, example: 20\n\n\n--chimSegmentReadGapMax\nmaximum gap in the read sequence between chimeric segments\ninteger, example: 0\n\n\n--chimFilter\ndifferent filters for chimeric alignments - None … no filtering - banGenomicN … Ns are not allowed in the genome sequence around the chimeric junction\nstring, example: \"banGenomicN\"\n\n\n--chimMainSegmentMultNmax\nmaximum number of multi-alignments for the main chimeric segment. =1 will prohibit multimapping main segments.\ninteger, example: 10\n\n\n--chimMultimapNmax\nmaximum number of chimeric multi-alignments - 0 … use the old scheme for chimeric detection which only considered unique alignments\ninteger, example: 0\n\n\n--chimMultimapScoreRange\nthe score range for multi-mapping chimeras below the best chimeric score. Only works with –chimMultimapNmax > 1\ninteger, example: 1\n\n\n--chimNonchimScoreDropMin\nto trigger chimeric detection, the drop in the best non-chimeric alignment score with respect to the read length has to be greater than this value\ninteger, example: 20\n\n\n--chimOutJunctionFormat\nformatting type for the Chimeric.out.junction file - 0 … no comment lines/headers - 1 … comment lines at the end of the file: command line and Nreads: total, unique/multi-mapping\ninteger, example: 0\n\n\n\n\n\nQuantification of Annotations\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--quantMode\ntypes of quantification requested - - … none - TranscriptomeSAM … output SAM/BAM alignments to transcriptome into a separate file - GeneCounts … count reads per gene\nstring\n\n\n--quantTranscriptomeBAMcompression\n-2 to 10 transcriptome BAM compression level - -2 … no BAM output - -1 … default compression (6?) - 0 … no compression - 10 … maximum compression\ninteger, example: 1\n\n\n--quantTranscriptomeBan\nprohibit various alignment type - IndelSoftclipSingleend … prohibit indels, soft clipping and single-end alignments - compatible with RSEM - Singleend … prohibit single-end alignments\nstring, example: \"IndelSoftclipSingleend\"\n\n\n\n\n\n2-pass Mapping\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--twopassMode\n2-pass mapping mode. - None … 1-pass mapping - Basic … basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly\nstring\n\n\n--twopass1readsN\nnumber of reads to process for the 1st step. Use very large number (or default -1) to map all reads in the first step.\ninteger, example: -1\n\n\n\n\n\nWASP parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--waspOutputMode\nWASP allele-specific output type. This is re-implementation of the original WASP mappability filtering by Bryce van de Geijn, Graham McVicker, Yoav Gilad & Jonathan K Pritchard. Please cite the original WASP paper: Nature Methods 12, 1061–1063 (2015), https://www.nature.com/articles/nmeth.3582 . - SAMtag … add WASP tags to the alignments that pass WASP filtering\nstring\n\n\n\n\n\nSTARsolo (single cell RNA-seq) parameters\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--soloType\ntype of single-cell RNA-seq - CB_UMI_Simple … (a.k.a. Droplet) one UMI and one Cell Barcode of fixed length in read2, e.g. Drop-seq and 10X Chromium. - CB_UMI_Complex … multiple Cell Barcodes of varying length, one UMI of fixed length and one adapter sequence of fixed length are allowed in read2 only (e.g. inDrop, ddSeq). - CB_samTagOut … output Cell Barcode as CR and/or CB SAm tag. No UMI counting. –readFilesIn cDNA_read1 [cDNA_read2 if paired-end] CellBarcode_read . Requires –outSAMtype BAM Unsorted [and/or SortedByCoordinate] - SmartSeq … Smart-seq: each cell in a separate FASTQ (paired- or single-end), barcodes are corresponding read-groups, no UMI sequences, alignments deduplicated according to alignment start and end (after extending soft-clipped bases)\nstring\n\n\n--soloCBwhitelist\nfile(s) with whitelist(s) of cell barcodes. Only –soloType CB_UMI_Complex allows more than one whitelist file. - None … no whitelist: all cell barcodes are allowed\nstring\n\n\n--soloCBstart\ncell barcode start base\ninteger, example: 1\n\n\n--soloCBlen\ncell barcode length\ninteger, example: 16\n\n\n--soloUMIstart\nUMI start base\ninteger, example: 17\n\n\n--soloUMIlen\nUMI length\ninteger, example: 10\n\n\n--soloBarcodeReadLength\nlength of the barcode read - 1 … equal to sum of soloCBlen+soloUMIlen - 0 … not defined, do not check\ninteger, example: 1\n\n\n--soloBarcodeMate\nidentifies which read mate contains the barcode (CB+UMI) sequence - 0 … barcode sequence is on separate read, which should always be the last file in the –readFilesIn listed - 1 … barcode sequence is a part of mate 1 - 2 … barcode sequence is a part of mate 2\ninteger, example: 0\n\n\n--soloCBposition\nposition of Cell Barcode(s) on the barcode read. Presently only works with –soloType CB_UMI_Complex, and barcodes are assumed to be on Read2. Format for each barcode: startAnchor_startPosition_endAnchor_endPosition start(end)Anchor defines the Anchor Base for the CB: 0: read start; 1: read end; 2: adapter start; 3: adapter end start(end)Position is the 0-based position with of the CB start(end) with respect to the Anchor Base String for different barcodes are separated by space. Example: inDrop (Zilionis et al, Nat. Protocols, 2017): –soloCBposition 0_0_2_-1 3_1_3_8\nstring\n\n\n--soloUMIposition\nposition of the UMI on the barcode read, same as soloCBposition Example: inDrop (Zilionis et al, Nat. Protocols, 2017): –soloCBposition 3_9_3_14\nstring\n\n\n--soloAdapterSequence\nadapter sequence to anchor barcodes. Only one adapter sequence is allowed.\nstring\n\n\n--soloAdapterMismatchesNmax\nmaximum number of mismatches allowed in adapter sequence.\ninteger, example: 1\n\n\n--soloCBmatchWLtype\nmatching the Cell Barcodes to the WhiteList - Exact … only exact matches allowed - 1MM … only one match in whitelist with 1 mismatched base allowed. Allowed CBs have to have at least one read with exact match. - 1MM_multi … multiple matches in whitelist with 1 mismatched base allowed, posterior probability calculation is used choose one of the matches. Allowed CBs have to have at least one read with exact match. This option matches best with CellRanger 2.2.0 - 1MM_multi_pseudocounts … same as 1MM_Multi, but pseudocounts of 1 are added to all whitelist barcodes. - 1MM_multi_Nbase_pseudocounts … same as 1MM_multi_pseudocounts, multimatching to WL is allowed for CBs with N-bases. This option matches best with CellRanger >= 3.0.0 - EditDist_2 … allow up to edit distance of 3 fpr each of the barcodes. May include one deletion + one insertion. Only works with –soloType CB_UMI_Complex. Matches to multiple passlist barcdoes are not allowed. Similar to ParseBio Split-seq pipeline.\nstring, example: \"1MM_multi\"\n\n\n--soloInputSAMattrBarcodeSeq\nwhen inputting reads from a SAM file (–readsFileType SAM SE/PE), these SAM attributes mark the barcode sequence (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use –soloInputSAMattrBarcodeSeq CR UR . This parameter is required when running STARsolo with input from SAM.\nstring\n\n\n--soloInputSAMattrBarcodeQual\nwhen inputting reads from a SAM file (–readsFileType SAM SE/PE), these SAM attributes mark the barcode qualities (in proper order). For instance, for 10X CellRanger or STARsolo BAMs, use –soloInputSAMattrBarcodeQual CY UY . If this parameter is ‘-’ (default), the quality ‘H’ will be assigned to all bases.\nstring\n\n\n--soloStrand\nstrandedness of the solo libraries: - Unstranded … no strand information - Forward … read strand same as the original RNA molecule - Reverse … read strand opposite to the original RNA molecule\nstring, example: \"Forward\"\n\n\n--soloFeatures\ngenomic features for which the UMI counts per Cell Barcode are collected - Gene … genes: reads match the gene transcript - SJ … splice junctions: reported in SJ.out.tab - GeneFull … full gene (pre-mRNA): count all reads overlapping genes’ exons and introns - GeneFull_ExonOverIntron … full gene (pre-mRNA): count all reads overlapping genes’ exons and introns: prioritize 100% overlap with exons - GeneFull_Ex50pAS … full gene (pre-RNA): count all reads overlapping genes’ exons and introns: prioritize >50% overlap with exons. Do not count reads with 100% exonic overlap in the antisense direction.\nstring, example: \"Gene\"\n\n\n--soloMultiMappers\ncounting method for reads mapping to multiple genes - Unique … count only reads that map to unique genes - Uniform … uniformly distribute multi-genic UMIs to all genes - Rescue … distribute UMIs proportionally to unique+uniform counts (~ first iteration of EM) - PropUnique … distribute UMIs proportionally to unique mappers, if present, and uniformly if not. - EM … multi-gene UMIs are distributed using Expectation Maximization algorithm\nstring, example: \"Unique\"\n\n\n--soloUMIdedup\ntype of UMI deduplication (collapsing) algorithm - 1MM_All … all UMIs with 1 mismatch distance to each other are collapsed (i.e. counted once). - 1MM_Directional_UMItools … follows the “directional” method from the UMI-tools by Smith, Heger and Sudbery (Genome Research 2017). - 1MM_Directional … same as 1MM_Directional_UMItools, but with more stringent criteria for duplicate UMIs - Exact … only exactly matching UMIs are collapsed. - NoDedup … no deduplication of UMIs, count all reads. - 1MM_CR … CellRanger2-4 algorithm for 1MM UMI collapsing.\nstring, example: \"1MM_All\"\n\n\n--soloUMIfiltering\ntype of UMI filtering (for reads uniquely mapping to genes) - - … basic filtering: remove UMIs with N and homopolymers (similar to CellRanger 2.2.0). - MultiGeneUMI … basic + remove lower-count UMIs that map to more than one gene. - MultiGeneUMI_All … basic + remove all UMIs that map to more than one gene. - MultiGeneUMI_CR … basic + remove lower-count UMIs that map to more than one gene, matching CellRanger > 3.0.0 . Only works with –soloUMIdedup 1MM_CR\nstring\n\n\n--soloOutFileNames\nfile names for STARsolo output: file_name_prefix gene_names barcode_sequences cell_feature_count_matrix\nstring, example: \"Solo.out/\", example: \"features.tsv\", example: \"barcodes.tsv\", example: \"matrix.mtx\"\n\n\n--soloCellFilter\ncell filtering type and parameters - None … do not output filtered cells - TopCells … only report top cells by UMI count, followed by the exact number of cells - CellRanger2.2 … simple filtering of CellRanger 2.2. Can be followed by numbers: number of expected cells, robust maximum percentile for UMI count, maximum to minimum ratio for UMI count The harcoded values are from CellRanger: nExpectedCells=3000; maxPercentile=0.99; maxMinRatio=10 - EmptyDrops_CR … EmptyDrops filtering in CellRanger flavor. Please cite the original EmptyDrops paper: A.T.L Lun et al, Genome Biology, 20, 63 (2019): https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1662-y Can be followed by 10 numeric parameters: nExpectedCells maxPercentile maxMinRatio indMin indMax umiMin umiMinFracMedian candMaxN FDR simN The harcoded values are from CellRanger: 3000 0.99 10 45000 90000 500 0.01 20000 0.01 10000\nstring, example: \"CellRanger2.2\", example: \"3000\", example: \"0.99\", example: \"10\"\n\n\n--soloOutFormatFeaturesGeneField3\nfield 3 in the Gene features.tsv file. If “-”, then no 3rd field is output.\nstring, example: \"Gene Expression\"\n\n\n--soloCellReadStats\nOutput reads statistics for each CB - Standard … standard output\nstring"
  },
  {
    "objectID": "components/modules/mapping/star_align.html#authors",
    "href": "components/modules/mapping/star_align.html#authors",
    "title": "Star align",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "components/modules/mapping/bd_rhapsody.html",
    "href": "components/modules/mapping/bd_rhapsody.html",
    "title": "BD Rhapsody",
    "section": "",
    "text": "ID: bd_rhapsody\nNamespace: mapping\n\n\n\nSource\nA wrapper for the BD Rhapsody Analysis CWL v1.10.1 pipeline.\nThe CWL pipeline file is obtained by cloning ‘https://bitbucket.org/CRSwDev/cwl/src/master/’ and removing all objects with class ‘DockerRequirement’ from the YML.\nThis pipeline can be used for a targeted analysis (with --mode targeted) or for a whole transcriptome analysis (with --mode wta).\nThe reference_genome and transcriptome_annotation files can be generated with the make_reference pipeline. Alternatively, BD also provides standard references which can be downloaded from these locations:"
  },
  {
    "objectID": "components/modules/mapping/bd_rhapsody.html#example-commands",
    "href": "components/modules/mapping/bd_rhapsody.html#example-commands",
    "title": "BD Rhapsody",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/bd_rhapsody/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nmode: # please fill in - example: \"wta\"\ninput: # please fill in - example: [\"input.fastq.gz\"]\nreference: # please fill in - example: [\"reference_genome.tar.gz|reference.fasta\"]\n# transcriptome_annotation: \"transcriptome.gtf\"\n# abseq_reference: [\"abseq_reference.fasta\"]\n# supplemental_reference: [\"supplemental_reference.fasta\"]\nsample_prefix: \"sample\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Putative cell calling settings\n# putative_cell_call: \"mRNA\"\n# exact_cell_count: 10000\ndisable_putative_calling: false\n\n# Subsample arguments\n# subsample: 0.01\n# subsample_seed: 3445\n\n# Multiplex arguments\n# sample_tags_version: \"human\"\n# tag_names: [\"4-mySample\", \"9-myOtherSample\", \"6-alsoThisSample\"]\n\n# VDJ arguments\n# vdj_version: \"human\"\n\n# CWL-runner arguments\nparallel: true\ntimestamps: false\ndryrun: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/bd_rhapsody/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/mapping/bd_rhapsody.html#argument-groups",
    "href": "components/modules/mapping/bd_rhapsody.html#argument-groups",
    "title": "BD Rhapsody",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--mode\nWhether to run a whole transcriptome analysis (WTA) or a targeted analysis.\nstring, required, example: \"wta\"\n\n\n--input\nPath to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want.\nfile, required, example: \"input.fastq.gz\"\n\n\n--reference\nRefence to map to. For --mode wta, this is the path to STAR index as a tar.gz file. For --mode targeted, this is the path to mRNA reference file for pre-designed, supplemental, or custom panel, in FASTA format\nfile, required, example: \"reference_genome.tar.gz&#124;reference.fasta\"\n\n\n--transcriptome_annotation\nPath to GTF annotation file (only for --mode wta).\nfile, example: \"transcriptome.gtf\"\n\n\n--abseq_reference\nPath to the AbSeq reference file in FASTA format. Only needed if BD AbSeq Ab-Oligos are used.\nfile, example: \"abseq_reference.fasta\"\n\n\n--supplemental_reference\nPath to the supplemental reference file in FASTA format. Only needed if there are additional transgene sequences used in the experiment (only for --mode wta).\nfile, example: \"supplemental_reference.fasta\"\n\n\n--sample_prefix\nSpecify a run name to use as the output file base name. Use only letters, numbers, or hyphens. Do not use special characters or spaces.\nstring, default: \"sample\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput folder. Output still needs to be processed further.\nfile, required, example: \"output_dir\"\n\n\n\n\n\nPutative cell calling settings\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--putative_cell_call\nSpecify the dataset to be used for putative cell calling. For putative cell calling using an AbSeq dataset, please provide an AbSeq_Reference fasta file above.\nstring, example: \"mRNA\"\n\n\n--exact_cell_count\nExact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count\ninteger, example: 10000\n\n\n--disable_putative_calling\nDisable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve). The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types. Does not apply if Exact Cell Count is set.\nboolean_true\n\n\n\n\n\nSubsample arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--subsample\nA number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample.\ndouble, example: 0.01\n\n\n--subsample_seed\nA seed for replicating a previous subsampled run.\ninteger, example: 3445\n\n\n\n\n\nMultiplex arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sample_tags_version\nSpecify if multiplexed run.\nstring, example: \"human\"\n\n\n--tag_names\nTag_Names (optional) - Specify the tag number followed by ‘-’ and the desired sample name to appear in Sample_Tag_Metrics.csv. Do not use the special characters: &, (), [], {}, <>, ?, |\nstring, example: \"4-mySample\", example: \"9-myOtherSample\", example: \"6-alsoThisSample\"\n\n\n\n\n\nVDJ arguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--vdj_version\nSpecify if VDJ run.\nstring, example: \"human\"\n\n\n\n\n\nCWL-runner arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--parallel\nRun jobs in parallel.\nboolean, default: TRUE\n\n\n--timestamps\nAdd timestamps to the errors, warnings, and notifications.\nboolean_true\n\n\n--dryrun\nIf true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.\nboolean_true"
  },
  {
    "objectID": "components/modules/mapping/bd_rhapsody.html#authors",
    "href": "components/modules/mapping/bd_rhapsody.html#authors",
    "title": "BD Rhapsody",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/modules/mapping/cellranger_count_split.html",
    "href": "components/modules/mapping/cellranger_count_split.html",
    "title": "Cellranger count split",
    "section": "",
    "text": "ID: cellranger_count_split\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/mapping/cellranger_count_split.html#example-commands",
    "href": "components/modules/mapping/cellranger_count_split.html#example-commands",
    "title": "Cellranger count split",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/cellranger_count_split/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input_dir\"\n# filtered_h5: \"$id.$key.filtered_h5.h5\"\n# metrics_summary: \"$id.$key.metrics_summary.csv\"\n# molecule_info: \"$id.$key.molecule_info.h5\"\n# bam: \"$id.$key.bam.bam\"\n# bai: \"$id.$key.bai.bai\"\n# raw_h5: \"$id.$key.raw_h5.h5\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/cellranger_count_split/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/mapping/cellranger_count_split.html#argument-group",
    "href": "components/modules/mapping/cellranger_count_split.html#argument-group",
    "title": "Cellranger count split",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nOutput directory from a Cell Ranger count run.\nfile, required, example: \"input_dir\"\n\n\n--filtered_h5\n\nfile, example: \"filtered_feature_bc_matrix.h5\"\n\n\n--metrics_summary\n\nfile, example: \"metrics_summary.csv\"\n\n\n--molecule_info\n\nfile, example: \"molecule_info.h5\"\n\n\n--bam\n\nfile, example: \"possorted_genome_bam.bam\"\n\n\n--bai\n\nfile, example: \"possorted_genome_bam.bam.bai\"\n\n\n--raw_h5\n\nfile, example: \"raw_feature_bc_matrix.h5\""
  },
  {
    "objectID": "components/modules/mapping/cellranger_count_split.html#authors",
    "href": "components/modules/mapping/cellranger_count_split.html#authors",
    "title": "Cellranger count split",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "components/modules/mapping/cellranger_multi.html",
    "href": "components/modules/mapping/cellranger_multi.html",
    "title": "Cellranger multi",
    "section": "",
    "text": "ID: cellranger_multi\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/mapping/cellranger_multi.html#example-commands",
    "href": "components/modules/mapping/cellranger_multi.html#example-commands",
    "title": "Cellranger multi",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/cellranger_multi/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Input files\ninput: # please fill in - example: [\"mysample_S1_L001_R1_001.fastq.gz\", \"mysample_S1_L001_R2_001.fastq.gz\"]\ngex_reference: # please fill in - example: \"reference_genome.tar.gz\"\n# vdj_reference: \"reference_vdj.tar.gz\"\n# feature_reference: \"feature_reference.csv\"\n\n# Library arguments\nlibrary_id: # please fill in - example: [\"mysample1\"]\nlibrary_type: # please fill in - example: [\"Gene Expression\"]\n# library_subsample: [\"0.5\"]\n# library_lanes: [\"1-4\"]\n\n# Gene expression arguments\n# gex_expect_cells: 3000\ngex_chemistry: \"auto\"\ngex_secondary_analysis: false\ngex_generate_bam: true\ngex_include_introns: true\n\n# Cell multiplexing parameters\n# cell_multiplex_sample_id: \"foo\"\n# cell_multiplex_oligo_ids: \"foo\"\n# cell_multiplex_description: \"foo\"\n\n# Executor arguments\ndryrun: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/cellranger_multi/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/mapping/cellranger_multi.html#argument-groups",
    "href": "components/modules/mapping/cellranger_multi.html#argument-groups",
    "title": "Cellranger multi",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput files\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe FASTQ files to be analyzed. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq: [Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz\nfile, required, example: \"mysample_S1_L001_R1_001.fastq.gz\", example: \"mysample_S1_L001_R2_001.fastq.gz\"\n\n\n--gex_reference\nGenome refence index built by Cell Ranger mkref.\nfile, required, example: \"reference_genome.tar.gz\"\n\n\n--vdj_reference\nVDJ refence index built by Cell Ranger mkref.\nfile, example: \"reference_vdj.tar.gz\"\n\n\n--feature_reference\nPath to the Feature reference CSV file, declaring Feature Barcode constructs and associated barcodes. Required only for Antibody Capture or CRISPR Guide Capture libraries. See https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/feature-bc-analysis#feature-ref for more information.\nfile, example: \"feature_reference.csv\"\n\n\n\n\n\nLibrary arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--library_id\nThe Illumina sample name to analyze. This must exactly match the ‘Sample Name’ part of the FASTQ files specified in the --input argument.\nstring, required, example: \"mysample1\"\n\n\n--library_type\nThe underlying feature type of the library. Possible values: “Gene Expression”, “VDJ”, “VDJ-T”, “VDJ-B”, “Antibody Capture”, “CRISPR Guide Capture”, “Multiplexing Capture”\nstring, required, example: \"Gene Expression\"\n\n\n--library_subsample\nOptional. The rate at which reads from the provided FASTQ files are sampled. Must be strictly greater than 0 and less than or equal to 1.\nstring, example: \"0.5\"\n\n\n--library_lanes\nLanes associated with this sample. Defaults to using all lanes.\nstring, example: \"1-4\"\n\n\n\n\n\nGene expression arguments\nArguments relevant to the analysis of gene expression data.\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--gex_expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--gex_chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--gex_secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--gex_generate_bam\nWhether to generate a BAM file.\nboolean, default: TRUE\n\n\n--gex_include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE\n\n\n\n\n\nCell multiplexing parameters\nArguments related to cell multiplexing.\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--cell_multiplex_sample_id\nA name to identify a multiplexed sample. Must be alphanumeric with hyphens and/or underscores, and less than 64 characters. Required for Cell Multiplexing libraries.\nstring\n\n\n--cell_multiplex_oligo_ids\nThe Cell Multiplexing oligo IDs used to multiplex this sample. If multiple CMOs were used for a sample, separate IDs with a pipe (e.g., CMO301|CMO302). Required for Cell Multiplexing libraries.\nstring\n\n\n--cell_multiplex_description\nA description for the sample.\nstring\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe folder to store the alignment results.\nfile, required, example: \"/path/to/output\"\n\n\n\n\n\nExecutor arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--dryrun\nIf true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.\nboolean_true"
  },
  {
    "objectID": "components/modules/mapping/cellranger_multi.html#authors",
    "href": "components/modules/mapping/cellranger_multi.html#authors",
    "title": "Cellranger multi",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)\nDries De Maeyer  (author)"
  },
  {
    "objectID": "components/modules/mapping/cellranger_count.html",
    "href": "components/modules/mapping/cellranger_count.html",
    "title": "Cellranger count",
    "section": "",
    "text": "ID: cellranger_count\nNamespace: mapping\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/mapping/cellranger_count.html#example-commands",
    "href": "components/modules/mapping/cellranger_count.html#example-commands",
    "title": "Cellranger count",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/mapping/cellranger_count/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: [\"sample_S1_L001_R1_001.fastq.gz\", \"sample_S1_L001_R2_001.fastq.gz\"]\nreference: # please fill in - example: \"reference.tar.gz\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Arguments\n# expect_cells: 3000\nchemistry: \"auto\"\nsecondary_analysis: false\ngenerate_bam: true\ninclude_introns: true\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/mapping/cellranger_count/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/mapping/cellranger_count.html#argument-groups",
    "href": "components/modules/mapping/cellranger_count.html#argument-groups",
    "title": "Cellranger count",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nThe fastq.gz files to align. Can also be a single directory containing fastq.gz files.\nfile, required, example: \"sample_S1_L001_R1_001.fastq.gz\", example: \"sample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nThe path to Cell Ranger reference tar.gz file. Can also be a directory.\nfile, required, example: \"reference.tar.gz\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe folder to store the alignment results.\nfile, required, example: \"/path/to/output\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--generate_bam\nWhether to generate a BAM file.\nboolean, default: TRUE\n\n\n--include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE"
  },
  {
    "objectID": "components/modules/mapping/cellranger_count.html#authors",
    "href": "components/modules/mapping/cellranger_count.html#authors",
    "title": "Cellranger count",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "components/modules/metadata/join_uns_to_obs.html",
    "href": "components/modules/metadata/join_uns_to_obs.html",
    "title": "Join uns to obs",
    "section": "",
    "text": "ID: join_uns_to_obs\nNamespace: metadata\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/metadata/join_uns_to_obs.html#example-commands",
    "href": "components/modules/metadata/join_uns_to_obs.html#example-commands",
    "title": "Join uns to obs",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/metadata/join_uns_to_obs/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nuns_key: # please fill in - example: \"foo\"\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/metadata/join_uns_to_obs/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/metadata/join_uns_to_obs.html#argument-group",
    "href": "components/modules/metadata/join_uns_to_obs.html#argument-group",
    "title": "Join uns to obs",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--uns_key\n\nstring, required\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "components/modules/metadata/join_uns_to_obs.html#authors",
    "href": "components/modules/metadata/join_uns_to_obs.html#authors",
    "title": "Join uns to obs",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "components/modules/metadata/add_id.html",
    "href": "components/modules/metadata/add_id.html",
    "title": "Add id",
    "section": "",
    "text": "ID: add_id\nNamespace: metadata\n\n\n\nSource\nAlso allows to make .obs_names (the .obs index) unique by prefixing the values with an unique id per .h5mu file"
  },
  {
    "objectID": "components/modules/metadata/add_id.html#example-commands",
    "href": "components/modules/metadata/add_id.html#example-commands",
    "title": "Add id",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/metadata/add_id/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"sample_path\"\ninput_id: # please fill in - example: \"foo\"\nobs_output: \"sample_id\"\n# output: \"$id.$key.output.h5mu\"\nmake_observation_keys_unique: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/metadata/add_id/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/metadata/add_id.html#argument-group",
    "href": "components/modules/metadata/add_id.html#argument-group",
    "title": "Add id",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to the input .h5mu.\nfile, required, example: \"sample_path\"\n\n\n--input_id\nThe input id.\nstring, required\n\n\n--obs_output\nName of the .obs column where to store the id.\nstring, default: \"sample_id\"\n\n\n--output\n\nfile, example: \"output.h5mu\"\n\n\n--make_observation_keys_unique\nJoin the id to the .obs index (.obs_names).\nboolean_true"
  },
  {
    "objectID": "components/modules/metadata/add_id.html#authors",
    "href": "components/modules/metadata/add_id.html#authors",
    "title": "Add id",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/metadata/join_csv.html",
    "href": "components/modules/metadata/join_csv.html",
    "title": "Join csv",
    "section": "",
    "text": "ID: join_csv\nNamespace: metadata\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/metadata/join_csv.html#example-commands",
    "href": "components/modules/metadata/join_csv.html#example-commands",
    "title": "Join csv",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/metadata/join_csv/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# MuData Input\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# obs_key: \"foo\"\n# var_key: \"foo\"\n\n# MuData Output\n# output: \"$id.$key.output.h5mu\"\n\n# Metadata Input\ninput_csv: # please fill in - example: \"metadata.csv\"\ncsv_key: \"id\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/metadata/join_csv/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/metadata/join_csv.html#argument-groups",
    "href": "components/modules/metadata/join_csv.html#argument-groups",
    "title": "Join csv",
    "section": "Argument groups",
    "text": "Argument groups\n\nMuData Input\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5mu file\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obs_key\nObs column name where the sample id can be found for each observation to join on. Useful when adding metadata to concatenated samples. Mutually exclusive with –var_key and –sample_id”\nstring\n\n\n--var_key\nVar column name where the sample id can be found for each observation to join on. Useful when adding metadata to concatenated samples. Mutually exclusive with –var_key and –sample_id.”\nstring\n\n\n\n\n\nMuData Output\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n\n\n\nMetadata Input\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input_csv\n.csv file containing metadata\nfile, required, example: \"metadata.csv\"\n\n\n--csv_key\ncolumn of the the csv that corresponds to the sample id.\nstring, default: \"id\""
  },
  {
    "objectID": "components/modules/metadata/join_csv.html#authors",
    "href": "components/modules/metadata/join_csv.html#authors",
    "title": "Join csv",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author)"
  },
  {
    "objectID": "components/modules/report/mermaid.html",
    "href": "components/modules/report/mermaid.html",
    "title": "Mermaid",
    "section": "",
    "text": "ID: mermaid\nNamespace: report\n\n\n\nSource\nSee https://mermaid-js.github.io/mermaid/#/Tutorials. This component uses the external mermaid.ink service to generate visual networks."
  },
  {
    "objectID": "components/modules/report/mermaid.html#example-commands",
    "href": "components/modules/report/mermaid.html#example-commands",
    "title": "Mermaid",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/report/mermaid/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/report/mermaid/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/report/mermaid.html#argument-group",
    "href": "components/modules/report/mermaid.html#argument-group",
    "title": "Mermaid",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput directory\nfile, required\n\n\n--output\nGenerated network as output.\nfile, required"
  },
  {
    "objectID": "components/modules/report/mermaid.html#authors",
    "href": "components/modules/report/mermaid.html#authors",
    "title": "Mermaid",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "components/modules/transfer/publish.html",
    "href": "components/modules/transfer/publish.html",
    "title": "Publish",
    "section": "",
    "text": "ID: publish\nNamespace: transfer\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/transfer/publish.html#example-commands",
    "href": "components/modules/transfer/publish.html#example-commands",
    "title": "Publish",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/transfer/publish/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"path/to/file\"\n# output: \"$id.$key.output.output\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/transfer/publish/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/transfer/publish.html#argument-group",
    "href": "components/modules/transfer/publish.html#argument-group",
    "title": "Publish",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput filename\nfile, required\n\n\n--output\nOutput filename\nfile, required"
  },
  {
    "objectID": "components/modules/transfer/publish.html#authors",
    "href": "components/modules/transfer/publish.html#authors",
    "title": "Publish",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (maintainer)"
  },
  {
    "objectID": "components/modules/files/make_params.html",
    "href": "components/modules/files/make_params.html",
    "title": "Make params",
    "section": "",
    "text": "ID: make_params\nNamespace: files\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/files/make_params.html#example-commands",
    "href": "components/modules/files/make_params.html#example-commands",
    "title": "Make params",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/files/make_params/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nbase_dir: # please fill in - example: \"/path/to/dir\"\npattern: # please fill in - example: \"*.fastq.gz\"\nn_dirname_drop: 0\nn_basename_id: 0\nid_name: \"id\"\npath_name: \"path\"\n# group_name: \"param_list\"\n# output: \"$id.$key.output.yaml\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/files/make_params/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/files/make_params.html#argument-group",
    "href": "components/modules/files/make_params.html#argument-group",
    "title": "Make params",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--base_dir\nBase directory to search recursively\nfile, required, example: \"/path/to/dir\"\n\n\n--pattern\nAn optional regular expression. Only file names which match the regular expression will be matched.\nstring, required, example: \"*.fastq.gz\"\n\n\n--n_dirname_drop\nFor every matched file, the parent directory will be traversed N times.\ninteger, default: 0\n\n\n--n_basename_id\nThe unique identifiers will consist of at least N dirnames.\ninteger, default: 0\n\n\n--id_name\nThe name for storing the identifier field in the yaml.\nstring, default: \"id\"\n\n\n--path_name\nThe name for storing the path field in the yaml.\nstring, default: \"path\"\n\n\n--group_name\nTop level name for the group of entries.\nstring, example: \"param_list\"\n\n\n--output\nOutput YAML file.\nfile, required, example: \"params.yaml\""
  },
  {
    "objectID": "components/modules/files/make_params.html#authors",
    "href": "components/modules/files/make_params.html#authors",
    "title": "Make params",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (maintainer, author)"
  },
  {
    "objectID": "components/modules/dataflow/concat.html",
    "href": "components/modules/dataflow/concat.html",
    "title": "Concat",
    "section": "",
    "text": "ID: concat\nNamespace: dataflow\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/dataflow/concat.html#example-commands",
    "href": "components/modules/dataflow/concat.html#example-commands",
    "title": "Concat",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dataflow/concat/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: [\"sample_paths\"]\ninput_id: # please fill in - example: [\"foo\"]\n# output: \"$id.$key.output.h5mu\"\nobs_sample_name: \"sample_id\"\ncompression: \"gzip\"\nother_axis_mode: \"move\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dataflow/concat/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/dataflow/concat.html#argument-group",
    "href": "components/modules/dataflow/concat.html#argument-group",
    "title": "Concat",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPaths to the different samples to be concatenated.\nfile, required, example: \"sample_paths\"\n\n\n--input_id\nNames of the different samples that have to be concatenated. Must be specified when using ‘–mode move’. In this case, the ids will be used for the columns names of the dataframes registring the conflicts. If specified, must be of same length as --input.\nstring, required\n\n\n--output\n\nfile, example: \"output.h5mu\"\n\n\n--obs_sample_name\nName of the .obs key under which to add the sample names.\nstring, default: \"sample_id\"\n\n\n--compression\nThe compression format to be used on the final h5mu object.\nstring, default: \"gzip\"\n\n\n--other_axis_mode\nHow to handle the merging of other axis (var, obs, …). - None: keep no data - same: only keep elements of the matrices which are the same in each of the samples - unique: only keep elements for which there is only 1 possible value (1 value that can occur in multiple samples) - first: keep the annotation from the first sample - only: keep elements that show up in only one of the objects (1 unique element in only 1 sample) - move: identical to ‘same’, but moving the conflicting values to .varm or .obsm\nstring, default: \"move\""
  },
  {
    "objectID": "components/modules/dataflow/concat.html#authors",
    "href": "components/modules/dataflow/concat.html#authors",
    "title": "Concat",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/dataflow/merge.html",
    "href": "components/modules/dataflow/merge.html",
    "title": "Merge",
    "section": "",
    "text": "ID: merge\nNamespace: dataflow\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/dataflow/merge.html#example-commands",
    "href": "components/modules/dataflow/merge.html#example-commands",
    "title": "Merge",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dataflow/merge/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: [\"sample_paths\"]\n# output: \"$id.$key.output.h5mu\"\ncompression: \"gzip\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dataflow/merge/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/dataflow/merge.html#argument-group",
    "href": "components/modules/dataflow/merge.html#argument-group",
    "title": "Merge",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPaths to the single-modality .h5mu files that need to be combined\nfile, required, default: \"sample_paths\"\n\n\n--output\nPath to the output file.\nfile, default: \"output.h5mu\"\n\n\n--compression\nThe compression format to be used on the final h5mu object.\nstring, default: \"gzip\""
  },
  {
    "objectID": "components/modules/dataflow/merge.html#authors",
    "href": "components/modules/dataflow/merge.html#authors",
    "title": "Merge",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/dataflow/split_modalities.html",
    "href": "components/modules/dataflow/split_modalities.html",
    "title": "Split modalities",
    "section": "",
    "text": "ID: split_modalities\nNamespace: dataflow\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/dataflow/split_modalities.html#example-commands",
    "href": "components/modules/dataflow/split_modalities.html#example-commands",
    "title": "Split modalities",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/dataflow/split_modalities/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"sample_path\"\n# output: \"$id.$key.output.output\"\n# output_types: \"$id.$key.output_types.csv\"\ncompression: \"gzip\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/dataflow/split_modalities/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/dataflow/split_modalities.html#argument-group",
    "href": "components/modules/dataflow/split_modalities.html#argument-group",
    "title": "Split modalities",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nPath to a single .h5mu file.\nfile, required, default: \"sample_path\"\n\n\n--output\nOutput directory containing multiple h5mu files.\nfile, required, example: \"/path/to/output\"\n\n\n--output_types\nA csv containing the base filename and modality type per output file.\nfile, required, example: \"types.csv\"\n\n\n--compression\nThe compression format to be used on the final h5mu object.\nstring, default: \"gzip\""
  },
  {
    "objectID": "components/modules/dataflow/split_modalities.html#authors",
    "href": "components/modules/dataflow/split_modalities.html#authors",
    "title": "Split modalities",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)\nRobrecht Cannoodt   (contributor)"
  },
  {
    "objectID": "components/modules/convert/from_10xmtx_to_h5mu.html",
    "href": "components/modules/convert/from_10xmtx_to_h5mu.html",
    "title": "From 10xmtx to h5mu",
    "section": "",
    "text": "ID: from_10xmtx_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/convert/from_10xmtx_to_h5mu.html#example-commands",
    "href": "components/modules/convert/from_10xmtx_to_h5mu.html#example-commands",
    "title": "From 10xmtx to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_10xmtx_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input_dir_containing_gz_files\"\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_10xmtx_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/convert/from_10xmtx_to_h5mu.html#argument-group",
    "href": "components/modules/convert/from_10xmtx_to_h5mu.html#argument-group",
    "title": "From 10xmtx to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput mtx folder\nfile, required, example: \"input_dir_containing_gz_files\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "components/modules/convert/from_10xmtx_to_h5mu.html#authors",
    "href": "components/modules/convert/from_10xmtx_to_h5mu.html#authors",
    "title": "From 10xmtx to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/modules/convert/from_bdrhap_to_h5mu.html",
    "href": "components/modules/convert/from_bdrhap_to_h5mu.html",
    "title": "From bdrhap to h5mu",
    "section": "",
    "text": "ID: from_bdrhap_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/convert/from_bdrhap_to_h5mu.html#example-commands",
    "href": "components/modules/convert/from_bdrhap_to_h5mu.html#example-commands",
    "title": "From bdrhap to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_bdrhap_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"my_id\"\ninput: # please fill in - example: \"input_dir/\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_bdrhap_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/convert/from_bdrhap_to_h5mu.html#argument-groups",
    "href": "components/modules/convert/from_bdrhap_to_h5mu.html#argument-groups",
    "title": "From bdrhap to h5mu",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nA sample ID.\nstring, required, example: \"my_id\"\n\n\n--input\nThe output of a BD Rhapsody workflow.\nfile, required, example: \"input_dir\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "components/modules/convert/from_bdrhap_to_h5mu.html#authors",
    "href": "components/modules/convert/from_bdrhap_to_h5mu.html#authors",
    "title": "From bdrhap to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/modules/convert/from_velocyto_to_h5mu.html",
    "href": "components/modules/convert/from_velocyto_to_h5mu.html",
    "title": "From velocyto to h5mu",
    "section": "",
    "text": "ID: from_velocyto_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/convert/from_velocyto_to_h5mu.html#example-commands",
    "href": "components/modules/convert/from_velocyto_to_h5mu.html#example-commands",
    "title": "From velocyto to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_velocyto_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.loom\"\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_velocyto_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/convert/from_velocyto_to_h5mu.html#argument-group",
    "href": "components/modules/convert/from_velocyto_to_h5mu.html#argument-group",
    "title": "From velocyto to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput velocyto .loom file.\nfile, required, example: \"input.loom\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\""
  },
  {
    "objectID": "components/modules/convert/from_velocyto_to_h5mu.html#authors",
    "href": "components/modules/convert/from_velocyto_to_h5mu.html#authors",
    "title": "From velocyto to h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/convert/from_10xh5_to_h5mu.html",
    "href": "components/modules/convert/from_10xh5_to_h5mu.html",
    "title": "From 10xh5 to h5mu",
    "section": "",
    "text": "ID: from_10xh5_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/convert/from_10xh5_to_h5mu.html#example-commands",
    "href": "components/modules/convert/from_10xh5_to_h5mu.html#example-commands",
    "title": "From 10xh5 to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_10xh5_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"raw_feature_bc_matrix.h5\"\n# input_metrics_summary: \"metrics_cellranger.h5\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\nuns_metrics: \"metrics_cellranger\"\n\n# Arguments\n# min_genes: 100\n# min_counts: 1000\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_10xh5_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/convert/from_10xh5_to_h5mu.html#argument-groups",
    "href": "components/modules/convert/from_10xh5_to_h5mu.html#argument-groups",
    "title": "From 10xh5 to h5mu",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nA 10x h5 file as generated by Cell Ranger.\nfile, required, example: \"raw_feature_bc_matrix.h5\"\n\n\n--input_metrics_summary\nA metrics summary csv file as generated by Cell Ranger.\nfile, example: \"metrics_cellranger.h5\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--uns_metrics\nName of the .uns slot under which to QC metrics (if any).\nstring, default: \"metrics_cellranger\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_genes\nMinimum number of counts required for a cell to pass filtering.\ninteger, example: 100\n\n\n--min_counts\nMinimum number of genes expressed required for a cell to pass filtering.\ninteger, example: 1000"
  },
  {
    "objectID": "components/modules/convert/from_10xh5_to_h5mu.html#authors",
    "href": "components/modules/convert/from_10xh5_to_h5mu.html#authors",
    "title": "From 10xh5 to h5mu",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/modules/convert/from_h5ad_to_h5mu.html",
    "href": "components/modules/convert/from_h5ad_to_h5mu.html",
    "title": "From h5ad to h5mu",
    "section": "",
    "text": "ID: from_h5ad_to_h5mu\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/convert/from_h5ad_to_h5mu.html#example-commands",
    "href": "components/modules/convert/from_h5ad_to_h5mu.html#example-commands",
    "title": "From h5ad to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_h5ad_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: [\"input.h5ad\"]\nmodality: [\"rna\"]\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_h5ad_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/convert/from_h5ad_to_h5mu.html#argument-group",
    "href": "components/modules/convert/from_h5ad_to_h5mu.html#argument-group",
    "title": "From h5ad to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput h5ad files\nfile, required, default: \"input.h5ad\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput MuData file.\nfile, default: \"output.h5mu\""
  },
  {
    "objectID": "components/modules/convert/from_h5ad_to_h5mu.html#authors",
    "href": "components/modules/convert/from_h5ad_to_h5mu.html#authors",
    "title": "From h5ad to h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "components/modules/convert/from_cellranger_multi_to_h5mu.html",
    "href": "components/modules/convert/from_cellranger_multi_to_h5mu.html",
    "title": "From cellranger multi to h5mu",
    "section": "",
    "text": "ID: from_cellranger_multi_to_h5mu\nNamespace: convert\n\n\n\nSource\nCurrently does not allow parsing the output from cell barcode demultiplexing."
  },
  {
    "objectID": "components/modules/convert/from_cellranger_multi_to_h5mu.html#example-commands",
    "href": "components/modules/convert/from_cellranger_multi_to_h5mu.html#example-commands",
    "title": "From cellranger multi to h5mu",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_cellranger_multi_to_h5mu/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input_dir_containing_modalities\"\n# output: \"$id.$key.output.h5mu\"\nuns_metrics: \"metrics_cellranger\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_cellranger_multi_to_h5mu/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/convert/from_cellranger_multi_to_h5mu.html#argument-group",
    "href": "components/modules/convert/from_cellranger_multi_to_h5mu.html#argument-group",
    "title": "From cellranger multi to h5mu",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput folder. Must contain the output from a cellranger multi run.\nfile, required, example: \"input_dir_containing_modalities\"\n\n\n--output\nOutput h5mu file.\nfile, example: \"output.h5mu\"\n\n\n--uns_metrics\nName of the .uns slot under which to QC metrics (if any).\nstring, default: \"metrics_cellranger\""
  },
  {
    "objectID": "components/modules/convert/from_cellranger_multi_to_h5mu.html#authors",
    "href": "components/modules/convert/from_cellranger_multi_to_h5mu.html#authors",
    "title": "From cellranger multi to h5mu",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/convert/from_bd_to_10x_molecular_barcode_tags.html",
    "href": "components/modules/convert/from_bd_to_10x_molecular_barcode_tags.html",
    "title": "From bd to 10x molecular barcode tags",
    "section": "",
    "text": "ID: from_bd_to_10x_molecular_barcode_tags\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/convert/from_bd_to_10x_molecular_barcode_tags.html#example-commands",
    "href": "components/modules/convert/from_bd_to_10x_molecular_barcode_tags.html#example-commands",
    "title": "From bd to 10x molecular barcode tags",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_bd_to_10x_molecular_barcode_tags/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.bam\"\n# output: \"$id.$key.output.sam\"\nbam: false\n# threads: 123\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_bd_to_10x_molecular_barcode_tags/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/convert/from_bd_to_10x_molecular_barcode_tags.html#argument-group",
    "href": "components/modules/convert/from_bd_to_10x_molecular_barcode_tags.html#argument-group",
    "title": "From bd to 10x molecular barcode tags",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput SAM or BAM file.\nfile, required, example: \"input.bam\"\n\n\n--output\nOutput alignment file.\nfile, example: \"output.sam\"\n\n\n--bam\nOutput a BAM file.\nboolean_true\n\n\n--threads\nNumber of threads\ninteger"
  },
  {
    "objectID": "components/modules/convert/from_bd_to_10x_molecular_barcode_tags.html#authors",
    "href": "components/modules/convert/from_bd_to_10x_molecular_barcode_tags.html#authors",
    "title": "From bd to 10x molecular barcode tags",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (maintainer)"
  },
  {
    "objectID": "components/modules/convert/from_h5mu_to_h5ad.html",
    "href": "components/modules/convert/from_h5mu_to_h5ad.html",
    "title": "From h5mu to h5ad",
    "section": "",
    "text": "ID: from_h5mu_to_h5ad\nNamespace: convert\n\n\n\nSource"
  },
  {
    "objectID": "components/modules/convert/from_h5mu_to_h5ad.html#example-commands",
    "href": "components/modules/convert/from_h5mu_to_h5ad.html#example-commands",
    "title": "From h5mu to h5ad",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/convert/from_h5mu_to_h5ad/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\n# output: \"$id.$key.output.h5ad\"\ncompression: \"gzip\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/convert/from_h5mu_to_h5ad/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/convert/from_h5mu_to_h5ad.html#argument-group",
    "href": "components/modules/convert/from_h5mu_to_h5ad.html#argument-group",
    "title": "From h5mu to h5ad",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput MuData file\nfile, required, default: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--output\nOutput AnnData file.\nfile, default: \"output.h5ad\"\n\n\n--compression\nThe compression format to be used on the final h5ad object.\nstring, default: \"gzip\""
  },
  {
    "objectID": "components/modules/convert/from_h5mu_to_h5ad.html#authors",
    "href": "components/modules/convert/from_h5mu_to_h5ad.html#authors",
    "title": "From h5mu to h5ad",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/modules/cluster/leiden.html",
    "href": "components/modules/cluster/leiden.html",
    "title": "Leiden",
    "section": "",
    "text": "ID: leiden\nNamespace: cluster\n\n\n\nSource\nLeiden is an improved version of the Louvain algorithm [Blondel08]. It has been proposed for single-cell analysis by [Levine15]. This requires having ran neighbors/find_neighbors or neighbors/bbknn first.\nBlondel08: Blondel et al. (2008), Fast unfolding of communities in large networks, J. Stat. Mech.\nLevine15: Levine et al. (2015), Data-Driven Phenotypic Dissection of AML Reveals Progenitor-like Cells that Correlate with Prognosis, Cell.\nTraag18: Traag et al. (2018), From Louvain to Leiden: guaranteeing well-connected communities arXiv.\nWolf18: Wolf et al. (2018), Scanpy: large-scale single-cell gene expression data analysis, Genome Biology."
  },
  {
    "objectID": "components/modules/cluster/leiden.html#example-commands",
    "href": "components/modules/cluster/leiden.html#example-commands",
    "title": "Leiden",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/cluster/leiden/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\ninput: # please fill in - example: \"input.h5mu\"\nmodality: \"rna\"\nobsp_connectivities: \"connectivities\"\n# output: \"$id.$key.output.h5mu\"\nobs_name: \"leiden\"\nresolution: 1\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/cluster/leiden/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/cluster/leiden.html#argument-group",
    "href": "components/modules/cluster/leiden.html#argument-group",
    "title": "Leiden",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput file.\nfile, required, example: \"input.h5mu\"\n\n\n--modality\n\nstring, default: \"rna\"\n\n\n--obsp_connectivities\nIn which .obsp slot the neighbor connectivities can be found.\nstring, default: \"connectivities\"\n\n\n--output\nOutput file.\nfile, required, example: \"output.h5mu\"\n\n\n--obs_name\nName of the .obs key under which to add the cluster labels.\nstring, default: \"leiden\"\n\n\n--resolution\nA parameter value controlling the coarseness of the clustering. Higher values lead to more clusters.\ndouble, default: 1"
  },
  {
    "objectID": "components/modules/cluster/leiden.html#authors",
    "href": "components/modules/cluster/leiden.html#authors",
    "title": "Leiden",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (maintainer)"
  },
  {
    "objectID": "components/modules/correction/cellbender_remove_background.html",
    "href": "components/modules/correction/cellbender_remove_background.html",
    "title": "Cellbender remove background",
    "section": "",
    "text": "ID: cellbender_remove_background\nNamespace: correction\n\n\n\nSource\nThis module removes counts due to ambient RNA molecules and random barcode swapping from (raw) UMI-based scRNA-seq count matrices. At the moment, only the count matrices produced by the CellRanger count pipeline is supported. Support for additional tools and protocols will be added in the future. A quick start tutorial can be found here.\nFleming et al. 2022, bioRxiv."
  },
  {
    "objectID": "components/modules/correction/cellbender_remove_background.html#example-commands",
    "href": "components/modules/correction/cellbender_remove_background.html#example-commands",
    "title": "Cellbender remove background",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script target/nextflow/correction/cellbender_remove_background/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\ninput: # please fill in - example: \"input.h5\"\nmodality: \"rna\"\n\n# Outputs\n# output: \"$id.$key.output.h5\"\nlayer_output: \"corrected\"\nobs_latent_rt_efficiency: \"latent_rt_efficiency\"\nobs_latent_cell_probability: \"latent_cell_probability\"\nobs_latent_scale: \"latent_scale\"\nvar_ambient_expression: \"ambient_expression\"\n\n# Arguments\n# expected_cells: 1000\n# total_droplets_included: 25000\nexpected_cells_from_qc: true\nmodel: \"full\"\nepochs: 150\nlow_count_threshold: 15\nz_dim: 100\nz_layers: [500]\ntraining_fraction: 0.9\nempty_drop_training_fraction: 0.5\nfpr: [0.01]\nexclude_antibody_capture: false\n# learning_rate: 1.0E-4\ncuda: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script target/nextflow/correction/cellbender_remove_background/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/modules/correction/cellbender_remove_background.html#argument-groups",
    "href": "components/modules/correction/cellbender_remove_background.html#argument-groups",
    "title": "Cellbender remove background",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--input\nInput file.\nfile, required, example: \"input.h5\"\n\n\n--modality\nList of modalities to process.\nstring, default: \"rna\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nFull count matrix as an h5mu file, with background RNA removed. This file contains all the original droplet barcodes.\nfile, required, example: \"output.h5\"\n\n\n--layer_output\nOutput layer\nstring, default: \"corrected\"\n\n\n--obs_latent_rt_efficiency\n\nstring, default: \"latent_rt_efficiency\"\n\n\n--obs_latent_cell_probability\n\nstring, default: \"latent_cell_probability\"\n\n\n--obs_latent_scale\n\nstring, default: \"latent_scale\"\n\n\n--var_ambient_expression\n\nstring, default: \"ambient_expression\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--expected_cells\nNumber of cells expected in the dataset (a rough estimate within a factor of 2 is sufficient).\ninteger, example: 1000\n\n\n--total_droplets_included\nThe number of droplets from the rank-ordered UMI plot that will be analyzed. The largest ‘total_droplets’ droplets will have their cell probabilities inferred as an output.\ninteger, example: 25000\n\n\n--expected_cells_from_qc\nWill use the Cell Ranger QC to determine the estimated number of cells\nboolean, default: TRUE\n\n\n--model\nWhich model is being used for count data. ‘simple’ does not model either ambient RNA or random barcode swapping (for debugging purposes – not recommended). ‘ambient’ assumes background RNA is incorporated into droplets. ‘swapping’ assumes background RNA comes from random barcode swapping. ‘full’ uses a combined ambient and swapping model.\nstring, default: \"full\"\n\n\n--epochs\nNumber of epochs to train.\ninteger, default: 150\n\n\n--low_count_threshold\nDroplets with UMI counts below this number are completely excluded from the analysis. This can help identify the correct prior for empty droplet counts in the rare case where empty counts are extremely high (over 200).\ninteger, default: 15\n\n\n--z_dim\nDimension of latent variable z.\ninteger, default: 100\n\n\n--z_layers\nDimension of hidden layers in the encoder for z.\ninteger, default: 500\n\n\n--training_fraction\nTraining detail: the fraction of the data used for training. The rest is never seen by the inference algorithm. Speeds up learning.\ndouble, default: 0.9\n\n\n--empty_drop_training_fraction\nTraining detail: the fraction of the training data each epoch that is drawn (randomly sampled) from surely empty droplets.\ndouble, default: 0.5\n\n\n--fpr\nTarget false positive rate in (0, 1). A false positive is a true signal count that is erroneously removed. More background removal is accompanied by more signal removal at high values of FPR. You can specify multiple values, which will create multiple output files.\ndouble, default: 0.01\n\n\n--exclude_antibody_capture\nIncluding the flag –exclude-antibody-capture will cause remove-background to operate on gene counts only, ignoring other features.\nboolean_true\n\n\n--learning_rate\nTraining detail: lower learning rate for inference. A OneCycle learning rate schedule is used, where the upper learning rate is ten times this value. (For this value, probably do not exceed 1e-3).\ndouble, example: 1e-04\n\n\n--cuda\nIncluding the flag –cuda will run the inference on a GPU.\nboolean_true"
  },
  {
    "objectID": "components/modules/correction/cellbender_remove_background.html#authors",
    "href": "components/modules/correction/cellbender_remove_background.html#authors",
    "title": "Cellbender remove background",
    "section": "Authors",
    "text": "Authors"
  },
  {
    "objectID": "components/index.html",
    "href": "components/index.html",
    "title": "Reference",
    "section": "",
    "text": "Order By\n       Default\n         \n          Name\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nName\n\n\nNamespace\n\n\nDescription\n\n\n\n\n\n\nBD Rhapsody\n\n\nIngestion\n\n\nA generic pipeline for running BD Rhapsody WTA or Targeted mapping, with support for AbSeq, VDJ and/or SMK.\n\n\n\n\nCell Ranger mapping\n\n\nIngestion\n\n\nA pipeline for running Cell Ranger mapping.\n\n\n\n\nCell Ranger post-processing\n\n\nIngestion\n\n\nPost-processing Cell Ranger datasets.\n\n\n\n\nConversion\n\n\nIngestion\n\n\nA pipeline to convert different file formats to .h5mu.\n\n\n\n\nDemux\n\n\nIngestion\n\n\nA generic pipeline for running bcl2fastq, bcl-convert or Cell Ranger mkfastq.\n\n\n\n\nFull pipeline\n\n\nMultiomics\n\n\nA pipeline to analyse multiple multiomics samples.\n\n\n\n\nIntegration\n\n\nMultiomics\n\n\nA pipeline for demultiplexing multimodal multi-sample RNA transcriptomics data.\n\n\n\n\nMake reference\n\n\nIngestion\n\n\nBuild a transcriptomics reference into one of many formats\n\n\n\n\nRna multisample\n\n\nMultiomics\n\n\nProcessing unimodal multi-sample RNA transcriptomics data.\n\n\n\n\nRna singlesample\n\n\nMultiomics\n\n\nProcessing unimodal single-sample RNA transcriptomics data.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "components/index.html#modules",
    "href": "components/index.html#modules",
    "title": "Reference",
    "section": "Modules",
    "text": "Modules\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Name\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nName\n\n\nNamespace\n\n\nDescription\n\n\n\n\n\n\nAdd id\n\n\nMetadata\n\n\nAdd id of .obs.\n\n\n\n\nBD Rhapsody\n\n\nMapping\n\n\nA wrapper for the BD Rhapsody Analysis CWL v1.10.1 pipeline\n\n\n\n\nBbknn\n\n\nNeighbors\n\n\nBBKNN network generation\n\n\n\n\nBcl convert\n\n\nDemux\n\n\nConvert bcl files to fastq files using bcl-convert.\n\n\n\n\nBcl2fastq\n\n\nDemux\n\n\nConvert bcl files to fastq files using bcl2fastq\n\n\n\n\nBuild bdrhap reference\n\n\nReference\n\n\nCompile a reference into a STAR index compatible with the BD Rhapsody pipeline.\n\n\n\n\nBuild cellranger reference\n\n\nReference\n\n\nBuild a Cell Ranger-compatible reference folder from user-supplied genome FASTA and gene GTF files.\n\n\n\n\nCellbender remove background\n\n\nCorrection\n\n\nEliminating technical artifacts from high-throughput single-cell RNA sequencing data.\n\n\n\n\nCellranger count\n\n\nMapping\n\n\nAlign fastq files using Cell Ranger count.\n\n\n\n\nCellranger count split\n\n\nMapping\n\n\nSplit 10x Cell Ranger output directory into separate output fields.\n\n\n\n\nCellranger mkfastq\n\n\nDemux\n\n\nDemultiplex raw sequencing data\n\n\n\n\nCellranger multi\n\n\nMapping\n\n\nAlign fastq files using Cell Ranger multi.\n\n\n\n\nConcat\n\n\nDataflow\n\n\nConcatenates several uni-modal samples in .h5mu files into a single file\n\n\n\n\nDelete layer\n\n\nTransform\n\n\nDelete an anndata layer from one or more modalities\n\n\n\n\nDo filter\n\n\nFilter\n\n\nRemove observations and variables based on specified .obs and .var columns\n\n\n\n\nDownload file\n\n\nDownload\n\n\nDownload a file\n\n\n\n\nFastqc\n\n\nQc\n\n\nFastqc component, please see https://www.bioinformatics.babraham.ac.uk/projects/fastqc/.\n\n\n\n\nFilter 10xh5\n\n\nProcess 10xh5\n\n\nFilter a 10x h5 dataset\n\n\n\n\nFilter with counts\n\n\nFilter\n\n\nFilter scRNA-seq data based on the primary QC metrics.\n\n\n\n\nFilter with hvg\n\n\nFilter\n\n\nAnnotate highly variable genes [Satija15] [Zheng17] [Stuart19].\n\n\n\n\nFilter with scrublet\n\n\nFilter\n\n\nDoublet detection using the Scrublet method (Wolock, Lopez and Klein, 2019).\n\n\n\n\nFind neighbors\n\n\nNeighbors\n\n\nCompute a neighborhood graph of observations [McInnes18].\n\n\n\n\nFrom 10xh5 to h5mu\n\n\nConvert\n\n\nConverts a 10x h5 into an h5mu file\n\n\n\n\nFrom 10xmtx to h5mu\n\n\nConvert\n\n\nConverts a 10x mtx into an h5mu file\n\n\n\n\nFrom bd to 10x molecular barcode tags\n\n\nConvert\n\n\nConvert the molecular barcode sequence SAM tag from BD format (MA) to 10X format (UB)\n\n\n\n\nFrom bdrhap to h5mu\n\n\nConvert\n\n\nConvert the output of a BD Rhapsody WTA pipeline to a MuData h5 file\n\n\n\n\nFrom cellranger multi to h5mu\n\n\nConvert\n\n\nConverts the output from cellranger multi to a single .h5mu file.\n\n\n\n\nFrom h5ad to h5mu\n\n\nConvert\n\n\nConverts a single layer h5ad file into a single MuData object\n\n\n\n\nFrom h5mu to h5ad\n\n\nConvert\n\n\nConverts a h5mu file into a h5ad file\n\n\n\n\nFrom velocyto to h5mu\n\n\nConvert\n\n\nConvert a velocyto .loom file to h5mu\n\n\n\n\nHarmonypy\n\n\nIntegrate\n\n\nPerforms Harmony integration based as described in https://github.com/immunogenomics/harmony.\n\n\n\n\nJoin csv\n\n\nMetadata\n\n\nJoin a csv containing metadata to the .obs or .var field of a mudata file.\n\n\n\n\nJoin uns to obs\n\n\nMetadata\n\n\nJoin a data frame in .uns containing metadata to the .obs of a mudata file.\n\n\n\n\nLeiden\n\n\nCluster\n\n\nCluster cells using the Leiden algorithm [Traag18] implemented in the Scanpy framework [Wolf18].\n\n\n\n\nLog1p\n\n\nTransform\n\n\nLogarithmize the data matrix.\n\n\n\n\nMake params\n\n\nFiles\n\n\nLooks for files in a directory and turn it in a params file.\n\n\n\n\nMake reference\n\n\nReference\n\n\nPreprocess and build a transcriptome reference.\n\n\n\n\nMerge\n\n\nDataflow\n\n\nCombine one or more single-modality .h5mu files together into one .h5mu file\n\n\n\n\nMermaid\n\n\nReport\n\n\nGenerates a network from mermaid code\n\n\n\n\nMultiqc\n\n\nQc\n\n\nComponent for multiqc (https://multiqc.info/)\n\n\n\n\nNormalize total\n\n\nTransform\n\n\nNormalize counts per cell.\n\n\n\n\nPca\n\n\nDimred\n\n\nComputes PCA coordinates, loadings and variance decomposition.\n\n\n\n\nPublish\n\n\nTransfer\n\n\nPublish an artifact and optionally rename with parameters\n\n\n\n\nRegress out\n\n\nTransform\n\n\nRegress out (mostly) unwanted sources of variation.\n\n\n\n\nScale\n\n\nTransform\n\n\nScale data to unit variance and zero mean\n\n\n\n\nScanorama\n\n\nIntegrate\n\n\nUse Scanorama to integrate different experiments\n\n\n\n\nScvelo\n\n\nVelocity\n\n\n\n\n\n\n\nScvi\n\n\nIntegrate\n\n\nPerforms scvi integration as done in the human lung cell atlas https://github.com/LungCellAtlas/HLCA\n\n\n\n\nSplit modalities\n\n\nDataflow\n\n\nSplit the modalities from a single .h5mu multimodal sample into seperate .h5mu files.\n\n\n\n\nStar align\n\n\nMapping\n\n\nAlign fastq files using STAR.\n\n\n\n\nSubset h5mu\n\n\nFilter\n\n\nCreate a subset of a mudata file by selecting the first number of observations\n\n\n\n\nSync test resources\n\n\nDownload\n\n\nSynchronise the test resources from s3://openpipelines-data to resources_test\n\n\n\n\nUmap\n\n\nDimred\n\n\nUMAP (Uniform Manifold Approximation and Projection) is a manifold learning technique suitable for visualizing high-dimensional data.\n\n\n\n\nVelocyto\n\n\nVelocity\n\n\nRuns the velocity analysis on a BAM file, outputting a loom file.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "components/workflows/ingestion/bd_rhapsody.html",
    "href": "components/workflows/ingestion/bd_rhapsody.html",
    "title": "BD Rhapsody",
    "section": "",
    "text": "ID: bd_rhapsody\nNamespace: ingestion\n\n\n\nSource\nA wrapper for the BD Rhapsody Analysis CWL v1.10.1 pipeline.\nThis pipeline can be used for a targeted analysis (with --mode targeted) or for a whole transcriptome analysis (with --mode wta).\nThe reference_genome and transcriptome_annotation files can be generated with the make_reference pipeline. Alternatively, BD also provides standard references which can be downloaded from these locations:"
  },
  {
    "objectID": "components/workflows/ingestion/bd_rhapsody.html#example-commands",
    "href": "components/workflows/ingestion/bd_rhapsody.html#example-commands",
    "title": "BD Rhapsody",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/bd_rhapsody/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nmode: # please fill in - example: \"wta\"\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: [\"input.fastq.gz\"]\nreference: # please fill in - example: [\"reference_genome.tar.gz|reference.fasta\"]\n# transcriptome_annotation: \"transcriptome.gtf\"\n# abseq_reference: [\"abseq_reference.fasta\"]\n# supplemental_reference: [\"supplemental_reference.fasta\"]\nsample_prefix: \"sample\"\n\n# Outputs\n# output_raw: \"$id.$key.output_raw.output_raw\"\n# output_h5mu: \"$id.$key.output_h5mu.h5mu\"\n\n# Putative cell calling settings\n# putative_cell_call: \"mRNA\"\n# exact_cell_count: 10000\ndisable_putative_calling: false\n\n# Subsample arguments\n# subsample: 0.01\n# subsample_seed: 3445\n\n# Multiplex arguments\n# sample_tags_version: \"human\"\n# tag_names: [\"4-mySample\", \"9-myOtherSample\", \"6-alsoThisSample\"]\n\n# VDJ arguments\n# vdj_version: \"human\"\n\n# CWL-runner arguments\nparallel: true\ntimestamps: false\ndryrun: false\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/bd_rhapsody/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/ingestion/bd_rhapsody.html#argument-groups",
    "href": "components/workflows/ingestion/bd_rhapsody.html#argument-groups",
    "title": "BD Rhapsody",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--mode\nWhether to run a whole transcriptome analysis (WTA) or a targeted analysis.\nstring, required, example: \"wta\"\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want.\nfile, required, example: \"input.fastq.gz\"\n\n\n--reference\nRefence to map to. For --mode wta, this is the path to STAR index as a tar.gz file. For --mode targeted, this is the path to mRNA reference file for pre-designed, supplemental, or custom panel, in FASTA format\nfile, required, example: \"reference_genome.tar.gz&#124;reference.fasta\"\n\n\n--transcriptome_annotation\nPath to GTF annotation file (only for --mode wta).\nfile, example: \"transcriptome.gtf\"\n\n\n--abseq_reference\nPath to the AbSeq reference file in FASTA format. Only needed if BD AbSeq Ab-Oligos are used.\nfile, example: \"abseq_reference.fasta\"\n\n\n--supplemental_reference\nPath to the supplemental reference file in FASTA format. Only needed if there are additional transgene sequences used in the experiment (only for --mode wta).\nfile, example: \"supplemental_reference.fasta\"\n\n\n--sample_prefix\nSpecify a run name to use as the output file base name. Use only letters, numbers, or hyphens. Do not use special characters or spaces.\nstring, default: \"sample\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output_raw\nThe BD Rhapsody output folder as it comes out of the BD Rhapsody pipeline\nfile, required, example: \"output_dir\"\n\n\n--output_h5mu\nThe converted h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n\n\n\nPutative cell calling settings\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--putative_cell_call\nSpecify the dataset to be used for putative cell calling. For putative cell calling using an AbSeq dataset, please provide an AbSeq_Reference fasta file above.\nstring, example: \"mRNA\"\n\n\n--exact_cell_count\nExact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count\ninteger, example: 10000\n\n\n--disable_putative_calling\nDisable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve). The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types. Does not apply if Exact Cell Count is set.\nboolean_true\n\n\n\n\n\nSubsample arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--subsample\nA number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample.\ndouble, example: 0.01\n\n\n--subsample_seed\nA seed for replicating a previous subsampled run.\ninteger, example: 3445\n\n\n\n\n\nMultiplex arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sample_tags_version\nSpecify if multiplexed run.\nstring, example: \"human\"\n\n\n--tag_names\nTag_Names (optional) - Specify the tag number followed by ‘-’ and the desired sample name to appear in Sample_Tag_Metrics.csv. Do not use the special characters: &, (), [], {}, <>, ?, |\nstring, example: \"4-mySample\", example: \"9-myOtherSample\", example: \"6-alsoThisSample\"\n\n\n\n\n\nVDJ arguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--vdj_version\nSpecify if VDJ run.\nstring, example: \"human\"\n\n\n\n\n\nCWL-runner arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--parallel\nRun jobs in parallel.\nboolean, default: TRUE\n\n\n--timestamps\nAdd timestamps to the errors, warnings, and notifications.\nboolean_true\n\n\n--dryrun\nIf true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.\nboolean_true"
  },
  {
    "objectID": "components/workflows/ingestion/bd_rhapsody.html#authors",
    "href": "components/workflows/ingestion/bd_rhapsody.html#authors",
    "title": "BD Rhapsody",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "components/workflows/ingestion/bd_rhapsody.html#visualisation",
    "href": "components/workflows/ingestion/bd_rhapsody.html#visualisation",
    "title": "BD Rhapsody",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p8(bd_rhapsody)\n    p16(from_bdrhap_to_h5mu)\n    p22(Output)\n    p0-->p8\n    p8-->p16\n    p16-->p22"
  },
  {
    "objectID": "components/workflows/ingestion/make_reference.html",
    "href": "components/workflows/ingestion/make_reference.html",
    "title": "Make reference",
    "section": "",
    "text": "ID: make_reference\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "components/workflows/ingestion/make_reference.html#example-commands",
    "href": "components/workflows/ingestion/make_reference.html#example-commands",
    "title": "Make reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/make_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ngenome_fasta: # please fill in - example: \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz\"\ntranscriptome_gtf: # please fill in - example: \"https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz\"\n# ercc: \"https://assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip\"\n\n# Outputs\ntarget: [\"raw\"]\n# output_fasta: \"$id.$key.output_fasta.gz\"\n# output_gtf: \"$id.$key.output_gtf.gz\"\n# output_cellranger: \"$id.$key.output_cellranger.gz\"\n# output_bd_rhapsody: \"$id.$key.output_bd_rhapsody.gz\"\n\n# Arguments\n# subset_regex: \"(ERCC-00002|chr1)\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/make_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/ingestion/make_reference.html#argument-groups",
    "href": "components/workflows/ingestion/make_reference.html#argument-groups",
    "title": "Make reference",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the reference.\nstring, required, example: \"foo\"\n\n\n--genome_fasta\nReference genome fasta.\nfile, required, example: \"https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz\"\n\n\n--ercc\nERCC sequence and annotation file.\nfile, example: \"https:/assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--target\nWhich reference indices to generate.\nstring, default: \"raw\"\n\n\n--output_fasta\nOutput genome sequence fasta.\nfile, example: \"genome_sequence.fa.gz\"\n\n\n--output_gtf\nOutput transcriptome annotation gtf.\nfile, example: \"transcriptome_annotation.gtf.gz\"\n\n\n--output_cellranger\nOutput index\nfile, example: \"index.tar.gz\"\n\n\n--output_bd_rhapsody\nOutput index\nfile, example: \"index.tar.gz\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--subset_regex\nWill subset the reference chromosomes using the given regex.\nstring, example: \"(ERCC-00002&#124;chr1)\""
  },
  {
    "objectID": "components/workflows/ingestion/make_reference.html#authors",
    "href": "components/workflows/ingestion/make_reference.html#authors",
    "title": "Make reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "components/workflows/ingestion/make_reference.html#visualisation",
    "href": "components/workflows/ingestion/make_reference.html#visualisation",
    "title": "Make reference",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p9(make_reference)\n    p13(filter)\n    p18(build_cellranger_reference)\n    p34(join)\n    p23(filter)\n    p28(build_bdrhap_reference)\n    p35(join)\n    p36(join)\n    p41(Output)\n    p34-->p35\n    p35-->p36\n    p0-->p9\n    p9-->p13\n    p13-->p18\n    p18-->p34\n    p9-->p23\n    p23-->p28\n    p28-->p35\n    p0-->p36\n    p9-->p34\n    p36-->p41"
  },
  {
    "objectID": "components/workflows/ingestion/demux.html",
    "href": "components/workflows/ingestion/demux.html",
    "title": "Demux",
    "section": "",
    "text": "ID: demux\nNamespace: ingestion\n\n\n\nSource\nConvert .bcl files to .fastq files using bcl2fastq, bcl-convert or Cell Ranger mkfastq."
  },
  {
    "objectID": "components/workflows/ingestion/demux.html#example-commands",
    "href": "components/workflows/ingestion/demux.html#example-commands",
    "title": "Demux",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/demux/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"bcl_dir\"\nsample_sheet: # please fill in - example: \"bcl_dir\"\ndemultiplexer: \"bcl2fastq\"\n# ignore_missing: true\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/demux/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/ingestion/demux.html#argument-group",
    "href": "components/workflows/ingestion/demux.html#argument-group",
    "title": "Demux",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nInput run directory\nfile, required, example: \"bcl_dir\"\n\n\n--sample_sheet\nPointer to the sample sheet\nfile, required, example: \"bcl_dir\"\n\n\n--demultiplexer\nThe multiplexer to use, one of bclconvert or mkfastq\nstring, default: \"bcl2fastq\"\n\n\n--ignore_missing\nShould the demultiplexer ignore missing entities (filter, …)\nboolean"
  },
  {
    "objectID": "components/workflows/ingestion/demux.html#authors",
    "href": "components/workflows/ingestion/demux.html#authors",
    "title": "Demux",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (author, maintainer)\nMarijke Van Moerbeke  (author)\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author)"
  },
  {
    "objectID": "components/workflows/ingestion/demux.html#visualisation",
    "href": "components/workflows/ingestion/demux.html#visualisation",
    "title": "Demux",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p3(filter)\n    p8(cellranger_mkfastq)\n    p27(mix)\n    p11(filter)\n    p16(bcl_convert)\n    p19(filter)\n    p24(bcl2fastq)\n    p32(fastqc)\n    p35(Output)\n    p37(toSortedList)\n    p43(multiqc)\n    p46(Output)\n    p50(Output)\n    p0-->p3\n    p0-->p11\n    p0-->p19\n    p3-->p8\n    p8-->p27\n    p11-->p16\n    p16-->p27\n    p19-->p24\n    p24-->p27\n    p27-->p32\n    p32-->p35\n    p27-->p37\n    p37-->p43\n    p43-->p46\n    p27-->p50"
  },
  {
    "objectID": "components/workflows/ingestion/conversion.html",
    "href": "components/workflows/ingestion/conversion.html",
    "title": "Conversion",
    "section": "",
    "text": "ID: conversion\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "components/workflows/ingestion/conversion.html#example-commands",
    "href": "components/workflows/ingestion/conversion.html#example-commands",
    "title": "Conversion",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/conversion/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: [\"input.h5mu\"]\ninput_type: # please fill in - example: \"foo\"\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\n\n# Conversion from h5ad\n# modality: [\"foo\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/conversion/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/ingestion/conversion.html#argument-groups",
    "href": "components/workflows/ingestion/conversion.html#argument-groups",
    "title": "Conversion",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"input.h5mu\"\n\n\n--input_type\nType of the input file\nstring, required\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nName or template for the output files.\nfile, example: \"output.h5mu\"\n\n\n\n\n\nConversion from h5ad\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--modality\nName of the modality where the h5ad is stored in the h5mu object.\nstring"
  },
  {
    "objectID": "components/workflows/ingestion/conversion.html#authors",
    "href": "components/workflows/ingestion/conversion.html#authors",
    "title": "Conversion",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author, maintainer)\nDries De Maeyer  (author)"
  },
  {
    "objectID": "components/workflows/ingestion/conversion.html#visualisation",
    "href": "components/workflows/ingestion/conversion.html#visualisation",
    "title": "Conversion",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p3(filter)\n    p8(from_10xh5_to_h5mu)\n    p27(mix)\n    p11(filter)\n    p16(from_10xmtx_to_h5mu)\n    p19(filter)\n    p24(from_h5ad_to_h5mu)\n    p29(toSortedList)\n    p31(Output)\n    p0-->p3\n    p0-->p11\n    p0-->p19\n    p3-->p8\n    p8-->p27\n    p11-->p16\n    p16-->p27\n    p19-->p24\n    p24-->p27\n    p27-->p29\n    p29-->p31"
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_postprocessing.html",
    "href": "components/workflows/ingestion/cellranger_postprocessing.html",
    "title": "Cell Ranger post-processing",
    "section": "",
    "text": "ID: cellranger_postprocessing\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_postprocessing.html#example-commands",
    "href": "components/workflows/ingestion/cellranger_postprocessing.html#example-commands",
    "title": "Cell Ranger post-processing",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/cellranger_postprocessing/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"input.h5mu\"\n\n# Outputs\n# output: \"$id.$key.output.output\"\n\n# Correction arguments\nperform_correction: false\n\n# Filtering arguments\n# min_genes: 100\n# min_counts: 1000\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/cellranger_postprocessing/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_postprocessing.html#argument-groups",
    "href": "components/workflows/ingestion/cellranger_postprocessing.html#argument-groups",
    "title": "Cell Ranger post-processing",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nInput h5mu file created by running Cell Ranger and converting its output to h5mu.\nfile, required, example: \"input.h5mu\"\n\n\n\n\n\nOutputs\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe converted h5mu file.\nfile\n\n\n\n\n\nCorrection arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--perform_correction\nWhether or not to run CellBender to perform count correction.\nboolean_true\n\n\n\n\n\nFiltering arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_genes\nMinimum number of counts required for a cell to pass filtering.\ninteger, example: 100\n\n\n--min_counts\nMinimum number of genes expressed required for a cell to pass filtering.\ninteger, example: 1000"
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_postprocessing.html#authors",
    "href": "components/workflows/ingestion/cellranger_postprocessing.html#authors",
    "title": "Cell Ranger post-processing",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_postprocessing.html#visualisation",
    "href": "components/workflows/ingestion/cellranger_postprocessing.html#visualisation",
    "title": "Cell Ranger post-processing",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p7(from_10xh5_to_h5mu)\n    p15(subset_h5mu)\n    p21(filter)\n    p26(cellbender_remove_background)\n    p31(mix)\n    p30(filter)\n    p32(filter)\n    p38(filter_with_counts)\n    p42(mix)\n    p41(filter)\n    p48(publish)\n    p54(Output)\n    p30-->p31\n    p31-->p32\n    p31-->p41\n    p41-->p42\n    p0-->p7\n    p7-->p15\n    p15-->p21\n    p15-->p30\n    p21-->p26\n    p26-->p31\n    p32-->p38\n    p38-->p42\n    p42-->p48\n    p48-->p54"
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_mapping.html",
    "href": "components/workflows/ingestion/cellranger_mapping.html",
    "title": "Cell Ranger mapping",
    "section": "",
    "text": "ID: cellranger_mapping\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_mapping.html#example-commands",
    "href": "components/workflows/ingestion/cellranger_mapping.html#example-commands",
    "title": "Cell Ranger mapping",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/ingestion/cellranger_mapping/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: [\"sample_S1_L001_R1_001.fastq.gz\", \"sample_S1_L001_R2_001.fastq.gz\"]\nreference: # please fill in - example: \"reference.tar.gz\"\n\n# Outputs\n# output_raw: \"$id.$key.output_raw.output_raw\"\n# output_h5mu: \"$id.$key.output_h5mu.h5mu\"\nobsm_metrics: \"metrics_summary\"\n\n# Cell Ranger arguments\n# expect_cells: 3000\nchemistry: \"auto\"\nsecondary_analysis: false\ngenerate_bam: true\ninclude_introns: true\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/ingestion/cellranger_mapping/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_mapping.html#argument-groups",
    "href": "components/workflows/ingestion/cellranger_mapping.html#argument-groups",
    "title": "Cell Ranger mapping",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nThe fastq.gz files to align. Can also be a single directory containing fastq.gz files.\nfile, required, example: \"sample_S1_L001_R1_001.fastq.gz\", example: \"sample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nThe path to Cell Ranger reference tar.gz file.\nfile, required, example: \"reference.tar.gz\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output_raw\nThe raw output folder.\nfile, required, example: \"output_dir\"\n\n\n--output_h5mu\nThe converted h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_metrics\nName of the .obsm slot under which to QC metrics (if any).\nstring, default: \"metrics_summary\"\n\n\n\n\n\nCell Ranger arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--generate_bam\nWhether to generate a BAM file.\nboolean, default: TRUE\n\n\n--include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE"
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_mapping.html#authors",
    "href": "components/workflows/ingestion/cellranger_mapping.html#authors",
    "title": "Cell Ranger mapping",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)\nDries De Maeyer  (author)"
  },
  {
    "objectID": "components/workflows/ingestion/cellranger_mapping.html#visualisation",
    "href": "components/workflows/ingestion/cellranger_mapping.html#visualisation",
    "title": "Cell Ranger mapping",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p9(cellranger_count)\n    p16(cellranger_count_split)\n    p24(from_10xh5_to_h5mu)\n    p31(Output)\n    p0-->p9\n    p9-->p16\n    p16-->p24\n    p24-->p31"
  },
  {
    "objectID": "components/workflows/multiomics/integration.html",
    "href": "components/workflows/multiomics/integration.html",
    "title": "Integration",
    "section": "",
    "text": "ID: integration\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "components/workflows/multiomics/integration.html#example-commands",
    "href": "components/workflows/multiomics/integration.html#example-commands",
    "title": "Integration",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/multiomics/integration/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"dataset.h5mu\"\nlayer: \"log_normalized\"\nobs_covariates: # please fill in - example: [\"batch\", \"sample\"]\n\n# Outputs\n# output: \"$id.$key.output.h5mu\"\nobsm_pca: \"X_pca\"\nobsm_integrated: \"X_pca_integrated\"\nuns_neighbors: \"neighbors\"\nobsp_neighbor_distances: \"distances\"\nobsp_neighbor_connectivities: \"connectivities\"\nobs_cluster: \"leiden\"\nobsm_umap: \"X_umap\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/multiomics/integration/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/multiomics/integration.html#argument-groups",
    "href": "components/workflows/multiomics/integration.html#argument-groups",
    "title": "Integration",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"dataset.h5mu\"\n\n\n--layer\nuse specified layer for expression values instead of the .X object from the modality.\nstring, default: \"log_normalized\"\n\n\n--obs_covariates\nThe .obs field(s) that define the covariate(s) to regress out.\nstring, required, example: \"batch\", example: \"sample\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nDestination path to the output.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_pca\nIn which .obsm slot to store the resulting PCA embedding.\nstring, default: \"X_pca\"\n\n\n--obsm_integrated\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_pca_integrated\"\n\n\n--uns_neighbors\nIn which .uns slot to store various neighbor output objects.\nstring, default: \"neighbors\"\n\n\n--obsp_neighbor_distances\nIn which .obsp slot to store the distance matrix between the resulting neighbors.\nstring, default: \"distances\"\n\n\n--obsp_neighbor_connectivities\nIn which .obsp slot to store the connectivities matrix between the resulting neighbors.\nstring, default: \"connectivities\"\n\n\n--obs_cluster\nName of the .obs key under which to add the cluster labels.\nstring, default: \"leiden\"\n\n\n--obsm_umap\nIn which .obsm slot to store the resulting UMAP embedding.\nstring, default: \"X_umap\""
  },
  {
    "objectID": "components/workflows/multiomics/integration.html#authors",
    "href": "components/workflows/multiomics/integration.html#authors",
    "title": "Integration",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "components/workflows/multiomics/integration.html#visualisation",
    "href": "components/workflows/multiomics/integration.html#visualisation",
    "title": "Integration",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p9(pca)\n    p17(harmonypy)\n    p25(find_neighbors)\n    p33(leiden)\n    p41(umap)\n    p48(Output)\n    p0-->p9\n    p9-->p17\n    p17-->p25\n    p25-->p33\n    p33-->p41\n    p41-->p48"
  },
  {
    "objectID": "components/workflows/multiomics/full_pipeline.html",
    "href": "components/workflows/multiomics/full_pipeline.html",
    "title": "Full pipeline",
    "section": "",
    "text": "ID: full_pipeline\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "components/workflows/multiomics/full_pipeline.html#example-commands",
    "href": "components/workflows/multiomics/full_pipeline.html#example-commands",
    "title": "Full pipeline",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/multiomics/full_pipeline/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Inputs\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"input.h5mu\"\nobs_covariates: # please fill in - example: [\"batch\", \"sample\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/multiomics/full_pipeline/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/multiomics/full_pipeline.html#argument-group",
    "href": "components/workflows/multiomics/full_pipeline.html#argument-group",
    "title": "Full pipeline",
    "section": "Argument group",
    "text": "Argument group\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"input.h5mu\"\n\n\n--obs_covariates\nThe .obs field(s) that define the covariate(s) to regress out.\nstring, required, example: \"batch\", example: \"sample\""
  },
  {
    "objectID": "components/workflows/multiomics/full_pipeline.html#authors",
    "href": "components/workflows/multiomics/full_pipeline.html#authors",
    "title": "Full pipeline",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author, maintainer)"
  },
  {
    "objectID": "components/workflows/multiomics/full_pipeline.html#visualisation",
    "href": "components/workflows/multiomics/full_pipeline.html#visualisation",
    "title": "Full pipeline",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p8(add_id)\n    p15(split_modalities)\n    p18(flatMap)\n    p19(filter)\n    p25(filter_with_counts)\n    p32(do_filter)\n    p40(filter_with_scrublet)\n    p43(toSortedList)\n    p44(filter)\n    p51(concat)\n    p58(normalize_total)\n    p65(log1p)\n    p72(delete_layer)\n    p80(filter_with_hvg)\n    p105(concat)\n    p83(filter)\n    p84(toSortedList)\n    p85(filter)\n    p91(concat)\n    p94(filter)\n    p95(toSortedList)\n    p96(filter)\n    p102(test_wf:run_wf:concat:concat_process1)\n    p106(toSortedList)\n    p112(merge)\n    p122(pca)\n    p130(harmonypy)\n    p138(find_neighbors)\n    p146(leiden)\n    p154(umap)\n    p159(toSortedList)\n    p161(Output)\n    p18-->p19\n    p43-->p44\n    p18-->p83\n    p83-->p84\n    p84-->p85\n    p18-->p94\n    p94-->p95\n    p95-->p96\n    p105-->p106\n    p0-->p8\n    p8-->p15\n    p15-->p18\n    p19-->p25\n    p25-->p32\n    p32-->p40\n    p40-->p43\n    p44-->p51\n    p51-->p58\n    p58-->p65\n    p65-->p72\n    p72-->p80\n    p80-->p105\n    p85-->p91\n    p91-->p105\n    p96-->p102\n    p102-->p105\n    p106-->p112\n    p112-->p122\n    p122-->p130\n    p130-->p138\n    p138-->p146\n    p146-->p154\n    p154-->p159\n    p159-->p161"
  },
  {
    "objectID": "components/workflows/multiomics/rna_multisample.html",
    "href": "components/workflows/multiomics/rna_multisample.html",
    "title": "Rna multisample",
    "section": "",
    "text": "ID: rna_multisample\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "components/workflows/multiomics/rna_multisample.html#example-commands",
    "href": "components/workflows/multiomics/rna_multisample.html#example-commands",
    "title": "Rna multisample",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/multiomics/rna_multisample/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nid: # please fill in - example: \"concatenated\"\nsample_id: # please fill in - example: [\"foo\"]\ninput: # please fill in - example: [\"dataset.h5mu\"]\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/multiomics/rna_multisample/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/multiomics/rna_multisample.html#argument-group",
    "href": "components/workflows/multiomics/rna_multisample.html#argument-group",
    "title": "Rna multisample",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the concatenated file\nstring, required, example: \"concatenated\"\n\n\n--sample_id\nIDs of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the samples.\nfile, required, example: \"dataset.h5mu\""
  },
  {
    "objectID": "components/workflows/multiomics/rna_multisample.html#authors",
    "href": "components/workflows/multiomics/rna_multisample.html#authors",
    "title": "Rna multisample",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "components/workflows/multiomics/rna_multisample.html#visualisation",
    "href": "components/workflows/multiomics/rna_multisample.html#visualisation",
    "title": "Rna multisample",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p8(concat)\n    p15(normalize_total)\n    p22(log1p)\n    p29(delete_layer)\n    p37(filter_with_hvg)\n    p43(Output)\n    p0-->p8\n    p8-->p15\n    p15-->p22\n    p22-->p29\n    p29-->p37\n    p37-->p43"
  },
  {
    "objectID": "components/workflows/multiomics/rna_singlesample.html",
    "href": "components/workflows/multiomics/rna_singlesample.html",
    "title": "Rna singlesample",
    "section": "",
    "text": "ID: rna_singlesample\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "components/workflows/multiomics/rna_singlesample.html#example-commands",
    "href": "components/workflows/multiomics/rna_singlesample.html#example-commands",
    "title": "Rna singlesample",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -main-script workflows/multiomics/rna_singlesample/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n# Arguments\nid: # please fill in - example: \"foo\"\ninput: # please fill in - example: \"dataset.h5mu\"\n# output: \"$id.$key.output.h5mu\"\n\n# Nextflow input-output arguments\npublish_dir: # please fill in - example: \"output/\"\n# param_list: \"my_params.yaml\"\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main_build -latest \\\n  -profile docker \\\n  -main-script workflows/multiomics/rna_singlesample/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "components/workflows/multiomics/rna_singlesample.html#argument-group",
    "href": "components/workflows/multiomics/rna_singlesample.html#argument-group",
    "title": "Rna singlesample",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"dataset.h5mu\"\n\n\n--output\nDestination path to the output.\nfile, required, example: \"output.h5mu\""
  },
  {
    "objectID": "components/workflows/multiomics/rna_singlesample.html#authors",
    "href": "components/workflows/multiomics/rna_singlesample.html#authors",
    "title": "Rna singlesample",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "components/workflows/multiomics/rna_singlesample.html#visualisation",
    "href": "components/workflows/multiomics/rna_singlesample.html#visualisation",
    "title": "Rna singlesample",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p8(filter_with_counts)\n    p15(do_filter)\n    p23(filter_with_scrublet)\n    p29(Output)\n    p0-->p8\n    p8-->p15\n    p15-->p23\n    p23-->p29"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Openpipelines",
    "section": "",
    "text": "Getting started\n\nFinding a workflow\nExecuting a workflow\nUser guide\n\n\n\nContribute\n\nSourcecode\nReport a bug\nCreating a component\n\n\n\nAbout OpenPipeline\n\nWhat is OpenPipelines?\nTeam"
  },
  {
    "objectID": "workflows/docs/generate_component_qmd.html",
    "href": "workflows/docs/generate_component_qmd.html",
    "title": "Generate component qmd",
    "section": "",
    "text": "ID: generate_component_qmd\nNamespace: docs\n\n\n\nSource"
  },
  {
    "objectID": "workflows/docs/generate_component_qmd.html#example-commands",
    "href": "workflows/docs/generate_component_qmd.html#example-commands",
    "title": "Generate component qmd",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script viash_tools/workflows/docs/generate_component_qmd/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script viash_tools/workflows/docs/generate_component_qmd/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/docs/generate_component_qmd.html#argument-group",
    "href": "workflows/docs/generate_component_qmd.html#argument-group",
    "title": "Generate component qmd",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the parsed repository.\nstring, required, example: \"foo\"\n\n\n--input\nRepository url (currently only public repositories are supported)\nstring, required, example: \"https://github.com/viash-io/viash_tools.git\"\n\n\n--build_dir\nOutput location of build viash components, relative to the root of the repository.\nfile, required, example: \"foo\""
  },
  {
    "objectID": "workflows/docs/generate_component_qmd.html#authors",
    "href": "workflows/docs/generate_component_qmd.html#authors",
    "title": "Generate component qmd",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont  (author, maintainer)"
  },
  {
    "objectID": "workflows/docs/generate_component_qmd.html#visualisation",
    "href": "workflows/docs/generate_component_qmd.html#visualisation",
    "title": "Generate component qmd",
    "section": "Visualisation",
    "text": "Visualisation\n\n\n\n\nflowchart LR\n    p0(Input)\n    p7(ns_list)\n    p14(viash_configs_to_qmd)\n    p20(Output)\n    p0-->p7\n    p7-->p14\n    p14-->p20"
  },
  {
    "objectID": "workflows/ingestion/bd_rhapsody.html",
    "href": "workflows/ingestion/bd_rhapsody.html",
    "title": "BD Rhapsody",
    "section": "",
    "text": "ID: bd_rhapsody\nNamespace: ingestion\n\n\n\nSource\nA wrapper for the BD Rhapsody Analysis CWL v1.10.1 pipeline.\nThis pipeline can be used for a targeted analysis (with --mode targeted) or for a whole transcriptome analysis (with --mode wta).\nThe reference_genome and transcriptome_annotation files can be generated with the make_reference pipeline. Alternatively, BD also provides standard references which can be downloaded from these locations:"
  },
  {
    "objectID": "workflows/ingestion/bd_rhapsody.html#example-commands",
    "href": "workflows/ingestion/bd_rhapsody.html#example-commands",
    "title": "BD Rhapsody",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/ingestion/bd_rhapsody/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/ingestion/bd_rhapsody/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/ingestion/bd_rhapsody.html#argument-groups",
    "href": "workflows/ingestion/bd_rhapsody.html#argument-groups",
    "title": "BD Rhapsody",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--mode\nWhether to run a whole transcriptome analysis (WTA) or a targeted analysis.\nstring, required, example: \"wta\"\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want.\nfile, required, example: \"input.fastq.gz\"\n\n\n--reference\nRefence to map to. For --mode wta, this is the path to STAR index as a tar.gz file. For --mode targeted, this is the path to mRNA reference file for pre-designed, supplemental, or custom panel, in FASTA format\nfile, required, example: \"reference_genome.tar.gz&#124;reference.fasta\"\n\n\n--transcriptome_annotation\nPath to GTF annotation file (only for --mode wta).\nfile, example: \"transcriptome.gtf\"\n\n\n--abseq_reference\nPath to the AbSeq reference file in FASTA format. Only needed if BD AbSeq Ab-Oligos are used.\nfile, example: \"abseq_reference.fasta\"\n\n\n--supplemental_reference\nPath to the supplemental reference file in FASTA format. Only needed if there are additional transgene sequences used in the experiment (only for --mode wta).\nfile, example: \"supplemental_reference.fasta\"\n\n\n--sample_prefix\nSpecify a run name to use as the output file base name. Use only letters, numbers, or hyphens. Do not use special characters or spaces.\nstring, default: \"sample\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output_raw\nThe BD Rhapsody output folder as it comes out of the BD Rhapsody pipeline\nfile, required, example: \"output_dir\"\n\n\n--output_h5mu\nThe converted h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n\n\n\nPutative cell calling settings\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--putative_cell_call\nSpecify the dataset to be used for putative cell calling. For putative cell calling using an AbSeq dataset, please provide an AbSeq_Reference fasta file above.\nstring, example: \"mRNA\"\n\n\n--exact_cell_count\nExact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count\ninteger, example: 10000\n\n\n--disable_putative_calling\nDisable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve). The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types. Does not apply if Exact Cell Count is set.\nboolean_true\n\n\n\n\n\nSubsample arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--subsample\nA number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample.\ndouble, example: 0.01\n\n\n--subsample_seed\nA seed for replicating a previous subsampled run.\ninteger, example: 3445\n\n\n\n\n\nMultiplex arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--sample_tags_version\nSpecify if multiplexed run.\nstring, example: \"human\"\n\n\n--tag_names\nTag_Names (optional) - Specify the tag number followed by ‘-’ and the desired sample name to appear in Sample_Tag_Metrics.csv. Do not use the special characters: &, (), [], {}, <>, ?, |\nstring, example: \"4-mySample\", example: \"9-myOtherSample\", example: \"6-alsoThisSample\"\n\n\n\n\n\nVDJ arguments\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--vdj_version\nSpecify if VDJ run.\nstring, example: \"human\"\n\n\n\n\n\nCWL-runner arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--parallel\nRun jobs in parallel.\nboolean, default: TRUE\n\n\n--timestamps\nAdd timestamps to the errors, warnings, and notifications.\nboolean_true\n\n\n--dryrun\nIf true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.\nboolean_true"
  },
  {
    "objectID": "workflows/ingestion/bd_rhapsody.html#authors",
    "href": "workflows/ingestion/bd_rhapsody.html#authors",
    "title": "BD Rhapsody",
    "section": "Authors",
    "text": "Authors\n\nRobrecht Cannoodt   (maintainer)"
  },
  {
    "objectID": "workflows/ingestion/make_reference.html",
    "href": "workflows/ingestion/make_reference.html",
    "title": "Make reference",
    "section": "",
    "text": "ID: make_reference\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "workflows/ingestion/make_reference.html#example-commands",
    "href": "workflows/ingestion/make_reference.html#example-commands",
    "title": "Make reference",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/ingestion/make_reference/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/ingestion/make_reference/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/ingestion/make_reference.html#argument-groups",
    "href": "workflows/ingestion/make_reference.html#argument-groups",
    "title": "Make reference",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the reference.\nstring, required, example: \"foo\"\n\n\n--genome_fasta\nReference genome fasta.\nfile, required, example: \"https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/GRCh38.primary_assembly.genome.fa.gz\"\n\n\n--transcriptome_gtf\nReference transcriptome annotation.\nfile, required, example: \"https:/ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_41/gencode.v41.annotation.gtf.gz\"\n\n\n--ercc\nERCC sequence and annotation file.\nfile, example: \"https:/assets.thermofisher.com/TFS-Assets/LSG/manuals/ERCC92.zip\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--target\nWhich reference indices to generate.\nstring, default: \"star\"\n\n\n--output_fasta\nOutput genome sequence fasta.\nfile, example: \"genome_sequence.fa.gz\"\n\n\n--output_gtf\nOutput transcriptome annotation gtf.\nfile, example: \"transcriptome_annotation.gtf.gz\"\n\n\n--output_cellranger\nOutput index\nfile, example: \"cellranger_index.tar.gz\"\n\n\n--output_bd_rhapsody\nOutput index\nfile, example: \"bdrhap_index.tar.gz\"\n\n\n--output_star\nOutput index\nfile, example: \"star_index.tar.gz\"\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--subset_regex\nWill subset the reference chromosomes using the given regex.\nstring, example: \"(ERCC-00002&#124;chr1)\""
  },
  {
    "objectID": "workflows/ingestion/make_reference.html#authors",
    "href": "workflows/ingestion/make_reference.html#authors",
    "title": "Make reference",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "workflows/ingestion/demux.html",
    "href": "workflows/ingestion/demux.html",
    "title": "Demux",
    "section": "",
    "text": "ID: demux\nNamespace: ingestion\n\n\n\nSource\nConvert .bcl files to .fastq files using bcl2fastq, bcl-convert or Cell Ranger mkfastq."
  },
  {
    "objectID": "workflows/ingestion/demux.html#example-commands",
    "href": "workflows/ingestion/demux.html#example-commands",
    "title": "Demux",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/ingestion/demux/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/ingestion/demux/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/ingestion/demux.html#argument-group",
    "href": "workflows/ingestion/demux.html#argument-group",
    "title": "Demux",
    "section": "Argument group",
    "text": "Argument group\n\nArguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nInput run directory\nfile, required, example: \"bcl_dir\"\n\n\n--sample_sheet\nPointer to the sample sheet\nfile, required, example: \"bcl_dir\"\n\n\n--demultiplexer\nThe multiplexer to use, one of bclconvert or mkfastq\nstring, default: \"bcl2fastq\"\n\n\n--ignore_missing\nShould the demultiplexer ignore missing entities (filter, …)\nboolean"
  },
  {
    "objectID": "workflows/ingestion/demux.html#authors",
    "href": "workflows/ingestion/demux.html#authors",
    "title": "Demux",
    "section": "Authors",
    "text": "Authors\n\nToni Verbeiren  (author, maintainer)\nMarijke Van Moerbeke  (author)\nAngela Pisco   (author)\nSamuel D’Souza  (author)\nRobrecht Cannoodt   (author)"
  },
  {
    "objectID": "workflows/ingestion/cellranger_multi.html",
    "href": "workflows/ingestion/cellranger_multi.html",
    "title": "Cell Ranger multi",
    "section": "",
    "text": "ID: cellranger_multi\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "workflows/ingestion/cellranger_multi.html#example-commands",
    "href": "workflows/ingestion/cellranger_multi.html#example-commands",
    "title": "Cell Ranger multi",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/ingestion/cellranger_multi/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/ingestion/cellranger_multi/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/ingestion/cellranger_multi.html#argument-groups",
    "href": "workflows/ingestion/cellranger_multi.html#argument-groups",
    "title": "Cell Ranger multi",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nThe fastq.gz files to align. Can also be a single directory containing fastq.gz files.\nfile, required, example: \"sample_S1_L001_R1_001.fastq.gz\", example: \"sample_S1_L001_R2_001.fastq.gz\"\n\n\n--gex_reference\nGenome refence index built by Cell Ranger mkref.\nfile, required, example: \"reference_genome.tar.gz\"\n\n\n--vdj_reference\nVDJ refence index built by Cell Ranger mkref.\nfile, example: \"reference_vdj.tar.gz\"\n\n\n--feature_reference\nPath to the Feature reference CSV file, declaring Feature Barcode constructs and associated barcodes. Required only for Antibody Capture or CRISPR Guide Capture libraries. See https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/feature-bc-analysis#feature-ref for more information.\nfile, example: \"feature_reference.csv\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output_raw\nThe raw output folder.\nfile, required, example: \"output_dir\"\n\n\n--output_h5mu\nThe converted h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--uns_metrics\nName of the .uns slot under which to QC metrics (if any).\nstring, default: \"metrics_cellranger\"\n\n\n\n\n\nCell multiplexing parameters\nArguments related to cell multiplexing.\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--cell_multiplex_sample_id\nA name to identify a multiplexed sample. Must be alphanumeric with hyphens and/or underscores, and less than 64 characters. Required for Cell Multiplexing libraries.\nstring\n\n\n--cell_multiplex_oligo_ids\nThe Cell Multiplexing oligo IDs used to multiplex this sample. If multiple CMOs were used for a sample, separate IDs with a pipe (e.g., CMO301|CMO302). Required for Cell Multiplexing libraries.\nstring\n\n\n--cell_multiplex_description\nA description for the sample.\nstring\n\n\n\n\n\nGene expression arguments\nArguments relevant to the analysis of gene expression data.\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--gex_expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--gex_chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--gex_secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--gex_generate_bam\nWhether to generate a BAM file.\nboolean, default: TRUE\n\n\n--gex_include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE\n\n\n\n\n\nLibrary arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--library_id\nThe Illumina sample name to analyze. This must exactly match the ‘Sample Name’ part of the FASTQ files specified in the --input argument.\nstring, required, example: \"mysample1\"\n\n\n--library_type\nThe underlying feature type of the library. Possible values: “Gene Expression”, “VDJ”, “VDJ-T”, “VDJ-B”, “Antibody Capture”, “CRISPR Guide Capture”, “Multiplexing Capture”\nstring, required, example: \"Gene Expression\"\n\n\n--library_subsample\nOptional. The rate at which reads from the provided FASTQ files are sampled. Must be strictly greater than 0 and less than or equal to 1.\nstring, example: \"0.5\"\n\n\n--library_lanes\nLanes associated with this sample. Defaults to using all lanes.\nstring, example: \"1-4\""
  },
  {
    "objectID": "workflows/ingestion/cellranger_multi.html#authors",
    "href": "workflows/ingestion/cellranger_multi.html#authors",
    "title": "Cell Ranger multi",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author)"
  },
  {
    "objectID": "workflows/ingestion/conversion.html",
    "href": "workflows/ingestion/conversion.html",
    "title": "Conversion",
    "section": "",
    "text": "ID: conversion\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "workflows/ingestion/conversion.html#example-commands",
    "href": "workflows/ingestion/conversion.html#example-commands",
    "title": "Conversion",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/ingestion/conversion/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/ingestion/conversion/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/ingestion/conversion.html#argument-groups",
    "href": "workflows/ingestion/conversion.html#argument-groups",
    "title": "Conversion",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"input.h5mu\"\n\n\n--input_type\nType of the input file\nstring, required\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nName or template for the output files.\nfile, example: \"output.h5mu\"\n\n\n\n\n\nConversion from h5ad\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--modality\nName of the modality where the h5ad is stored in the h5mu object.\nstring"
  },
  {
    "objectID": "workflows/ingestion/conversion.html#authors",
    "href": "workflows/ingestion/conversion.html#authors",
    "title": "Conversion",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author, maintainer)\nDries De Maeyer  (author)"
  },
  {
    "objectID": "workflows/ingestion/cellranger_postprocessing.html",
    "href": "workflows/ingestion/cellranger_postprocessing.html",
    "title": "Cell Ranger post-processing",
    "section": "",
    "text": "ID: cellranger_postprocessing\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "workflows/ingestion/cellranger_postprocessing.html#example-commands",
    "href": "workflows/ingestion/cellranger_postprocessing.html#example-commands",
    "title": "Cell Ranger post-processing",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/ingestion/cellranger_postprocessing/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/ingestion/cellranger_postprocessing/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/ingestion/cellranger_postprocessing.html#argument-groups",
    "href": "workflows/ingestion/cellranger_postprocessing.html#argument-groups",
    "title": "Cell Ranger post-processing",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nInput h5mu file created by running Cell Ranger and converting its output to h5mu.\nfile, required, example: \"input.h5mu\"\n\n\n\n\n\nOutputs\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nThe converted h5mu file.\nfile\n\n\n\n\n\nCorrection arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--perform_correction\nWhether or not to run CellBender to perform count correction.\nboolean_true\n\n\n\n\n\nFiltering arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_genes\nMinimum number of counts required for a cell to pass filtering.\ninteger, example: 100\n\n\n--min_counts\nMinimum number of genes expressed required for a cell to pass filtering.\ninteger, example: 1000"
  },
  {
    "objectID": "workflows/ingestion/cellranger_postprocessing.html#authors",
    "href": "workflows/ingestion/cellranger_postprocessing.html#authors",
    "title": "Cell Ranger post-processing",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)"
  },
  {
    "objectID": "workflows/ingestion/cellranger_mapping.html",
    "href": "workflows/ingestion/cellranger_mapping.html",
    "title": "Cell Ranger mapping",
    "section": "",
    "text": "ID: cellranger_mapping\nNamespace: ingestion\n\n\n\nSource"
  },
  {
    "objectID": "workflows/ingestion/cellranger_mapping.html#example-commands",
    "href": "workflows/ingestion/cellranger_mapping.html#example-commands",
    "title": "Cell Ranger mapping",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/ingestion/cellranger_mapping/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/ingestion/cellranger_mapping/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/ingestion/cellranger_mapping.html#argument-groups",
    "href": "workflows/ingestion/cellranger_mapping.html#argument-groups",
    "title": "Cell Ranger mapping",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nThe fastq.gz files to align. Can also be a single directory containing fastq.gz files.\nfile, required, example: \"sample_S1_L001_R1_001.fastq.gz\", example: \"sample_S1_L001_R2_001.fastq.gz\"\n\n\n--reference\nThe path to Cell Ranger reference tar.gz file.\nfile, required, example: \"reference.tar.gz\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output_raw\nThe raw output folder.\nfile, required, example: \"output_dir\"\n\n\n--output_h5mu\nThe converted h5mu file.\nfile, required, example: \"output.h5mu\"\n\n\n--obsm_metrics\nName of the .obsm slot under which to QC metrics (if any).\nstring, default: \"metrics_summary\"\n\n\n\n\n\nCell Ranger arguments\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--expect_cells\nExpected number of recovered cells, used as input to cell calling algorithm.\ninteger, example: 3000\n\n\n--chemistry\nAssay configuration. - auto: autodetect mode - threeprime: Single Cell 3’ - fiveprime: Single Cell 5’ - SC3Pv1: Single Cell 3’ v1 - SC3Pv2: Single Cell 3’ v2 - SC3Pv3: Single Cell 3’ v3 - SC3Pv3LT: Single Cell 3’ v3 LT - SC3Pv3HT: Single Cell 3’ v3 HT - SC5P-PE: Single Cell 5’ paired-end - SC5P-R2: Single Cell 5’ R2-only - SC-FB: Single Cell Antibody-only 3’ v2 or 5’ See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\nstring, default: \"auto\"\n\n\n--secondary_analysis\nWhether or not to run the secondary analysis e.g. clustering.\nboolean, default: FALSE\n\n\n--generate_bam\nWhether to generate a BAM file.\nboolean, default: TRUE\n\n\n--include_introns\nInclude intronic reads in count (default=true unless –target-panel is specified in which case default=false)\nboolean, default: TRUE"
  },
  {
    "objectID": "workflows/ingestion/cellranger_mapping.html#authors",
    "href": "workflows/ingestion/cellranger_mapping.html#authors",
    "title": "Cell Ranger mapping",
    "section": "Authors",
    "text": "Authors\n\nAngela Pisco   (author)\nRobrecht Cannoodt   (author, maintainer)\nDries De Maeyer  (author)"
  },
  {
    "objectID": "workflows/multiomics/integration.html",
    "href": "workflows/multiomics/integration.html",
    "title": "Integration",
    "section": "",
    "text": "ID: integration\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "workflows/multiomics/integration.html#example-commands",
    "href": "workflows/multiomics/integration.html#example-commands",
    "title": "Integration",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/multiomics/integration/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/multiomics/integration/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/multiomics/integration.html#argument-groups",
    "href": "workflows/multiomics/integration.html#argument-groups",
    "title": "Integration",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"dataset.h5mu\"\n\n\n--layer\nuse specified layer for expression values instead of the .X object from the modality.\nstring, default: \"log_normalized\"\n\n\n\n\n\nOutputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nDestination path to the output.\nfile, required, example: \"output.h5mu\"\n\n\n\n\n\nPCA options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--obsm_pca\nIn which .obsm slot to store the resulting PCA embedding.\nstring, default: \"X_pca\"\n\n\n--var_pca_feature_selection\nColumn name in .var matrix that will be used to select which genes to run the PCA on.\nstring\n\n\n\n\n\nHarmony integration options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--obsm_integrated\nIn which .obsm slot to store the resulting integrated embedding.\nstring, default: \"X_pca_integrated\"\n\n\n--obs_covariates\nThe .obs field(s) that define the covariate(s) to regress out.\nstring, required, example: \"batch\", example: \"sample\"\n\n\n\n\n\nNeighbour calculation\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--uns_neighbors\nIn which .uns slot to store various neighbor output objects.\nstring, default: \"neighbors\"\n\n\n--obsp_neighbor_distances\nIn which .obsp slot to store the distance matrix between the resulting neighbors.\nstring, default: \"distances\"\n\n\n--obsp_neighbor_connectivities\nIn which .obsp slot to store the connectivities matrix between the resulting neighbors.\nstring, default: \"connectivities\"\n\n\n\n\n\nClustering options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--obs_cluster\nName of the .obs key under which to add the cluster labels.\nstring, default: \"leiden\"\n\n\n\n\n\nUmap options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--obsm_umap\nIn which .obsm slot to store the resulting UMAP embedding.\nstring, default: \"X_umap\""
  },
  {
    "objectID": "workflows/multiomics/integration.html#authors",
    "href": "workflows/multiomics/integration.html#authors",
    "title": "Integration",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "workflows/multiomics/full_pipeline.html",
    "href": "workflows/multiomics/full_pipeline.html",
    "title": "Full pipeline",
    "section": "",
    "text": "ID: full_pipeline\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "workflows/multiomics/full_pipeline.html#example-commands",
    "href": "workflows/multiomics/full_pipeline.html#example-commands",
    "title": "Full pipeline",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/multiomics/full_pipeline/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/multiomics/full_pipeline/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/multiomics/full_pipeline.html#argument-groups",
    "href": "workflows/multiomics/full_pipeline.html#argument-groups",
    "title": "Full pipeline",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"input.h5mu\"\n\n\n--obs_covariates\nThe .obs field(s) that define the covariate(s) to regress out.\nstring, default: \"sample_id\", example: \"batch\", example: \"sample\"\n\n\n\n\n\nRNA filtering options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--rna_min_counts\nMinimum number of counts captured per cell.\ninteger, example: 200\n\n\n--rna_max_counts\nMaximum number of counts captured per cell.\ninteger, example: 5000000\n\n\n--rna_min_vars_per_cell\nMinimum of non-zero values per cell.\ninteger, example: 200\n\n\n--rna_max_vars_per_cell\nMaximum of non-zero values per cell.\ninteger, example: 1500000\n\n\n--min_cells_per_protein\nMinimum of non-zero values per antibody.\ninteger, example: 3\n\n\n--rna_min_fraction_mito\nMinimum fraction of UMIs that are mitochondrial.\ndouble, example: 0\n\n\n--rna_max_fraction_mito\nMaximum fraction of UMIs that are mitochondrial.\ndouble, example: 0.2\n\n\n\n\n\nCITE-seq filtering options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--prot_min_counts\nMinimum number of counts per cell.\ninteger, example: 3\n\n\n--prot_max_counts\nMinimum number of counts per cell.\ninteger, example: 5000000\n\n\n--prot_min_vars_per_cell\nMinimum of non-zero values per cell.\ninteger, example: 200\n\n\n--prot_max_vars_per_cell\nMaximum of non-zero values per cell.\ninteger, example: 100000000\n\n\n--prot_min_cells_per_protein\nMinimum of non-zero values per protein.\ninteger, example: 3\n\n\n--prot_min_fraction_mito\nMinimum fraction of proteins that are mitochondrial.\ndouble, example: 0\n\n\n--prot_max_fraction_mito\nMaximum fraction of proteins that are mitochondrial.\ndouble, example: 0.2\n\n\n\n\n\nHighly variable gene detection\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--filter_with_hvg_var_output\nIn which .var slot to store a boolean array corresponding to the highly variable genes.\nstring, default: \"filter_with_hvg\"\n\n\n--filter_with_hvg_obs_batch_key\nIf specified, highly-variable genes are selected within each batch separately and merged. This simple process avoids the selection of batch-specific genes and acts as a lightweight batch correction method.\nstring, default: \"sample_id\"\n\n\n\n\n\nQC metrics calculation options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--var_qc_metrics\nKeys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled ‘True’, compared to the total sum of the values for all genes.\nstring, default: \"filter_with_hvg\", example: \"ercc,highly_variable\"\n\n\n--top_n_vars\nNumber of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. --top_n_vars 20,50 finds cumulative proportion to the 20th and 50th most expressed vars.\ninteger, default: 50, default: 100, default: 200, default: 500"
  },
  {
    "objectID": "workflows/multiomics/full_pipeline.html#authors",
    "href": "workflows/multiomics/full_pipeline.html#authors",
    "title": "Full pipeline",
    "section": "Authors",
    "text": "Authors\n\nDries Schaumont   (author, maintainer)"
  },
  {
    "objectID": "workflows/multiomics/rna_multisample.html",
    "href": "workflows/multiomics/rna_multisample.html",
    "title": "Rna multisample",
    "section": "",
    "text": "ID: rna_multisample\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "workflows/multiomics/rna_multisample.html#example-commands",
    "href": "workflows/multiomics/rna_multisample.html#example-commands",
    "title": "Rna multisample",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/multiomics/rna_multisample/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/multiomics/rna_multisample/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/multiomics/rna_multisample.html#argument-groups",
    "href": "workflows/multiomics/rna_multisample.html#argument-groups",
    "title": "Rna multisample",
    "section": "Argument groups",
    "text": "Argument groups\n\nInputs\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the concatenated file\nstring, required, example: \"concatenated\"\n\n\n--sample_id\nIDs of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the samples.\nfile, required, example: \"dataset.h5mu\"\n\n\n\n\n\nFiltering highly variable genes\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--filter_with_hvg_var_output\nIn which .var slot to store a boolean array corresponding to the highly variable genes.\nstring, default: \"filter_with_hvg\"\n\n\n--filter_with_hvg_obs_batch_key\nIf specified, highly-variable genes are selected within each batch separately and merged. This simple process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. For all flavors, genes are first sorted by how many batches they are a HVG. For dispersion-based flavors ties are broken by normalized dispersion. If flavor = ‘seurat_v3’, ties are broken by the median (across batches) rank based on within-batch normalized variance.\nstring, default: \"sample_id\"\n\n\n--filter_with_hvg_flavor\nChoose the flavor for identifying highly variable genes. For the dispersion based methods in their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_genes.\nstring, default: \"seurat\"\n\n\n--filter_with_hvg_n_top_genes\nNumber of highly-variable genes to keep. Mandatory if filter_with_hvg_flavor is set to ‘seurat_v3’.\ninteger\n\n\n\n\n\nQC metrics calculation options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--var_qc_metrics\nKeys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled ‘True’, compared to the total sum of the values for all genes.\nstring, default: \"filter_with_hvg\", example: \"ercc,highly_variable\"\n\n\n--top_n_vars\nNumber of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. --top_n_vars 20,50 finds cumulative proportion to the 20th and 50th most expressed vars.\ninteger, default: 50, default: 100, default: 200, default: 500"
  },
  {
    "objectID": "workflows/multiomics/rna_multisample.html#authors",
    "href": "workflows/multiomics/rna_multisample.html#authors",
    "title": "Rna multisample",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "workflows/multiomics/rna_singlesample.html",
    "href": "workflows/multiomics/rna_singlesample.html",
    "title": "Rna singlesample",
    "section": "",
    "text": "ID: rna_singlesample\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "workflows/multiomics/rna_singlesample.html#example-commands",
    "href": "workflows/multiomics/rna_singlesample.html#example-commands",
    "title": "Rna singlesample",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/multiomics/rna_singlesample/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/multiomics/rna_singlesample/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/multiomics/rna_singlesample.html#argument-groups",
    "href": "workflows/multiomics/rna_singlesample.html#argument-groups",
    "title": "Rna singlesample",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"dataset.h5mu\"\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nDestination path to the output.\nfile, required, example: \"output.h5mu\"\n\n\n\n\n\nFiltering options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_counts\nMinimum number of counts captured per cell.\ninteger, example: 200\n\n\n--max_counts\nMaximum number of counts captured per cell.\ninteger, example: 5000000\n\n\n--min_genes_per_cell\nMinimum of non-zero values per cell.\ninteger, example: 200\n\n\n--max_genes_per_cell\nMaximum of non-zero values per cell.\ninteger, example: 1500000\n\n\n--min_cells_per_gene\nMinimum of non-zero values per gene.\ninteger, example: 3\n\n\n--min_fraction_mito\nMinimum fraction of UMIs that are mitochondrial.\ndouble, example: 0\n\n\n--max_fraction_mito\nMaximum fraction of UMIs that are mitochondrial.\ndouble, example: 0.2"
  },
  {
    "objectID": "workflows/multiomics/rna_singlesample.html#authors",
    "href": "workflows/multiomics/rna_singlesample.html#authors",
    "title": "Rna singlesample",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "workflows/multiomics/prot_singlesample.html",
    "href": "workflows/multiomics/prot_singlesample.html",
    "title": "Prot singlesample",
    "section": "",
    "text": "ID: prot_singlesample\nNamespace: multiomics\n\n\n\nSource"
  },
  {
    "objectID": "workflows/multiomics/prot_singlesample.html#example-commands",
    "href": "workflows/multiomics/prot_singlesample.html#example-commands",
    "title": "Prot singlesample",
    "section": "Example commands",
    "text": "Example commands\nYou can run the pipeline using nextflow run.\n\nView help\nYou can use --help as a parameter to get an overview of the possible parameters.\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -main-script openpipelines/workflows/multiomics/prot_singlesample/main.nf \\\n  --help\n\n\nRun command\n\n\nExample of params.yaml\n\n\n\nnextflow run openpipelines-bio/openpipeline \\\n  -r main -latest \\\n  -profile docker \\\n  -main-script openpipelines/workflows/multiomics/prot_singlesample/main.nf \\\n  -params-file params.yaml\n\n\n\n\n\n\nNote\n\n\n\nReplace -profile docker with -profile podman or -profile singularity depending on the desired backend."
  },
  {
    "objectID": "workflows/multiomics/prot_singlesample.html#argument-groups",
    "href": "workflows/multiomics/prot_singlesample.html#argument-groups",
    "title": "Prot singlesample",
    "section": "Argument groups",
    "text": "Argument groups\n\nInput\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--id\nID of the sample.\nstring, required, example: \"foo\"\n\n\n--input\nPath to the sample.\nfile, required, example: \"dataset.h5mu\"\n\n\n\n\n\nOutput\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--output\nDestination path to the output.\nfile, required, example: \"output.h5mu\"\n\n\n\n\n\nFiltering options\n\n\n\n\n\n\n\n\nName\nDescription\nAttributes\n\n\n\n\n--min_counts\nMinimum number of counts captured per cell.\ninteger, example: 200\n\n\n--max_counts\nMaximum number of counts captured per cell.\ninteger, example: 5000000\n\n\n--min_proteins_per_cell\nMinimum of non-zero values per cell.\ninteger, example: 200\n\n\n--max_proteins_per_cell\nMaximum of non-zero values per cell.\ninteger, example: 1500000\n\n\n--min_cells_per_protein\nMinimum of non-zero values per gene.\ninteger, example: 3\n\n\n--min_fraction_mito\nMinimum fraction of proteins that are mitochondrial.\ndouble, example: 0\n\n\n--max_fraction_mito\nMaximum fraction of proteins that are mitochondrial.\ndouble, example: 0.2"
  },
  {
    "objectID": "workflows/multiomics/prot_singlesample.html#authors",
    "href": "workflows/multiomics/prot_singlesample.html#authors",
    "title": "Prot singlesample",
    "section": "Authors",
    "text": "Authors\n\nDries De Maeyer  (author)\nRobrecht Cannoodt   (author, maintainer)\nDries Schaumont   (author)"
  },
  {
    "objectID": "architecture/status.html",
    "href": "architecture/status.html",
    "title": "Status",
    "section": "",
    "text": "flowchart LR\n  classDef done fill:#a3f6cf,stroke:#000000;\n  classDef wip fill:#f4cb93,stroke:#000000;\n  classDef todo fill:#f0aeb2,stroke:#000000;\n\n  Raw1[Sample 1] --> Split1[/Split\\nmodalities/]:::done --> ProcGEX1 & ProcRNAV1 & ProcADT1 & ProcATAC1 & ProcVDJ1\n  ProcGEX1[/Process GEX\\nprofile/]:::done --> ConcatGEX[/Concatenate\\nprofiles/]:::done --> ProcGEX[/Process GEX\\nprofiles/]:::done\n  ProcRNAV1[/Process RNAV\\nprofile/]:::wip --> ConcatRNAV[/Concatenate\\nprofiles/]:::done --> ProcRNAV[/Process RNAV\\nprofiles/]:::wip\n  ProcADT1[/Process ADT\\nprofile/]:::done --> ConcatADT[/Concatenate\\nprofiles/]:::done --> ProcADT[/Process ADT\\nprofiles/]:::todo\n  ProcATAC1[/Process ATAC\\nprofile/]:::todo --> ConcatATAC[/Concatenate\\nprofiles/]:::done --> ProcATAC[/Process ATAC\\nprofiles/]:::todo\n  ProcVDJ1[/Process VDJ\\nprofile/]:::todo --> ConcatVDJ[/Concatenate\\nprofiles/]:::done --> ProcVDJ[/Process VDJ\\nprofiles/]:::todo\n  ProcGEX & ProcRNAV & ProcADT & ProcATAC & ProcVDJ --> Merge[/Merge\\nmodalities/]:::done --> Integration[/Integration/]:::done\n\n\n\n\n\nFigure 1: Status of implemented components. Green: implemented, orange: work in progress,\nGEX: Gene-expression. RNAV: RNA Velocity. ADT: Antibody-Derived Tags. ATAC: Assay for Transposase-Accessible Chromatin."
  },
  {
    "objectID": "architecture/index.html",
    "href": "architecture/index.html",
    "title": "Overview",
    "section": "",
    "text": "The single-cell workflow is comprised of multiple (standalone) subworkflows."
  },
  {
    "objectID": "architecture/index.html#subworkflows",
    "href": "architecture/index.html#subworkflows",
    "title": "Overview",
    "section": "Subworkflows",
    "text": "Subworkflows\n\nIngestion\nPurpose: Convert raw sequencing data or count tables into MuData data for further processing.\n\n\n\n\n\n\nflowchart LR\n\n  BCL[\"BCL<sup>*</sup>\"]\n  Fastq[\"Fastq<sup>*</sup>\"]\n  Ref[\"Reference\"]\n  RawDir[\"Raw out<sup>*</sup>\"]\n  RawCounts[\"Raw counts<sup>†</sup>\"]\n\n  Demux[/\"Demux\"/]\n  Mapping[/\"Mapping\"/]\n  Convert[/\"Convert\"/]\n\n  BCL --- Demux --> Fastq\n  Fastq & Ref --- Mapping --> RawDir --- Convert --> RawCounts\n\n\n  BCL -.-|\".tar.gz/Directory\"| BCL\n  Fastq -.-|\".fastq.gz/.fastq\"| Fastq\n  Ref -.-|\".tar.gz?\"| Ref\n  RawDir -.-|\"Directory\"| RawDir\n  RawCounts -.-|\".h5mu\"| RawCounts\n\n  linkStyle 7,8,9,10,11 stroke:#fff,stroke-width:0px,text-align:left;\n\n\n\n\n\nFigure 2: Ingestion pipeline.\n*: Possible entry points.\n†: Output file(s)\n\n\n\n\n\n\n\nSingle-sample unimodal processing\nPurpose: Per modality fitering pipelines are available to select true from false cells.\n\n\n\n\n\n\nflowchart LR\n\n  RawCounts[\"Raw counts<sup>*</sup>\"]\n  Processed[\"Processed\\ncounts<sup>†</sup>\"]\n\n  Step1[/\"Cell\\nfiltering\"/]\n  Step2[/\"Doublet\\ncalling\"/]\n  Step3[/\"Ambient RNA\\ncorrection\"/]\n  \n  RawCounts --> Step1 --> Step2 --> Step3 --> Processed\n\n\n\n\n\nFigure 3: Single-sample processing pipeline.\n*: Possible entry points.\n†: Output file(s)\n\n\n\n\n\n\n\nMulti-sample unimodal processing\nPurpose: … .\n\n\n\n\n\n\nflowchart LR\n\n  Processed[\"Processed\\ncounts<sup>*</sup>\"]\n  Normalised[\"Normalised\\ncounts<sup>†</sup>\"]\n\n  Step1[/\"Feature annotation\"/]\n  Step2[/\"Batch correction?\"/]\n  Step3[/\"Normalisation\"/]\n  Step4[/\"Feature selection\"/]\n\n  Processed --> Step1 --> Step2 --> Step3 --> Step4 --> Normalised\n\n\n\n\n\nFigure 4: Multi-sample processing pipeline.\n*: Possible entry points.\n†: Output file(s)\n\n\n\n\n\n\n\nIntegration\nPurpose: Performs an integration pipeline for single cell data based on a single or multiple modalities.\n\n\n\n\n\n\nflowchart LR\n\n  Normalised[\"Normalised\\ncounts<sup>*</sup>\"]\n  Integrated[\"Integrated\\ndata<sup>†</sup>\"]\n\n  Step1[/\"Data integration\"/]\n  Step2[/\"Dimensionality\\nreduction\"/]\n  \n  Normalised --> Step1 --> Step2 --> Integrated\n\n\n\n\n\nFigure 5: Integration pipeline.\n*: Possible entry points.\n†: Output file(s)\n\n\n\n\n\n\n\nInterpretation\nPurpose: Take different dataset annotations and combine them together into a single enriched dataset. The idea is to have a diff_muon object, i.e. a muon object containing the changes of the original object where data from the diff_muon will be pushed to the original muon object.\n\n\n\n\n\n\nNote\n\n\n\nThis is what we did a time ago and it has the drawback that it could make everything very slow. We might need to be able to aggregate diffs before adding them to the final object."
  }
]