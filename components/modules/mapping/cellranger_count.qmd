---
title: "Cellranger count"
namespace: "Mapping"
description: "Align fastq files using Cell Ranger count."
type: "module"
---

### Info

| Name | Value            |
|:------|:------------------------------------------|
| ID | `cellranger_count` |
| Namespace | `mapping` |
| Links | [Source code](https://github.com/openpipelines-bio/openpipeline/blob/main/src/mapping/cellranger_count){.btn-action .btn-sm .btn-info .btn role="button"} |


## Argument groups

### Inputs

<!-- Note: examples with multiple values weren't being rendered properly! -->

|Name          |Description                                                                            |Attributes                                                                                                 |
|:-------------|:--------------------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------|
|`--input`     |The fastq.gz files to align. Can also be a single directory containing fastq.gz files. |`file`, required, example: [`"sample_S1_L001_R1_001.fastq.gz"`, `"sample_S1_L001_R2_001.fastq.gz"`] |
|`--reference` |The path to Cell Ranger reference tar.gz file. Can also be a directory.                |`file`, required, example: `"reference.tar.gz"`                                                            |


### Outputs

|Name       |Description                                |Attributes                                     |
|:----------|:------------------------------------------|:----------------------------------------------|
|`--output` |The folder to store the alignment results. |`file`, required, example: `"/path/to/output"` |


### Arguments

|Name                   |Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |Attributes                  |
|:----------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------|
|`--expect_cells`       |Expected number of recovered cells, used as input to cell calling algorithm.                                                                                                                                                                                                                                                                                                                                                                                                                                      |`integer`, example: `3000`  |
|`--chemistry`          |Assay configuration. - auto: autodetect mode - threeprime: Single Cell 3' - fiveprime: Single Cell 5' - SC3Pv1: Single Cell 3' v1 - SC3Pv2: Single Cell 3' v2 - SC3Pv3: Single Cell 3' v3 - SC3Pv3LT: Single Cell 3' v3 LT - SC3Pv3HT: Single Cell 3' v3 HT - SC5P-PE: Single Cell 5' paired-end - SC5P-R2: Single Cell 5' R2-only - SC-FB: Single Cell Antibody-only 3' v2 or 5' See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information. |`string`, default: `"auto"` |
|`--secondary_analysis` |Whether or not to run the secondary analysis e.g. clustering.                                                                                                                                                                                                                                                                                                                                                                                                                                                     |`boolean`, default: `FALSE` |
|`--generate_bam`       |Whether to generate a BAM file.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |`boolean`, default: `TRUE`  |
|`--include_introns`    |Include intronic reads in count (default=true unless --target-panel is specified in which case default=false)                                                                                                                                                                                                                                                                                                                                                                                                     |`boolean`, default: `TRUE`  |



## Run Nextflow pipeline

This component has been built into a standalone Nextflow pipeline which you can execute using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main_build -latest \
  -main-script target/nextflow/mapping/cellranger_count/main.nf \
  --help
```

### Run command

The command to run the pipeline is:

:::{.panel-tabset}

## Docker

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main_build -latest \
  -profile docker \
  -main-script target/nextflow/mapping/cellranger_count/main.nf \
  --input "sample_S1_L001_R1_001.fastq.gz;sample_S1_L001_R2_001.fastq.gz \
  --reference "reference.tar.gz" \
  --publish_dir: "output"
```

## Singularity

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main_build -latest \
  -profile singularity \
  -main-script target/nextflow/mapping/cellranger_count/main.nf \
  --input "sample_S1_L001_R1_001.fastq.gz;sample_S1_L001_R2_001.fastq.gz \
  --reference "reference.tar.gz" \
  --publish_dir: "output"
```

## Podman

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main_build -latest \
  -profile podman \
  -main-script target/nextflow/mapping/cellranger_count/main.nf \
  --input "sample_S1_L001_R1_001.fastq.gz;sample_S1_L001_R2_001.fastq.gz \
  --reference "reference.tar.gz" \
  --publish_dir: "output"
```

:::

### Run command with parameter file

You can also store your parameters in a JSON, YAML or CSV file and pass it as an argument to the pipeline.
This is useful for starting a pipeline with more than one sample or more complicated input data.

Here's an example of what the `params.yaml` file could look like:

```yaml
- id: sample1
  # Inputs
  input: # please fill in - example: ["sample_S1_L001_R1_001.fastq.gz", "sample_S1_L001_R2_001.fastq.gz"]
  reference: # please fill in - example: "reference.tar.gz"

  # Outputs
  # output: "$id.$key.output.output"

  # Arguments
  # expect_cells: 3000
  chemistry: "auto"
  secondary_analysis: false
  generate_bam: true
  include_introns: true
```

Use the `--param_list` parameter to run the pipeline with a list of input parameters:

:::{.panel-tabset}

## Docker

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main_build -latest \
  -profile docker \
  -main-script target/nextflow/mapping/cellranger_count/main.nf \
  --param_list params.yaml
```

## Singularity

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main_build -latest \
  -profile singularity \
  -main-script target/nextflow/mapping/cellranger_count/main.nf \
  --param_list params.yaml
```

## Podman

```bash
nextflow run openpipelines-bio/openpipeline \
  -r main_build -latest \
  -profile podman \
  -main-script target/nextflow/mapping/cellranger_count/main.nf \
  --param_list params.yaml
```

:::

### Generate a param list


<form action="">

  <label for="reference">Reference Genome:</label><br />
  <input type="text" id="reference" name="reference"> <br />

  <label for="bam-file">BAM File</label><br />
  <input type="text" id="bam-file" name="bamFile"><br /> 

  <label for="fasta-file">FASTA File</label><br />
  <input type="text" id="fasta-file" name="fastaFile"><br />

  <label for="vcf-file">VCF File</label><br />
  <input type="text" id="vcf-file" name="vcfFile"><br />

  <label for="output-file">Output File Name:</label><br />
  <input type="text" id="output-file" name="outputFile"><br />

  <button type="button" onclick="downloadYAML()">Download <code>params.yaml</code></button>
</form>


<script>
  function downloadYAML(){
    let selected_library_type = document.getElementById('library_type').value;
    let selected_read_length = document.getElementById('read_length').value;
    let selected_max_reads = document.getElementById('max_reads').value;
    let selected_num_cores = document.getElementById('num_cores').value;
  
    let paramsYAML = {
      cellranger_mapping:{
        library_type:selected_library_type,
        read_length:selected_read_length,
        max_reads:selected_max_reads,
        num_cores:selected_num_cores
      }
    };
    let data = "data:text/plain;charset=utf-8," + encodeURIComponent(JSON.stringify(paramsYAML));
  
    let link = document.createElement('a');
    link.setAttribute('href', data);
    link.setAttribute('download', 'params.yaml');
    link.click();
  }
</script>

## Use as module

Here's an example of how to include this component as a module in your pipeline. It assumes you've added OpenPipelines as a Git submodule to your repository.
<!-- Todo: add documentation to guide on how to add OpenPipelines as a Git submodule-->

```groovy
include { cellranger_count } from "./openpipelines/target/nextflow/mapping/cellranger_count/main.nf"

workflow {
  Channel.fromList([
    [
      "sample1",
      [
        input: ["sample_S1_L001_R1_001.fastq.gz", "sample_S1_L001_R2_001.fastq.gz"], 
        reference: "reference.tar.gz"
      ]
    ]
  ])
    | view{"Input: $it"}
    | cellranger_count
    | view{"Output: $it"}
}
```

## Authors

  * Angela Pisco [{{< fa brands github >}}](https://github.com/aopisco) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-0142-2355) (author)
  * Samuel D'Souza [{{< fa brands github >}}](https://github.com/srdsam) (author)
  * Robrecht Cannoodt [{{< fa brands github >}}](https://github.com/rcannood) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-3641-729X) (author, maintainer)
