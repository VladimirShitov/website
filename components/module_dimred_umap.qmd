---
title: Umap
toc: false
---

::: {.column-margin}

### Info

ID: `umap`  
Namespace: `dimred`

### Command

```bash
nextflow run openpipelines-bio/openpipeline -r main_build -main-script target/nextflow/dimred/umap/main.nf --help
```

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/main/src/dimred/umap){.btn-action .btn-sm .btn-info .btn role="button"}
:::

UMAP (Uniform Manifold Approximation and Projection) is a manifold learning technique suitable for visualizing high-dimensional data. Besides tending to be faster than tSNE, it optimizes the embedding such that it best reflects the topology of the data, which we represent throughout Scanpy using a neighborhood graph. tSNE, by contrast, optimizes the distribution of nearest-neighbor distances in the embedding such that these best match the distribution of distances in the high-dimensional space. We use the implementation of umap-learn [McInnes18]. For a few comparisons of UMAP with tSNE, see this preprint.


## Argument group

### Arguments



|Name                     |Description                                                                                                                                                                                                                                                                                                                                                                               |Attributes                               |
|:------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------|
|`--input`                |Input h5mu file                                                                                                                                                                                                                                                                                                                                                                           |`file`, required, example: "input.h5mu"  |
|`--uns_neighbors`        |The .uns neighbors slot as output by the `find_neighbors` component.                                                                                                                                                                                                                                                                                                                      |`string`, default: "neighbors"           |
|`--output`               |Output h5mu file.                                                                                                                                                                                                                                                                                                                                                                         |`file`, required, example: "output.h5mu" |
|`--output_key`           |The pre/postfix under which to store the UMAP results.                                                                                                                                                                                                                                                                                                                                    |`string`, default: "umap"                |
|`--min_dist`             |The effective minimum distance between embedded points. Smaller values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points. The value should be set relative to the spread value, which determines the scale at which embedded points will be spread out. |`double`, default: 0.5                   |
|`--spread`               |The effective scale of embedded points. In combination with min_dist this determines how clustered/clumped the embedded points are.                                                                                                                                                                                                                                                       |`double`, default: 1                     |
|`--num_components`       |The number of dimensions of the embedding.                                                                                                                                                                                                                                                                                                                                                |`integer`, default: 2                    |
|`--max_iter`             |The number of iterations (epochs) of the optimization.                                                                                                                                                                                                                                                                                                                                    |`integer`                                |
|`--alpha`                |The initial learning rate for the embedding optimization.                                                                                                                                                                                                                                                                                                                                 |`double`, default: 1                     |
|`--gamma`                |Weighting applied to negative samples in low dimensional embedding optimization. Values higher than one will result in greater weight being given to negative samples.                                                                                                                                                                                                                    |`double`, default: 1                     |
|`--negative_sample_rate` |The number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding.                                                                                                                                                                                                                                                      |`integer`, default: 5                    |
|`--init_pos`             |How to initialize the low dimensional embedding. Called init in the original UMAP. Options are paga, spectral and random.                                                                                                                                                                                                                                                                 |`string`, default: "spectral"            |

## Authors

 * Dries De Maeyer  (maintainer)
