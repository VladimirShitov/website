---
title: Architecture
---


## Pipeline architecture overview

:::{.column-page}

```{mermaid}
%%| label: fig-architecture
%%| fig-cap: Overview single cell processing steps in OpenPipeline. Rectangles are data objects, parallelograms are Viash modules or subworkflows.

flowchart LR
  Raw[Raw\ndata]
  Dataset[Dataset]
  Ingestion[/Ingestion/]
  Preproc1[/Unimodal\nsingle-sample\nprocessing/]
  Preproc2[/Unimodal\nmulti-sample\nprocessing/]
  Integration[/Integration/]
  Interpretation[/Interpretation/]
  Conversion[/Conversion/]

  Raw --- Ingestion --> Split[/Split/] --> Preproc1 --> Concat[/Concat/] --> Preproc2 --> Merge[/Merge/] --> Integration --> Interpretation --> Conversion --> Dataset

  Ingestion -.-|"- Demux.\n- Mapping"| Ingestion
  Preproc1 -.-|"- Count QC\n- Doublet calling\n- Ambient RNA\n- Gatekeeper"| Preproc1
  Preproc2 -.-|"- Normalisation\n- Feature filtering\n- Feature selection\n- Batch correction?\n- Dim. red.?"| Preproc2
  Integration -.-|"- Dim. red.\n- Data integration"| Integration
  Interpretation -.-|"- Clustering\n- Cell typing\n- GRN\n- ..."| Interpretation

  linkStyle 10,11,12,13,14 stroke:#fff,stroke-width:0px,text-align:left;

  %% click Ingestion "./#ingestion"
  %% style Ingestion color:#2873c7,text-decoration:underline;
  %% click Preproc1 "./#single-sample-preproc"
  %% style Preproc1 color:#2873c7,text-decoration:underline;
  %% click Preproc2 "./#multi-sample-preproc"
  %% style Preproc2 color:#2873c7,text-decoration:underline;
  %% click Integration "./#integration"
  %% style Integration color:#2873c7,text-decoration:underline;
```

:::






## Use cases


:::{.callout-note}
In these use-cases, `Interpretation`, `Conversion` and `Dataset` are omitted because they are the same in every use case.
:::


### A single unimodal sample

:::{.column-page}

```{mermaid}
%%| label: fig-example1
%%| fig-cap: "Example of how the concat and merges work.  \nGEX: Gene-expression. USS: Unimodal single-sample processing. UMS: Unimodal multi-sample processing."

flowchart LR

  Raw1[Sample 1] --- Ingestion1[/Ingestion/] --> Split1[/Split/] --> GEX1[GEX 1]
  GEX1 --> ProcGEX1[/USS GEX/]
  ProcGEX1 --- ConcatGEX[/Concat/] --> GEX[Combined\nGEX]
  GEX --> ProcGEX[/UMS GEX/]
  ProcGEX --- Merge[/Merge/] --> Integration[/Integration/] --> Downstream[/.../]

```

:::



### A single multimodal sample


:::{.column-page}

```{mermaid}
%%| label: fig-example2
%%| fig-cap: "Example of how the concat and merges work.  \nGEX: Gene-expression. ADT: Antibody-Derived Tags. RNAV: RNA Velocity. USS: Unimodal single-sample processing. UMS: Unimodal multi-sample processing."

flowchart LR

  Raw1[Sample 1] --- Ingestion1[/Ingestion/] --> Split1[/Split/] --> GEX1[GEX 1] & ADT1[ADT 1] & RNAV1[RNAV 1]
  GEX1 --> ProcGEX1[/USS GEX/]
  ADT1 --> ProcADT1[/USS ADT/]
  RNAV1 --> ProcRNAV1[/USS RNAV/]
  ProcGEX1 --- ConcatGEX[/Concat/] --> GEX[Combined\nGEX]
  ProcADT1 --- ConcatADT[/Concat/] --> ADT[Combined\nADT]
  ProcRNAV1 --- ConcatRNAV[/Concat/] --> RNAV[Combined\nRNAV]
  GEX --> ProcGEX[/UMS GEX/]
  ADT --> ProcADT[/UMS ADT/]
  RNAV --> ProcRNAV[/UMS RNAV/]
  ProcGEX & ProcADT & ProcRNAV--- Merge[/Merge/] --> Integration[/Integration/] --> Downstream[/.../]

```

:::


### Multiple unimodal samples

:::{.column-page}

```{mermaid}
%%| label: fig-example3
%%| fig-cap: "Example of how the concat and merges work.  \nGEX: Gene-expression. USS: Unimodal single-sample processing. UMS: Unimodal multi-sample processing."

flowchart LR

  Raw1[Sample 1] --- Ingestion1[/Ingestion/] --> Split1[/Split/] --> GEX1[GEX 1]
  Raw2[Sample 2] --- Ingestion2[/Ingestion/] --> Split2[/Split/] --> GEX2[GEX 2]
  Raw3[Sample 3] --- Ingestion3[/Ingestion/] --> Split3[/Split/] --> GEX3[GEX 3]
  GEX1 --> ProcGEX1[/USS GEX/]
  GEX2 --> ProcGEX2[/USS GEX/]
  GEX3 --> ProcGEX3[/USS GEX/]
  ProcGEX1 & ProcGEX2 & ProcGEX3 --- ConcatGEX[/Concat/] --> GEX[Combined\nGEX]
  GEX --> ProcGEX[/UMS GEX/]
  ProcGEX --- Merge[/Merge/] --> Integration[/Integration/] --> Downstream[/.../]

```

:::



### Multiple multimodal samples

:::{.column-page}

```{mermaid}
%%| label: fig-example4
%%| fig-cap: "Example of how the concat and merges work.  \nGEX: Gene-expression. ADT: Antibody-Derived Tags. USS: Unimodal single-sample processing. UMS: Unimodal multi-sample processing."

flowchart LR

  Raw1[Sample 1] --- Ingestion1[/Ingestion/] --> Split1[/Split/] --> GEX1[GEX 1] & ADT1[ADT 1]
  Raw2[Sample 2] --- Ingestion2[/Ingestion/] --> Split2[/Split/] --> GEX2[GEX 2] & ADT2[ADT 2]
  GEX1 --> ProcGEX1[/USS GEX/]
  ADT1 --> ProcADT1[/USS ADT/]
  GEX2 --> ProcGEX2[/USS GEX/]
  ADT2 --> ProcADT2[/USS ADT/]
  ProcGEX1 & ProcGEX2 --- ConcatGEX[/Concat/] --> GEX[Combined\nGEX]
  ProcADT1 & ProcADT2 --- ConcatADT[/Concat/] --> ADT[Combined\nADT]
  GEX --> ProcGEX[/UMS GEX/]
  ADT --> ProcADT[/UMS ADT/]
  ProcGEX & ProcADT --- Merge[/Merge/] --> Integration[/Integration/] --> Downstream[/.../]

```

:::

## Subworkflows

### Ingestion

Purpose: Convert raw sequencing data or count tables into MuData data for further processing. 

:::{.column-page}

```{mermaid}
%%| label: fig-ingestion
%%| fig-cap: "Ingestion pipeline.  \n`*`: Possible entry points.  \n`†`: Output file(s)"
flowchart LR

  BCL["BCL<sup>*</sup>"]
  Fastq["Fastq<sup>*</sup>"]
  Ref["Reference"]
  RawDir["Raw out<sup>*</sup>"]
  RawCounts["Raw counts<sup>†</sup>"]

  Demux[/"Demux"/]
  Mapping[/"Mapping"/]
  Convert[/"Convert"/]

  BCL --- Demux --> Fastq
  Fastq & Ref --- Mapping --> RawDir --- Convert --> RawCounts


  BCL -.-|".tar.gz/Directory"| BCL
  Fastq -.-|".fastq.gz/.fastq"| Fastq
  Ref -.-|".tar.gz?"| Ref
  RawDir -.-|"Directory"| RawDir
  RawCounts -.-|".h5mu"| RawCounts

  linkStyle 7,8,9,10,11 stroke:#fff,stroke-width:0px,text-align:left;
```

:::


### Single-sample unimodal processing {#single-sample-preproc}

Purpose: Per modality fitering pipelines are available to select true from false cells. 

:::{.column-page}

```{mermaid}
%%| label: fig-sspreproc
%%| fig-cap: "Single-sample processing pipeline.  \n`*`: Possible entry points.  \n`†`: Output file(s)"
flowchart LR

  RawCounts["Raw counts<sup>*</sup>"]
  Processed["Processed\ncounts<sup>†</sup>"]

  Step1[/"Cell\nfiltering"/]
  Step2[/"Doublet\ncalling"/]
  Step3[/"Ambient RNA\ncorrection"/]
  
  RawCounts --> Step1 --> Step2 --> Step3 --> Processed
```

:::



### Multi-sample unimodal processing {#multi-sample-preproc}

Purpose: ... .

:::{.column-page}

```{mermaid}
%%| label: fig-mspreproc
%%| fig-cap: "Multi-sample processing pipeline.  \n`*`: Possible entry points.  \n`†`: Output file(s)"
flowchart LR

  Processed["Processed\ncounts<sup>*</sup>"]
  Normalised["Normalised\ncounts<sup>†</sup>"]

  Step1[/"Feature filtering"/]
  Step2[/"Batch correction?"/]
  Step3[/"Normalisation"/]
  Step4[/"Feature selection"/]

  Processed --> Step1 --> Step2 --> Step3 --> Step4 --> Normalised
```

:::



### Integration {#integration}

Purpose: Performs an integration pipeline for single cell data based on a single or multiple modalities. 

:::{.column-page}

```{mermaid}
%%| label: fig-integration
%%| fig-cap: "Integration pipeline.  \n`*`: Possible entry points.  \n`†`: Output file(s)"
flowchart LR

  Normalised["Normalised\ncounts<sup>*</sup>"]
  Integrated["Integrated\ndata<sup>†</sup>"]

  Step1[/"Data integration"/]
  Step2[/"Dimensionality\nreduction"/]
  
  Normalised --> Step1 --> Step2 --> Integrated
```

:::


### Interpretation {#interpretation}

Purpose: Take different dataset annotations and combine them together into a single enriched dataset. The idea is to have a diff_muon object, i.e. a muon object containing the changes of the original object where data from the diff_muon will be pushed to the original muon object. 


:::{.callout-note}
This is what we did a time ago and it has the drawback that it could make everything very slow. We might need to be able to aggregate diffs before adding them to the final object.
:::




## Decisions (to make)

* Try to avoid pipeline metromaps ([Example](https://github.com/nf-core/rnaseq/blob/master/docs/images/nf-core-rnaseq_metro_map_grey.png)). Instead, multiple pipelines using a different subset or ordering of the same components can be implemented to suit the needs of any particular requirement.

* Division of labour:
  - CZ Biohub: `Ingestion` (GEX, Multiome, Cite-seq, ...?)
  - Janssen: `Split`, `Concat`, `Merge`, `Conversion`, `GEX USS`, `GEX MSS`
  - Helmholtz: `Integration`
  - All: `Intepretation` (depending on the specific needs)
  - TBD: `ADT`, `ATAC`, `RNAV`, `VDJ`, ...?

* Reporting

* Interactive (sub)-workflows

* Learn from [openproblems.bio](https://openproblems.bio/) benchmarks.