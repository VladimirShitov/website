[
  {
    "objectID": "architecture/use-cases.html",
    "href": "architecture/use-cases.html",
    "title": "Use-cases",
    "section": "",
    "text": "A single unimodal sample\n\n\n\n\n\n\nflowchart LR\n\n  Raw1[Sample 1] --- Ingestion1[/Ingestion/] --> Split1[/Split/] --> GEX1[GEX 1]\n  GEX1 --> ProcGEX1[/USS GEX/]\n  ProcGEX1 --- ConcatGEX[/Concatenating\\nSamples/] --> GEX[Combined\\nGEX]\n  GEX --> ProcGEX[/UMS GEX/]\n  ProcGEX --- Merge[/Merge/] --> Integration[/Integration/] --> Downstream[/.../]\n\n\n\n\n\n\nFigure 1: Example of how the concatenation and merges work.\nGEX: Gene-expression. USS: Unimodal single-sample processing. UMS: Unimodal multi-sample processing.\n\n\n\n\n\n\n\nA single multimodal sample\n\n\n\n\n\n\nflowchart LR\n\n  Raw1[Sample 1] --- Ingestion1[/Ingestion/] --> Split1[/Split/] --> GEX1[GEX 1] & ADT1[ADT 1] & RNAV1[RNAV 1]\n  GEX1 --> ProcGEX1[/USS GEX/]\n  ADT1 --> ProcADT1[/USS ADT/]\n  RNAV1 --> ProcRNAV1[/USS RNAV/]\n  ProcGEX1 --- ConcatGEX[/Concatenating\\nSamples/] --> GEX[Combined\\nGEX]\n  ProcADT1 --- ConcatADT[/Concatenating\\nSamples/] --> ADT[Combined\\nADT]\n  ProcRNAV1 --- ConcatRNAV[/Concatenating\\nSamples/] --> RNAV[Combined\\nRNAV]\n  GEX --> ProcGEX[/UMS GEX/]\n  ADT --> ProcADT[/UMS ADT/]\n  RNAV --> ProcRNAV[/UMS RNAV/]\n  ProcGEX & ProcADT & ProcRNAV--- Merge[/Merge/] --> Integration[/Integration/] --> Downstream[/.../]\n\n\n\n\n\n\nFigure 2: Example of how the concatenation and merges work.\nGEX: Gene-expression. ADT: Antibody-Derived Tags. RNAV: RNA Velocity. USS: Unimodal single-sample processing. UMS: Unimodal multi-sample processing.\n\n\n\n\n\n\n\nMultiple unimodal samples\n\n\n\n\n\n\nflowchart LR\n\n  Raw1[Sample 1] --- Ingestion1[/Ingestion/] --> Split1[/Split/] --> GEX1[GEX 1]\n  Raw2[Sample 2] --- Ingestion2[/Ingestion/] --> Split2[/Split/] --> GEX2[GEX 2]\n  Raw3[Sample 3] --- Ingestion3[/Ingestion/] --> Split3[/Split/] --> GEX3[GEX 3]\n  GEX1 --> ProcGEX1[/USS GEX/]\n  GEX2 --> ProcGEX2[/USS GEX/]\n  GEX3 --> ProcGEX3[/USS GEX/]\n  ProcGEX1 & ProcGEX2 & ProcGEX3 --- ConcatGEX[/Concatenating\\nSamples/] --> GEX[Combined\\nGEX]\n  GEX --> ProcGEX[/UMS GEX/]\n  ProcGEX --- Merge[/Merge/] --> Integration[/Integration/] --> Downstream[/.../]\n\n\n\n\n\n\nFigure 3: Example of how the concatenation and merges work.\nGEX: Gene-expression. USS: Unimodal single-sample processing. UMS: Unimodal multi-sample processing.\n\n\n\n\n\n\n\nMultiple multimodal samples\n\n\n\n\n\n\nflowchart LR\n\n  Raw1[Sample 1] --- Ingestion1[/Ingestion/] --> Split1[/Split/] --> GEX1[GEX 1] & ADT1[ADT 1]\n  Raw2[Sample 2] --- Ingestion2[/Ingestion/] --> Split2[/Split/] --> GEX2[GEX 2] & ADT2[ADT 2]\n  GEX1 --> ProcGEX1[/USS GEX/]\n  ADT1 --> ProcADT1[/USS ADT/]\n  GEX2 --> ProcGEX2[/USS GEX/]\n  ADT2 --> ProcADT2[/USS ADT/]\n  ProcGEX1 & ProcGEX2 --- ConcatGEX[/Concatenating\\nSamples/] --> GEX[Combined\\nGEX]\n  ProcADT1 & ProcADT2 --- ConcatADT[/Concatenating\\nSamples/] --> ADT[Combined\\nADT]\n  GEX --> ProcGEX[/UMS GEX/]\n  ADT --> ProcADT[/UMS ADT/]\n  ProcGEX & ProcADT --- Merge[/Merge/] --> Integration[/Integration/] --> Downstream[/.../]\n\n\n\n\n\n\nFigure 4: Example of how the concat and merges work.\nGEX: Gene-expression. ADT: Antibody-Derived Tags. USS: Unimodal single-sample processing. UMS: Unimodal multi-sample processing."
  },
  {
    "objectID": "architecture/index.html",
    "href": "architecture/index.html",
    "title": "Overview",
    "section": "",
    "text": "The single-cell workflow is comprised of multiple (standalone) subworkflows."
  },
  {
    "objectID": "architecture/index.html#subworkflows",
    "href": "architecture/index.html#subworkflows",
    "title": "Overview",
    "section": "Subworkflows",
    "text": "Subworkflows\n\nIngestion\nPurpose: Convert raw sequencing data or count tables into MuData data for further processing.\n\n\n\n\n\n\nflowchart LR\n\n  BCL[\"BCL*\"]\n  Fastq[\"Fastq*\"]\n  Ref[\"Reference\"]\n  RawDir[\"Raw out*\"]\n  RawCounts[\"Raw counts†\"]\n\n  Demux[/\"Demux\"/]\n  Mapping[/\"Mapping\"/]\n  Convert[/\"Convert\"/]\n\n  BCL --- Demux --> Fastq\n  Fastq & Ref --- Mapping --> RawDir --- Convert --> RawCounts\n\n\n  BCL -.-|\".tar.gz/Directory\"| BCL\n  Fastq -.-|\".fastq.gz/.fastq\"| Fastq\n  Ref -.-|\".tar.gz?\"| Ref\n  RawDir -.-|\"Directory\"| RawDir\n  RawCounts -.-|\".h5mu\"| RawCounts\n\n  linkStyle 7,8,9,10,11 stroke:#fff,stroke-width:0px,text-align:left;\n\n\n\n\n\nFigure 2: Ingestion pipeline.\n*: Possible entry points.\n†: Output file(s)\n\n\n\n\n\n\n\nSingle-sample unimodal processing\nPurpose: Per modality fitering pipelines are available to select true from false cells.\n\n\n\n\n\n\nflowchart LR\n\n  RawCounts[\"Raw counts*\"]\n  Processed[\"Processed\\ncounts†\"]\n\n  Step1[/\"Cell\\nfiltering\"/]\n  Step2[/\"Doublet\\ncalling\"/]\n  Step3[/\"Ambient RNA\\ncorrection\"/]\n  \n  RawCounts --> Step1 --> Step2 --> Step3 --> Processed\n\n\n\n\n\nFigure 3: Single-sample processing pipeline.\n*: Possible entry points.\n†: Output file(s)\n\n\n\n\n\n\n\nMulti-sample unimodal processing\nPurpose: … .\n\n\n\n\n\n\nflowchart LR\n\n  Processed[\"Processed\\ncounts*\"]\n  Normalised[\"Normalised\\ncounts†\"]\n\n  Step1[/\"Feature annotation\"/]\n  Step2[/\"Batch correction?\"/]\n  Step3[/\"Normalisation\"/]\n  Step4[/\"Feature selection\"/]\n\n  Processed --> Step1 --> Step2 --> Step3 --> Step4 --> Normalised\n\n\n\n\n\nFigure 4: Multi-sample processing pipeline.\n*: Possible entry points.\n†: Output file(s)\n\n\n\n\n\n\n\nIntegration\nPurpose: Performs an integration pipeline for single cell data based on a single or multiple modalities.\n\n\n\n\n\n\nflowchart LR\n\n  Normalised[\"Normalised\\ncounts*\"]\n  Integrated[\"Integrated\\ndata†\"]\n\n  Step1[/\"Data integration\"/]\n  Step2[/\"Dimensionality\\nreduction\"/]\n  \n  Normalised --> Step1 --> Step2 --> Integrated\n\n\n\n\n\nFigure 5: Integration pipeline.\n*: Possible entry points.\n†: Output file(s)\n\n\n\n\n\n\n\nInterpretation\nPurpose: Take different dataset annotations and combine them together into a single enriched dataset. The idea is to have a diff_muon object, i.e. a muon object containing the changes of the original object where data from the diff_muon will be pushed to the original muon object.\n\n\n\n\n\n\nNote\n\n\n\nThis is what we did a time ago and it has the drawback that it could make everything very slow. We might need to be able to aggregate diffs before adding them to the final object."
  },
  {
    "objectID": "contribute/index.html",
    "href": "contribute/index.html",
    "title": "Developers Guide",
    "section": "",
    "text": "%%{init: { 'logLevel': 'debug', 'theme': 'default'} } }%%\ngitGraph\n  commit id: \"initial commit\"\n  branch main_build\n  commit id: \"CI build\"\n  checkout main\n  commit\n  checkout main_build\n  merge main\n  checkout main\n  branch feature_a\n  branch feature_b\n  checkout feature_a\n  commit\n  commit\n  checkout main\n  commit id: \"#release 0.1\" type: HIGHLIGHT\n  checkout main_build\n  merge main\n  checkout main\n  branch release\n  commit tag: \"0.1\"\n  checkout main\n  commit\n  checkout feature_b\n  commit\n  commit\n  checkout feature_a\n  commit\n  checkout main\n  merge feature_a\n  checkout main_build\n  merge main\n  checkout main\n  checkout feature_b\n  commit\n  checkout main\n  merge feature_b\n  checkout main_build\n  merge main\n  checkout release\n  merge main tag: \"0.2\""
  }
]